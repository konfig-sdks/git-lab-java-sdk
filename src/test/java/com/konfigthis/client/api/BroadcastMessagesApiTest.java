/*
 * GitLab API
 * An OpenAPI definition for the GitLab REST API. Few API resources or endpoints are currently included. The intent is to expand this to match the entire Markdown documentation of the API: <https://docs.gitlab.com/ee/api/>. Contributions are welcome.  When viewing this on gitlab.com, you can test API calls directly from the browser against the `gitlab.com` instance, if you are logged in. The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie), so each request is made using your account.  Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html) 
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.APIEntitiesBroadcastMessage;
import com.konfigthis.client.model.BroadcastmessagesCreateMessageRequest;
import com.konfigthis.client.model.BroadcastmessagesUpdateMessageRequest;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BroadcastMessagesApi
 */
@Disabled
public class BroadcastMessagesApiTest {

    private static BroadcastMessagesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new BroadcastMessagesApi(apiClient);
    }

    /**
     * Create a broadcast message
     *
     * This feature was introduced in GitLab 8.12.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMessageTest() throws ApiException {
        String message = null;
        OffsetDateTime startsAt = null;
        OffsetDateTime endsAt = null;
        String color = null;
        String font = null;
        List<Integer> targetAccessLevels = null;
        String targetPath = null;
        String broadcastType = null;
        Boolean dismissable = null;
        APIEntitiesBroadcastMessage response = api.createMessage(message)
                .startsAt(startsAt)
                .endsAt(endsAt)
                .color(color)
                .font(font)
                .targetAccessLevels(targetAccessLevels)
                .targetPath(targetPath)
                .broadcastType(broadcastType)
                .dismissable(dismissable)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a broadcast message
     *
     * This feature was introduced in GitLab 8.12.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMessageTest() throws ApiException {
        Integer id = null;
        APIEntitiesBroadcastMessage response = api.deleteMessage(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a specific broadcast message
     *
     * This feature was introduced in GitLab 8.12.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSpecificMessageTest() throws ApiException {
        Integer id = null;
        APIEntitiesBroadcastMessage response = api.getSpecificMessage(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all broadcast messages
     *
     * This feature was introduced in GitLab 8.12.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        APIEntitiesBroadcastMessage response = api.listAll()
                .page(page)
                .perPage(perPage)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a broadcast message
     *
     * This feature was introduced in GitLab 8.12.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMessageTest() throws ApiException {
        Integer id = null;
        String message = null;
        OffsetDateTime startsAt = null;
        OffsetDateTime endsAt = null;
        String color = null;
        String font = null;
        List<Integer> targetAccessLevels = null;
        String targetPath = null;
        String broadcastType = null;
        Boolean dismissable = null;
        APIEntitiesBroadcastMessage response = api.updateMessage(id)
                .message(message)
                .startsAt(startsAt)
                .endsAt(endsAt)
                .color(color)
                .font(font)
                .targetAccessLevels(targetAccessLevels)
                .targetPath(targetPath)
                .broadcastType(broadcastType)
                .dismissable(dismissable)
                .execute();
        // TODO: test validations
    }

}
