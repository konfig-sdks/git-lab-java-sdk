/*
 * GitLab API
 * An OpenAPI definition for the GitLab REST API. Few API resources or endpoints are currently included. The intent is to expand this to match the entire Markdown documentation of the API: <https://docs.gitlab.com/ee/api/>. Contributions are welcome.  When viewing this on gitlab.com, you can test API calls directly from the browser against the `gitlab.com` instance, if you are logged in. The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie), so each request is made using your account.  Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html) 
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.APIEntitiesBranch;
import com.konfigthis.client.model.BranchesProtectBranchRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BranchesApi
 */
@Disabled
public class BranchesApiTest {

    private static BranchesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new BranchesApi(apiClient);
    }

    /**
     * Check if a branch exists
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkIfExistsTest() throws ApiException {
        String id = null;
        String branch = null;
        api.checkIfExists(id, branch)
                .execute();
        // TODO: test validations
    }

    /**
     * Create branch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBranchTest() throws ApiException {
        String id = null;
        String branch = null;
        String ref = null;
        APIEntitiesBranch response = api.createBranch(id, branch, ref)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a branch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBranchTest() throws ApiException {
        String id = null;
        String branch = null;
        api.deleteBranch(id, branch)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete all merged branches
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMergedTest() throws ApiException {
        String id = null;
        api.deleteMerged(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a project repository branches
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllTest() throws ApiException {
        String id = null;
        Integer page = null;
        Integer perPage = null;
        String search = null;
        String regex = null;
        String sort = null;
        String pageToken = null;
        List<APIEntitiesBranch> response = api.getAll(id)
                .page(page)
                .perPage(perPage)
                .search(search)
                .regex(regex)
                .sort(sort)
                .pageToken(pageToken)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a single repository branch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSingleBranchTest() throws ApiException {
        String id = null;
        Integer branch = null;
        APIEntitiesBranch response = api.getSingleBranch(id, branch)
                .execute();
        // TODO: test validations
    }

    /**
     * Protect a single branch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void protectBranchTest() throws ApiException {
        String id = null;
        String branch = null;
        Boolean developersCanPush = null;
        Boolean developersCanMerge = null;
        APIEntitiesBranch response = api.protectBranch(id, branch)
                .developersCanPush(developersCanPush)
                .developersCanMerge(developersCanMerge)
                .execute();
        // TODO: test validations
    }

    /**
     * Unprotect a single branch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unprotectBranchTest() throws ApiException {
        String id = null;
        String branch = null;
        APIEntitiesBranch response = api.unprotectBranch(id, branch)
                .execute();
        // TODO: test validations
    }

}
