/*
 * GitLab API
 * An OpenAPI definition for the GitLab REST API. Few API resources or endpoints are currently included. The intent is to expand this to match the entire Markdown documentation of the API: <https://docs.gitlab.com/ee/api/>. Contributions are welcome.  When viewing this on gitlab.com, you can test API calls directly from the browser against the `gitlab.com` instance, if you are logged in. The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie), so each request is made using your account.  Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html) 
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.APIEntitiesMetricImage;
import com.konfigthis.client.model.AlertmanagementUpdateMetricImageRequest;
import com.konfigthis.client.model.AlertmanagementUploadMetricImageRequest;
import java.io.File;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AlertManagementApi
 */
@Disabled
public class AlertManagementApiTest {

    private static AlertManagementApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new AlertManagementApi(apiClient);
    }

    /**
     * Workhorse authorize metric image file upload
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizeMetricImageUploadTest() throws ApiException {
        String id = null;
        Integer alertIid = null;
        api.authorizeMetricImageUpload(id, alertIid)
                .execute();
        // TODO: test validations
    }

    /**
     * Metric Images for alert
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMetricImagesForAlertTest() throws ApiException {
        String id = null;
        Integer alertIid = null;
        List<APIEntitiesMetricImage> response = api.getMetricImagesForAlert(id, alertIid)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove a metric image for an alert
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeMetricImageTest() throws ApiException {
        String id = null;
        Integer alertIid = null;
        Integer metricImageId = null;
        APIEntitiesMetricImage response = api.removeMetricImage(id, alertIid, metricImageId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a metric image for an alert
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMetricImageTest() throws ApiException {
        String id = null;
        Integer alertIid = null;
        Integer metricImageId = null;
        String url = null;
        String urlText = null;
        APIEntitiesMetricImage response = api.updateMetricImage(id, alertIid, metricImageId)
                .url(url)
                .urlText(urlText)
                .execute();
        // TODO: test validations
    }

    /**
     * Upload a metric image for an alert
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadMetricImageTest() throws ApiException {
        String id = null;
        Integer alertIid = null;
        File _file = null;
        String url = null;
        String urlText = null;
        APIEntitiesMetricImage response = api.uploadMetricImage(id, alertIid, _file)
                .url(url)
                .urlText(urlText)
                .execute();
        // TODO: test validations
    }

}
