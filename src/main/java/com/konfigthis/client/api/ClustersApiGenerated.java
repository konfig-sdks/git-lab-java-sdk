/*
 * GitLab API
 * An OpenAPI definition for the GitLab REST API. Few API resources or endpoints are currently included. The intent is to expand this to match the entire Markdown documentation of the API: <https://docs.gitlab.com/ee/api/>. Contributions are welcome.  When viewing this on gitlab.com, you can test API calls directly from the browser against the `gitlab.com` instance, if you are logged in. The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie), so each request is made using your account.  Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html) 
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.APIEntitiesCluster;
import com.konfigthis.client.model.ClustersAddExistingKubernetesInstanceClusterRequest;
import com.konfigthis.client.model.ClustersUpdateInstanceClusterRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ClustersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ClustersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ClustersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKeyAuth() == null) {
            throw new IllegalArgumentException("\"Private-Token\" is required but no API key was provided. Please set \"Private-Token\" with ApiClient#setApiKeyAuth(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addExistingKubernetesInstanceClusterCall(ClustersAddExistingKubernetesInstanceClusterRequest clustersAddExistingKubernetesInstanceClusterRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = clustersAddExistingKubernetesInstanceClusterRequest;

        // create path and map variables
        String localVarPath = "/api/v4/admin/clusters/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addExistingKubernetesInstanceClusterValidateBeforeCall(ClustersAddExistingKubernetesInstanceClusterRequest clustersAddExistingKubernetesInstanceClusterRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clustersAddExistingKubernetesInstanceClusterRequest' is set
        if (clustersAddExistingKubernetesInstanceClusterRequest == null) {
            throw new ApiException("Missing the required parameter 'clustersAddExistingKubernetesInstanceClusterRequest' when calling addExistingKubernetesInstanceCluster(Async)");
        }

        return addExistingKubernetesInstanceClusterCall(clustersAddExistingKubernetesInstanceClusterRequest, _callback);

    }


    private ApiResponse<APIEntitiesCluster> addExistingKubernetesInstanceClusterWithHttpInfo(ClustersAddExistingKubernetesInstanceClusterRequest clustersAddExistingKubernetesInstanceClusterRequest) throws ApiException {
        okhttp3.Call localVarCall = addExistingKubernetesInstanceClusterValidateBeforeCall(clustersAddExistingKubernetesInstanceClusterRequest, null);
        Type localVarReturnType = new TypeToken<APIEntitiesCluster>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addExistingKubernetesInstanceClusterAsync(ClustersAddExistingKubernetesInstanceClusterRequest clustersAddExistingKubernetesInstanceClusterRequest, final ApiCallback<APIEntitiesCluster> _callback) throws ApiException {

        okhttp3.Call localVarCall = addExistingKubernetesInstanceClusterValidateBeforeCall(clustersAddExistingKubernetesInstanceClusterRequest, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesCluster>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddExistingKubernetesInstanceClusterRequestBuilder {
        private final String name;
        private final String platformKubernetesAttributesApiUrl;
        private final String platformKubernetesAttributesToken;
        private Boolean enabled;
        private String environmentScope;
        private Boolean namespacePerEnvironment;
        private String domain;
        private Integer managementProjectId;
        private Boolean managed;
        private String platformKubernetesAttributesCaCert;
        private String platformKubernetesAttributesNamespace;
        private String platformKubernetesAttributesAuthorizationType;

        private AddExistingKubernetesInstanceClusterRequestBuilder(String name, String platformKubernetesAttributesApiUrl, String platformKubernetesAttributesToken) {
            this.name = name;
            this.platformKubernetesAttributesApiUrl = platformKubernetesAttributesApiUrl;
            this.platformKubernetesAttributesToken = platformKubernetesAttributesToken;
        }

        /**
         * Set enabled
         * @param enabled Determines if cluster is active or not, defaults to true (optional, default to true)
         * @return AddExistingKubernetesInstanceClusterRequestBuilder
         */
        public AddExistingKubernetesInstanceClusterRequestBuilder enabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
        }
        
        /**
         * Set environmentScope
         * @param environmentScope The associated environment to the cluster (optional, default to *)
         * @return AddExistingKubernetesInstanceClusterRequestBuilder
         */
        public AddExistingKubernetesInstanceClusterRequestBuilder environmentScope(String environmentScope) {
            this.environmentScope = environmentScope;
            return this;
        }
        
        /**
         * Set namespacePerEnvironment
         * @param namespacePerEnvironment Deploy each environment to a separate Kubernetes namespace (optional, default to true)
         * @return AddExistingKubernetesInstanceClusterRequestBuilder
         */
        public AddExistingKubernetesInstanceClusterRequestBuilder namespacePerEnvironment(Boolean namespacePerEnvironment) {
            this.namespacePerEnvironment = namespacePerEnvironment;
            return this;
        }
        
        /**
         * Set domain
         * @param domain Cluster base domain (optional)
         * @return AddExistingKubernetesInstanceClusterRequestBuilder
         */
        public AddExistingKubernetesInstanceClusterRequestBuilder domain(String domain) {
            this.domain = domain;
            return this;
        }
        
        /**
         * Set managementProjectId
         * @param managementProjectId The ID of the management project (optional)
         * @return AddExistingKubernetesInstanceClusterRequestBuilder
         */
        public AddExistingKubernetesInstanceClusterRequestBuilder managementProjectId(Integer managementProjectId) {
            this.managementProjectId = managementProjectId;
            return this;
        }
        
        /**
         * Set managed
         * @param managed Determines if GitLab will manage namespaces and service accounts for this cluster, defaults to true (optional, default to true)
         * @return AddExistingKubernetesInstanceClusterRequestBuilder
         */
        public AddExistingKubernetesInstanceClusterRequestBuilder managed(Boolean managed) {
            this.managed = managed;
            return this;
        }
        
        /**
         * Set platformKubernetesAttributesCaCert
         * @param platformKubernetesAttributesCaCert TLS certificate (needed if API is using a self-signed TLS certificate) (optional)
         * @return AddExistingKubernetesInstanceClusterRequestBuilder
         */
        public AddExistingKubernetesInstanceClusterRequestBuilder platformKubernetesAttributesCaCert(String platformKubernetesAttributesCaCert) {
            this.platformKubernetesAttributesCaCert = platformKubernetesAttributesCaCert;
            return this;
        }
        
        /**
         * Set platformKubernetesAttributesNamespace
         * @param platformKubernetesAttributesNamespace Unique namespace related to Project (optional)
         * @return AddExistingKubernetesInstanceClusterRequestBuilder
         */
        public AddExistingKubernetesInstanceClusterRequestBuilder platformKubernetesAttributesNamespace(String platformKubernetesAttributesNamespace) {
            this.platformKubernetesAttributesNamespace = platformKubernetesAttributesNamespace;
            return this;
        }
        
        /**
         * Set platformKubernetesAttributesAuthorizationType
         * @param platformKubernetesAttributesAuthorizationType Cluster authorization type, defaults to RBAC (optional, default to rbac)
         * @return AddExistingKubernetesInstanceClusterRequestBuilder
         */
        public AddExistingKubernetesInstanceClusterRequestBuilder platformKubernetesAttributesAuthorizationType(String platformKubernetesAttributesAuthorizationType) {
            this.platformKubernetesAttributesAuthorizationType = platformKubernetesAttributesAuthorizationType;
            return this;
        }
        
        /**
         * Build call for addExistingKubernetesInstanceCluster
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Add existing instance cluster </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ClustersAddExistingKubernetesInstanceClusterRequest clustersAddExistingKubernetesInstanceClusterRequest = buildBodyParams();
            return addExistingKubernetesInstanceClusterCall(clustersAddExistingKubernetesInstanceClusterRequest, _callback);
        }

        private ClustersAddExistingKubernetesInstanceClusterRequest buildBodyParams() {
            ClustersAddExistingKubernetesInstanceClusterRequest clustersAddExistingKubernetesInstanceClusterRequest = new ClustersAddExistingKubernetesInstanceClusterRequest();
            clustersAddExistingKubernetesInstanceClusterRequest.name(this.name);
            clustersAddExistingKubernetesInstanceClusterRequest.enabled(this.enabled);
            clustersAddExistingKubernetesInstanceClusterRequest.environmentScope(this.environmentScope);
            clustersAddExistingKubernetesInstanceClusterRequest.namespacePerEnvironment(this.namespacePerEnvironment);
            clustersAddExistingKubernetesInstanceClusterRequest.domain(this.domain);
            clustersAddExistingKubernetesInstanceClusterRequest.managementProjectId(this.managementProjectId);
            clustersAddExistingKubernetesInstanceClusterRequest.managed(this.managed);
            clustersAddExistingKubernetesInstanceClusterRequest.platformKubernetesAttributesApiUrl(this.platformKubernetesAttributesApiUrl);
            clustersAddExistingKubernetesInstanceClusterRequest.platformKubernetesAttributesToken(this.platformKubernetesAttributesToken);
            clustersAddExistingKubernetesInstanceClusterRequest.platformKubernetesAttributesCaCert(this.platformKubernetesAttributesCaCert);
            clustersAddExistingKubernetesInstanceClusterRequest.platformKubernetesAttributesNamespace(this.platformKubernetesAttributesNamespace);
            if (this.platformKubernetesAttributesAuthorizationType != null)
            clustersAddExistingKubernetesInstanceClusterRequest.platformKubernetesAttributesAuthorizationType(ClustersAddExistingKubernetesInstanceClusterRequest.PlatformKubernetesAttributesAuthorizationTypeEnum.fromValue(this.platformKubernetesAttributesAuthorizationType));
            return clustersAddExistingKubernetesInstanceClusterRequest;
        }

        /**
         * Execute addExistingKubernetesInstanceCluster request
         * @return APIEntitiesCluster
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Add existing instance cluster </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesCluster execute() throws ApiException {
            ClustersAddExistingKubernetesInstanceClusterRequest clustersAddExistingKubernetesInstanceClusterRequest = buildBodyParams();
            ApiResponse<APIEntitiesCluster> localVarResp = addExistingKubernetesInstanceClusterWithHttpInfo(clustersAddExistingKubernetesInstanceClusterRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addExistingKubernetesInstanceCluster request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesCluster&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Add existing instance cluster </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesCluster> executeWithHttpInfo() throws ApiException {
            ClustersAddExistingKubernetesInstanceClusterRequest clustersAddExistingKubernetesInstanceClusterRequest = buildBodyParams();
            return addExistingKubernetesInstanceClusterWithHttpInfo(clustersAddExistingKubernetesInstanceClusterRequest);
        }

        /**
         * Execute addExistingKubernetesInstanceCluster request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Add existing instance cluster </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesCluster> _callback) throws ApiException {
            ClustersAddExistingKubernetesInstanceClusterRequest clustersAddExistingKubernetesInstanceClusterRequest = buildBodyParams();
            return addExistingKubernetesInstanceClusterAsync(clustersAddExistingKubernetesInstanceClusterRequest, _callback);
        }
    }

    /**
     * Add existing instance cluster
     * This feature was introduced in GitLab 13.2. Adds an existing Kubernetes instance cluster.
     * @param clustersAddExistingKubernetesInstanceClusterRequest  (required)
     * @return AddExistingKubernetesInstanceClusterRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add existing instance cluster </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public AddExistingKubernetesInstanceClusterRequestBuilder addExistingKubernetesInstanceCluster(String name, String platformKubernetesAttributesApiUrl, String platformKubernetesAttributesToken) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (platformKubernetesAttributesApiUrl == null) throw new IllegalArgumentException("\"platformKubernetesAttributesApiUrl\" is required but got null");
            

        if (platformKubernetesAttributesToken == null) throw new IllegalArgumentException("\"platformKubernetesAttributesToken\" is required but got null");
            

        return new AddExistingKubernetesInstanceClusterRequestBuilder(name, platformKubernetesAttributesApiUrl, platformKubernetesAttributesToken);
    }
    private okhttp3.Call deleteInstanceClusterCall(Integer clusterId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/admin/clusters/{cluster_id}"
            .replace("{" + "cluster_id" + "}", localVarApiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteInstanceClusterValidateBeforeCall(Integer clusterId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling deleteInstanceCluster(Async)");
        }

        return deleteInstanceClusterCall(clusterId, _callback);

    }


    private ApiResponse<APIEntitiesCluster> deleteInstanceClusterWithHttpInfo(Integer clusterId) throws ApiException {
        okhttp3.Call localVarCall = deleteInstanceClusterValidateBeforeCall(clusterId, null);
        Type localVarReturnType = new TypeToken<APIEntitiesCluster>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteInstanceClusterAsync(Integer clusterId, final ApiCallback<APIEntitiesCluster> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteInstanceClusterValidateBeforeCall(clusterId, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesCluster>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteInstanceClusterRequestBuilder {
        private final Integer clusterId;

        private DeleteInstanceClusterRequestBuilder(Integer clusterId) {
            this.clusterId = clusterId;
        }

        /**
         * Build call for deleteInstanceCluster
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Delete instance cluster </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteInstanceClusterCall(clusterId, _callback);
        }


        /**
         * Execute deleteInstanceCluster request
         * @return APIEntitiesCluster
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Delete instance cluster </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesCluster execute() throws ApiException {
            ApiResponse<APIEntitiesCluster> localVarResp = deleteInstanceClusterWithHttpInfo(clusterId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteInstanceCluster request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesCluster&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Delete instance cluster </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesCluster> executeWithHttpInfo() throws ApiException {
            return deleteInstanceClusterWithHttpInfo(clusterId);
        }

        /**
         * Execute deleteInstanceCluster request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Delete instance cluster </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesCluster> _callback) throws ApiException {
            return deleteInstanceClusterAsync(clusterId, _callback);
        }
    }

    /**
     * Delete instance cluster
     * This feature was introduced in GitLab 13.2. Deletes an existing instance cluster. Does not remove existing resources within the connected Kubernetes cluster.
     * @param clusterId The cluster ID (required)
     * @return DeleteInstanceClusterRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete instance cluster </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public DeleteInstanceClusterRequestBuilder deleteInstanceCluster(Integer clusterId) throws IllegalArgumentException {
        if (clusterId == null) throw new IllegalArgumentException("\"clusterId\" is required but got null");
        return new DeleteInstanceClusterRequestBuilder(clusterId);
    }
    private okhttp3.Call getSingleInstanceClusterCall(Integer clusterId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/admin/clusters/{cluster_id}"
            .replace("{" + "cluster_id" + "}", localVarApiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleInstanceClusterValidateBeforeCall(Integer clusterId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling getSingleInstanceCluster(Async)");
        }

        return getSingleInstanceClusterCall(clusterId, _callback);

    }


    private ApiResponse<APIEntitiesCluster> getSingleInstanceClusterWithHttpInfo(Integer clusterId) throws ApiException {
        okhttp3.Call localVarCall = getSingleInstanceClusterValidateBeforeCall(clusterId, null);
        Type localVarReturnType = new TypeToken<APIEntitiesCluster>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleInstanceClusterAsync(Integer clusterId, final ApiCallback<APIEntitiesCluster> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleInstanceClusterValidateBeforeCall(clusterId, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesCluster>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleInstanceClusterRequestBuilder {
        private final Integer clusterId;

        private GetSingleInstanceClusterRequestBuilder(Integer clusterId) {
            this.clusterId = clusterId;
        }

        /**
         * Build call for getSingleInstanceCluster
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get a single instance cluster </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleInstanceClusterCall(clusterId, _callback);
        }


        /**
         * Execute getSingleInstanceCluster request
         * @return APIEntitiesCluster
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get a single instance cluster </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesCluster execute() throws ApiException {
            ApiResponse<APIEntitiesCluster> localVarResp = getSingleInstanceClusterWithHttpInfo(clusterId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleInstanceCluster request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesCluster&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get a single instance cluster </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesCluster> executeWithHttpInfo() throws ApiException {
            return getSingleInstanceClusterWithHttpInfo(clusterId);
        }

        /**
         * Execute getSingleInstanceCluster request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get a single instance cluster </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesCluster> _callback) throws ApiException {
            return getSingleInstanceClusterAsync(clusterId, _callback);
        }
    }

    /**
     * Get a single instance cluster
     * This feature was introduced in GitLab 13.2. Returns a single instance cluster.
     * @param clusterId The cluster ID (required)
     * @return GetSingleInstanceClusterRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single instance cluster </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleInstanceClusterRequestBuilder getSingleInstanceCluster(Integer clusterId) throws IllegalArgumentException {
        if (clusterId == null) throw new IllegalArgumentException("\"clusterId\" is required but got null");
        return new GetSingleInstanceClusterRequestBuilder(clusterId);
    }
    private okhttp3.Call listInstanceClustersCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/admin/clusters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInstanceClustersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listInstanceClustersCall(_callback);

    }


    private ApiResponse<List<APIEntitiesCluster>> listInstanceClustersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listInstanceClustersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<APIEntitiesCluster>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listInstanceClustersAsync(final ApiCallback<List<APIEntitiesCluster>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInstanceClustersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<APIEntitiesCluster>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListInstanceClustersRequestBuilder {

        private ListInstanceClustersRequestBuilder() {
        }

        /**
         * Build call for listInstanceClusters
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List instance clusters </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listInstanceClustersCall(_callback);
        }


        /**
         * Execute listInstanceClusters request
         * @return List&lt;APIEntitiesCluster&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List instance clusters </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public List<APIEntitiesCluster> execute() throws ApiException {
            ApiResponse<List<APIEntitiesCluster>> localVarResp = listInstanceClustersWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listInstanceClusters request with HTTP info returned
         * @return ApiResponse&lt;List&lt;APIEntitiesCluster&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List instance clusters </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<APIEntitiesCluster>> executeWithHttpInfo() throws ApiException {
            return listInstanceClustersWithHttpInfo();
        }

        /**
         * Execute listInstanceClusters request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List instance clusters </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<APIEntitiesCluster>> _callback) throws ApiException {
            return listInstanceClustersAsync(_callback);
        }
    }

    /**
     * List instance clusters
     * This feature was introduced in GitLab 13.2. Returns a list of instance clusters.
     * @return ListInstanceClustersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List instance clusters </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ListInstanceClustersRequestBuilder listInstanceClusters() throws IllegalArgumentException {
        return new ListInstanceClustersRequestBuilder();
    }
    private okhttp3.Call updateInstanceClusterCall(Integer clusterId, ClustersUpdateInstanceClusterRequest clustersUpdateInstanceClusterRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = clustersUpdateInstanceClusterRequest;

        // create path and map variables
        String localVarPath = "/api/v4/admin/clusters/{cluster_id}"
            .replace("{" + "cluster_id" + "}", localVarApiClient.escapeString(clusterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInstanceClusterValidateBeforeCall(Integer clusterId, ClustersUpdateInstanceClusterRequest clustersUpdateInstanceClusterRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling updateInstanceCluster(Async)");
        }

        return updateInstanceClusterCall(clusterId, clustersUpdateInstanceClusterRequest, _callback);

    }


    private ApiResponse<APIEntitiesCluster> updateInstanceClusterWithHttpInfo(Integer clusterId, ClustersUpdateInstanceClusterRequest clustersUpdateInstanceClusterRequest) throws ApiException {
        okhttp3.Call localVarCall = updateInstanceClusterValidateBeforeCall(clusterId, clustersUpdateInstanceClusterRequest, null);
        Type localVarReturnType = new TypeToken<APIEntitiesCluster>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateInstanceClusterAsync(Integer clusterId, ClustersUpdateInstanceClusterRequest clustersUpdateInstanceClusterRequest, final ApiCallback<APIEntitiesCluster> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateInstanceClusterValidateBeforeCall(clusterId, clustersUpdateInstanceClusterRequest, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesCluster>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateInstanceClusterRequestBuilder {
        private final Integer clusterId;
        private String name;
        private Boolean enabled;
        private String environmentScope;
        private Boolean namespacePerEnvironment;
        private String domain;
        private Integer managementProjectId;
        private Boolean managed;
        private String platformKubernetesAttributesApiUrl;
        private String platformKubernetesAttributesToken;
        private String platformKubernetesAttributesCaCert;
        private String platformKubernetesAttributesNamespace;

        private UpdateInstanceClusterRequestBuilder(Integer clusterId) {
            this.clusterId = clusterId;
        }

        /**
         * Set name
         * @param name Cluster name (optional)
         * @return UpdateInstanceClusterRequestBuilder
         */
        public UpdateInstanceClusterRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set enabled
         * @param enabled Enable or disable Gitlab&#39;s connection to your Kubernetes cluster (optional)
         * @return UpdateInstanceClusterRequestBuilder
         */
        public UpdateInstanceClusterRequestBuilder enabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
        }
        
        /**
         * Set environmentScope
         * @param environmentScope The associated environment to the cluster (optional)
         * @return UpdateInstanceClusterRequestBuilder
         */
        public UpdateInstanceClusterRequestBuilder environmentScope(String environmentScope) {
            this.environmentScope = environmentScope;
            return this;
        }
        
        /**
         * Set namespacePerEnvironment
         * @param namespacePerEnvironment Deploy each environment to a separate Kubernetes namespace (optional, default to true)
         * @return UpdateInstanceClusterRequestBuilder
         */
        public UpdateInstanceClusterRequestBuilder namespacePerEnvironment(Boolean namespacePerEnvironment) {
            this.namespacePerEnvironment = namespacePerEnvironment;
            return this;
        }
        
        /**
         * Set domain
         * @param domain Cluster base domain (optional)
         * @return UpdateInstanceClusterRequestBuilder
         */
        public UpdateInstanceClusterRequestBuilder domain(String domain) {
            this.domain = domain;
            return this;
        }
        
        /**
         * Set managementProjectId
         * @param managementProjectId The ID of the management project (optional)
         * @return UpdateInstanceClusterRequestBuilder
         */
        public UpdateInstanceClusterRequestBuilder managementProjectId(Integer managementProjectId) {
            this.managementProjectId = managementProjectId;
            return this;
        }
        
        /**
         * Set managed
         * @param managed Determines if GitLab will manage namespaces and service accounts for this cluster (optional)
         * @return UpdateInstanceClusterRequestBuilder
         */
        public UpdateInstanceClusterRequestBuilder managed(Boolean managed) {
            this.managed = managed;
            return this;
        }
        
        /**
         * Set platformKubernetesAttributesApiUrl
         * @param platformKubernetesAttributesApiUrl URL to access the Kubernetes API (optional)
         * @return UpdateInstanceClusterRequestBuilder
         */
        public UpdateInstanceClusterRequestBuilder platformKubernetesAttributesApiUrl(String platformKubernetesAttributesApiUrl) {
            this.platformKubernetesAttributesApiUrl = platformKubernetesAttributesApiUrl;
            return this;
        }
        
        /**
         * Set platformKubernetesAttributesToken
         * @param platformKubernetesAttributesToken Token to authenticate against Kubernetes (optional)
         * @return UpdateInstanceClusterRequestBuilder
         */
        public UpdateInstanceClusterRequestBuilder platformKubernetesAttributesToken(String platformKubernetesAttributesToken) {
            this.platformKubernetesAttributesToken = platformKubernetesAttributesToken;
            return this;
        }
        
        /**
         * Set platformKubernetesAttributesCaCert
         * @param platformKubernetesAttributesCaCert TLS certificate (needed if API is using a self-signed TLS certificate) (optional)
         * @return UpdateInstanceClusterRequestBuilder
         */
        public UpdateInstanceClusterRequestBuilder platformKubernetesAttributesCaCert(String platformKubernetesAttributesCaCert) {
            this.platformKubernetesAttributesCaCert = platformKubernetesAttributesCaCert;
            return this;
        }
        
        /**
         * Set platformKubernetesAttributesNamespace
         * @param platformKubernetesAttributesNamespace Unique namespace related to Project (optional)
         * @return UpdateInstanceClusterRequestBuilder
         */
        public UpdateInstanceClusterRequestBuilder platformKubernetesAttributesNamespace(String platformKubernetesAttributesNamespace) {
            this.platformKubernetesAttributesNamespace = platformKubernetesAttributesNamespace;
            return this;
        }
        
        /**
         * Build call for updateInstanceCluster
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Edit instance cluster </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ClustersUpdateInstanceClusterRequest clustersUpdateInstanceClusterRequest = buildBodyParams();
            return updateInstanceClusterCall(clusterId, clustersUpdateInstanceClusterRequest, _callback);
        }

        private ClustersUpdateInstanceClusterRequest buildBodyParams() {
            ClustersUpdateInstanceClusterRequest clustersUpdateInstanceClusterRequest = new ClustersUpdateInstanceClusterRequest();
            clustersUpdateInstanceClusterRequest.name(this.name);
            clustersUpdateInstanceClusterRequest.enabled(this.enabled);
            clustersUpdateInstanceClusterRequest.environmentScope(this.environmentScope);
            clustersUpdateInstanceClusterRequest.namespacePerEnvironment(this.namespacePerEnvironment);
            clustersUpdateInstanceClusterRequest.domain(this.domain);
            clustersUpdateInstanceClusterRequest.managementProjectId(this.managementProjectId);
            clustersUpdateInstanceClusterRequest.managed(this.managed);
            clustersUpdateInstanceClusterRequest.platformKubernetesAttributesApiUrl(this.platformKubernetesAttributesApiUrl);
            clustersUpdateInstanceClusterRequest.platformKubernetesAttributesToken(this.platformKubernetesAttributesToken);
            clustersUpdateInstanceClusterRequest.platformKubernetesAttributesCaCert(this.platformKubernetesAttributesCaCert);
            clustersUpdateInstanceClusterRequest.platformKubernetesAttributesNamespace(this.platformKubernetesAttributesNamespace);
            return clustersUpdateInstanceClusterRequest;
        }

        /**
         * Execute updateInstanceCluster request
         * @return APIEntitiesCluster
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Edit instance cluster </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesCluster execute() throws ApiException {
            ClustersUpdateInstanceClusterRequest clustersUpdateInstanceClusterRequest = buildBodyParams();
            ApiResponse<APIEntitiesCluster> localVarResp = updateInstanceClusterWithHttpInfo(clusterId, clustersUpdateInstanceClusterRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateInstanceCluster request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesCluster&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Edit instance cluster </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesCluster> executeWithHttpInfo() throws ApiException {
            ClustersUpdateInstanceClusterRequest clustersUpdateInstanceClusterRequest = buildBodyParams();
            return updateInstanceClusterWithHttpInfo(clusterId, clustersUpdateInstanceClusterRequest);
        }

        /**
         * Execute updateInstanceCluster request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Edit instance cluster </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Validation error </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesCluster> _callback) throws ApiException {
            ClustersUpdateInstanceClusterRequest clustersUpdateInstanceClusterRequest = buildBodyParams();
            return updateInstanceClusterAsync(clusterId, clustersUpdateInstanceClusterRequest, _callback);
        }
    }

    /**
     * Edit instance cluster
     * This feature was introduced in GitLab 13.2. Updates an existing instance cluster.
     * @param clusterId The cluster ID (required)
     * @return UpdateInstanceClusterRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Edit instance cluster </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateInstanceClusterRequestBuilder updateInstanceCluster(Integer clusterId) throws IllegalArgumentException {
        if (clusterId == null) throw new IllegalArgumentException("\"clusterId\" is required but got null");
        return new UpdateInstanceClusterRequestBuilder(clusterId);
    }
}
