/*
 * GitLab API
 * An OpenAPI definition for the GitLab REST API. Few API resources or endpoints are currently included. The intent is to expand this to match the entire Markdown documentation of the API: <https://docs.gitlab.com/ee/api/>. Contributions are welcome.  When viewing this on gitlab.com, you can test API calls directly from the browser against the `gitlab.com` instance, if you are logged in. The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie), so each request is made using your account.  Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html) 
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.APIEntitiesAppearance;
import com.konfigthis.client.model.ApplicationModifyAppearanceRequest;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ApplicationApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApplicationApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ApplicationApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKeyAuth() == null) {
            throw new IllegalArgumentException("\"Private-Token\" is required but no API key was provided. Please set \"Private-Token\" with ApiClient#setApiKeyAuth(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getCurrentAppearanceCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/application/appearance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrentAppearanceValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getCurrentAppearanceCall(_callback);

    }


    private ApiResponse<APIEntitiesAppearance> getCurrentAppearanceWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCurrentAppearanceValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<APIEntitiesAppearance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCurrentAppearanceAsync(final ApiCallback<APIEntitiesAppearance> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrentAppearanceValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<APIEntitiesAppearance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCurrentAppearanceRequestBuilder {

        private GetCurrentAppearanceRequestBuilder() {
        }

        /**
         * Build call for getCurrentAppearance
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get the current appearance </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCurrentAppearanceCall(_callback);
        }


        /**
         * Execute getCurrentAppearance request
         * @return APIEntitiesAppearance
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get the current appearance </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesAppearance execute() throws ApiException {
            ApiResponse<APIEntitiesAppearance> localVarResp = getCurrentAppearanceWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCurrentAppearance request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesAppearance&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get the current appearance </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesAppearance> executeWithHttpInfo() throws ApiException {
            return getCurrentAppearanceWithHttpInfo();
        }

        /**
         * Execute getCurrentAppearance request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get the current appearance </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesAppearance> _callback) throws ApiException {
            return getCurrentAppearanceAsync(_callback);
        }
    }

    /**
     * 
     * Get the current appearance
     * @return GetCurrentAppearanceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the current appearance </td><td>  -  </td></tr>
     </table>
     */
    public GetCurrentAppearanceRequestBuilder getCurrentAppearance() throws IllegalArgumentException {
        return new GetCurrentAppearanceRequestBuilder();
    }
    private okhttp3.Call modifyAppearanceCall(String title, String description, String pwaName, String pwaShortName, String pwaDescription, File logo, File pwaIcon, File headerLogo, File favicon, String newProjectGuidelines, String profileImageGuidelines, String headerMessage, String footerMessage, String messageBackgroundColor, String messageFontColor, Boolean emailHeaderAndFooterEnabled, ApplicationModifyAppearanceRequest applicationModifyAppearanceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicationModifyAppearanceRequest;

        // create path and map variables
        String localVarPath = "/api/v4/application/appearance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (title != null) {
            localVarFormParams.put("title", title);
        }

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (pwaName != null) {
            localVarFormParams.put("pwa_name", pwaName);
        }

        if (pwaShortName != null) {
            localVarFormParams.put("pwa_short_name", pwaShortName);
        }

        if (pwaDescription != null) {
            localVarFormParams.put("pwa_description", pwaDescription);
        }

        if (logo != null) {
            localVarFormParams.put("logo", logo);
        }

        if (pwaIcon != null) {
            localVarFormParams.put("pwa_icon", pwaIcon);
        }

        if (headerLogo != null) {
            localVarFormParams.put("header_logo", headerLogo);
        }

        if (favicon != null) {
            localVarFormParams.put("favicon", favicon);
        }

        if (newProjectGuidelines != null) {
            localVarFormParams.put("new_project_guidelines", newProjectGuidelines);
        }

        if (profileImageGuidelines != null) {
            localVarFormParams.put("profile_image_guidelines", profileImageGuidelines);
        }

        if (headerMessage != null) {
            localVarFormParams.put("header_message", headerMessage);
        }

        if (footerMessage != null) {
            localVarFormParams.put("footer_message", footerMessage);
        }

        if (messageBackgroundColor != null) {
            localVarFormParams.put("message_background_color", messageBackgroundColor);
        }

        if (messageFontColor != null) {
            localVarFormParams.put("message_font_color", messageFontColor);
        }

        if (emailHeaderAndFooterEnabled != null) {
            localVarFormParams.put("email_header_and_footer_enabled", emailHeaderAndFooterEnabled);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyAppearanceValidateBeforeCall(String title, String description, String pwaName, String pwaShortName, String pwaDescription, File logo, File pwaIcon, File headerLogo, File favicon, String newProjectGuidelines, String profileImageGuidelines, String headerMessage, String footerMessage, String messageBackgroundColor, String messageFontColor, Boolean emailHeaderAndFooterEnabled, ApplicationModifyAppearanceRequest applicationModifyAppearanceRequest, final ApiCallback _callback) throws ApiException {
        return modifyAppearanceCall(title, description, pwaName, pwaShortName, pwaDescription, logo, pwaIcon, headerLogo, favicon, newProjectGuidelines, profileImageGuidelines, headerMessage, footerMessage, messageBackgroundColor, messageFontColor, emailHeaderAndFooterEnabled, applicationModifyAppearanceRequest, _callback);

    }


    private ApiResponse<APIEntitiesAppearance> modifyAppearanceWithHttpInfo(String title, String description, String pwaName, String pwaShortName, String pwaDescription, File logo, File pwaIcon, File headerLogo, File favicon, String newProjectGuidelines, String profileImageGuidelines, String headerMessage, String footerMessage, String messageBackgroundColor, String messageFontColor, Boolean emailHeaderAndFooterEnabled, ApplicationModifyAppearanceRequest applicationModifyAppearanceRequest) throws ApiException {
        okhttp3.Call localVarCall = modifyAppearanceValidateBeforeCall(title, description, pwaName, pwaShortName, pwaDescription, logo, pwaIcon, headerLogo, favicon, newProjectGuidelines, profileImageGuidelines, headerMessage, footerMessage, messageBackgroundColor, messageFontColor, emailHeaderAndFooterEnabled, applicationModifyAppearanceRequest, null);
        Type localVarReturnType = new TypeToken<APIEntitiesAppearance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call modifyAppearanceAsync(String title, String description, String pwaName, String pwaShortName, String pwaDescription, File logo, File pwaIcon, File headerLogo, File favicon, String newProjectGuidelines, String profileImageGuidelines, String headerMessage, String footerMessage, String messageBackgroundColor, String messageFontColor, Boolean emailHeaderAndFooterEnabled, ApplicationModifyAppearanceRequest applicationModifyAppearanceRequest, final ApiCallback<APIEntitiesAppearance> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyAppearanceValidateBeforeCall(title, description, pwaName, pwaShortName, pwaDescription, logo, pwaIcon, headerLogo, favicon, newProjectGuidelines, profileImageGuidelines, headerMessage, footerMessage, messageBackgroundColor, messageFontColor, emailHeaderAndFooterEnabled, applicationModifyAppearanceRequest, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesAppearance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ModifyAppearanceRequestBuilder {
        private String title;
        private String description;
        private String pwaName;
        private String pwaShortName;
        private String pwaDescription;
        private File logo;
        private File pwaIcon;
        private File headerLogo;
        private File favicon;
        private String newProjectGuidelines;
        private String profileImageGuidelines;
        private String headerMessage;
        private String footerMessage;
        private String messageBackgroundColor;
        private String messageFontColor;
        private Boolean emailHeaderAndFooterEnabled;

        private ModifyAppearanceRequestBuilder() {
        }

        /**
         * Set title
         * @param title Instance title on the sign in / sign up page (optional)
         * @return ModifyAppearanceRequestBuilder
         */
        public ModifyAppearanceRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set description
         * @param description Markdown text shown on the sign in / sign up page (optional)
         * @return ModifyAppearanceRequestBuilder
         */
        public ModifyAppearanceRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set pwaName
         * @param pwaName Name of the Progressive Web App (optional)
         * @return ModifyAppearanceRequestBuilder
         */
        public ModifyAppearanceRequestBuilder pwaName(String pwaName) {
            this.pwaName = pwaName;
            return this;
        }
        
        /**
         * Set pwaShortName
         * @param pwaShortName Optional, short name for Progressive Web App (optional)
         * @return ModifyAppearanceRequestBuilder
         */
        public ModifyAppearanceRequestBuilder pwaShortName(String pwaShortName) {
            this.pwaShortName = pwaShortName;
            return this;
        }
        
        /**
         * Set pwaDescription
         * @param pwaDescription An explanation of what the Progressive Web App does (optional)
         * @return ModifyAppearanceRequestBuilder
         */
        public ModifyAppearanceRequestBuilder pwaDescription(String pwaDescription) {
            this.pwaDescription = pwaDescription;
            return this;
        }
        
        /**
         * Set logo
         * @param logo Instance image used on the sign in / sign up page (optional)
         * @return ModifyAppearanceRequestBuilder
         */
        public ModifyAppearanceRequestBuilder logo(File logo) {
            this.logo = logo;
            return this;
        }
        
        /**
         * Set pwaIcon
         * @param pwaIcon Icon used for Progressive Web App (optional)
         * @return ModifyAppearanceRequestBuilder
         */
        public ModifyAppearanceRequestBuilder pwaIcon(File pwaIcon) {
            this.pwaIcon = pwaIcon;
            return this;
        }
        
        /**
         * Set headerLogo
         * @param headerLogo Instance image used for the main navigation bar (optional)
         * @return ModifyAppearanceRequestBuilder
         */
        public ModifyAppearanceRequestBuilder headerLogo(File headerLogo) {
            this.headerLogo = headerLogo;
            return this;
        }
        
        /**
         * Set favicon
         * @param favicon Instance favicon in .ico/.png format (optional)
         * @return ModifyAppearanceRequestBuilder
         */
        public ModifyAppearanceRequestBuilder favicon(File favicon) {
            this.favicon = favicon;
            return this;
        }
        
        /**
         * Set newProjectGuidelines
         * @param newProjectGuidelines Markdown text shown on the new project page (optional)
         * @return ModifyAppearanceRequestBuilder
         */
        public ModifyAppearanceRequestBuilder newProjectGuidelines(String newProjectGuidelines) {
            this.newProjectGuidelines = newProjectGuidelines;
            return this;
        }
        
        /**
         * Set profileImageGuidelines
         * @param profileImageGuidelines Markdown text shown on the profile page below Public Avatar (optional)
         * @return ModifyAppearanceRequestBuilder
         */
        public ModifyAppearanceRequestBuilder profileImageGuidelines(String profileImageGuidelines) {
            this.profileImageGuidelines = profileImageGuidelines;
            return this;
        }
        
        /**
         * Set headerMessage
         * @param headerMessage Message within the system header bar (optional)
         * @return ModifyAppearanceRequestBuilder
         */
        public ModifyAppearanceRequestBuilder headerMessage(String headerMessage) {
            this.headerMessage = headerMessage;
            return this;
        }
        
        /**
         * Set footerMessage
         * @param footerMessage Message within the system footer bar (optional)
         * @return ModifyAppearanceRequestBuilder
         */
        public ModifyAppearanceRequestBuilder footerMessage(String footerMessage) {
            this.footerMessage = footerMessage;
            return this;
        }
        
        /**
         * Set messageBackgroundColor
         * @param messageBackgroundColor Background color for the system header / footer bar (optional)
         * @return ModifyAppearanceRequestBuilder
         */
        public ModifyAppearanceRequestBuilder messageBackgroundColor(String messageBackgroundColor) {
            this.messageBackgroundColor = messageBackgroundColor;
            return this;
        }
        
        /**
         * Set messageFontColor
         * @param messageFontColor Font color for the system header / footer bar (optional)
         * @return ModifyAppearanceRequestBuilder
         */
        public ModifyAppearanceRequestBuilder messageFontColor(String messageFontColor) {
            this.messageFontColor = messageFontColor;
            return this;
        }
        
        /**
         * Set emailHeaderAndFooterEnabled
         * @param emailHeaderAndFooterEnabled Add header and footer to all outgoing emails if enabled (optional)
         * @return ModifyAppearanceRequestBuilder
         */
        public ModifyAppearanceRequestBuilder emailHeaderAndFooterEnabled(Boolean emailHeaderAndFooterEnabled) {
            this.emailHeaderAndFooterEnabled = emailHeaderAndFooterEnabled;
            return this;
        }
        
        /**
         * Build call for modifyAppearance
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Modify appearance </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicationModifyAppearanceRequest applicationModifyAppearanceRequest = buildBodyParams();
            return modifyAppearanceCall(title, description, pwaName, pwaShortName, pwaDescription, logo, pwaIcon, headerLogo, favicon, newProjectGuidelines, profileImageGuidelines, headerMessage, footerMessage, messageBackgroundColor, messageFontColor, emailHeaderAndFooterEnabled, applicationModifyAppearanceRequest, _callback);
        }

        private ApplicationModifyAppearanceRequest buildBodyParams() {
            ApplicationModifyAppearanceRequest applicationModifyAppearanceRequest = new ApplicationModifyAppearanceRequest();
            applicationModifyAppearanceRequest.title(this.title);
            applicationModifyAppearanceRequest.description(this.description);
            applicationModifyAppearanceRequest.pwaName(this.pwaName);
            applicationModifyAppearanceRequest.pwaShortName(this.pwaShortName);
            applicationModifyAppearanceRequest.pwaDescription(this.pwaDescription);
            applicationModifyAppearanceRequest.logo(this.logo);
            applicationModifyAppearanceRequest.pwaIcon(this.pwaIcon);
            applicationModifyAppearanceRequest.headerLogo(this.headerLogo);
            applicationModifyAppearanceRequest.favicon(this.favicon);
            applicationModifyAppearanceRequest.newProjectGuidelines(this.newProjectGuidelines);
            applicationModifyAppearanceRequest.profileImageGuidelines(this.profileImageGuidelines);
            applicationModifyAppearanceRequest.headerMessage(this.headerMessage);
            applicationModifyAppearanceRequest.footerMessage(this.footerMessage);
            applicationModifyAppearanceRequest.messageBackgroundColor(this.messageBackgroundColor);
            applicationModifyAppearanceRequest.messageFontColor(this.messageFontColor);
            applicationModifyAppearanceRequest.emailHeaderAndFooterEnabled(this.emailHeaderAndFooterEnabled);
            return applicationModifyAppearanceRequest;
        }

        /**
         * Execute modifyAppearance request
         * @return APIEntitiesAppearance
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Modify appearance </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesAppearance execute() throws ApiException {
            ApplicationModifyAppearanceRequest applicationModifyAppearanceRequest = buildBodyParams();
            ApiResponse<APIEntitiesAppearance> localVarResp = modifyAppearanceWithHttpInfo(title, description, pwaName, pwaShortName, pwaDescription, logo, pwaIcon, headerLogo, favicon, newProjectGuidelines, profileImageGuidelines, headerMessage, footerMessage, messageBackgroundColor, messageFontColor, emailHeaderAndFooterEnabled, applicationModifyAppearanceRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute modifyAppearance request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesAppearance&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Modify appearance </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesAppearance> executeWithHttpInfo() throws ApiException {
            ApplicationModifyAppearanceRequest applicationModifyAppearanceRequest = buildBodyParams();
            return modifyAppearanceWithHttpInfo(title, description, pwaName, pwaShortName, pwaDescription, logo, pwaIcon, headerLogo, favicon, newProjectGuidelines, profileImageGuidelines, headerMessage, footerMessage, messageBackgroundColor, messageFontColor, emailHeaderAndFooterEnabled, applicationModifyAppearanceRequest);
        }

        /**
         * Execute modifyAppearance request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Modify appearance </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesAppearance> _callback) throws ApiException {
            ApplicationModifyAppearanceRequest applicationModifyAppearanceRequest = buildBodyParams();
            return modifyAppearanceAsync(title, description, pwaName, pwaShortName, pwaDescription, logo, pwaIcon, headerLogo, favicon, newProjectGuidelines, profileImageGuidelines, headerMessage, footerMessage, messageBackgroundColor, messageFontColor, emailHeaderAndFooterEnabled, applicationModifyAppearanceRequest, _callback);
        }
    }

    /**
     * 
     * Modify appearance
     * @return ModifyAppearanceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Modify appearance </td><td>  -  </td></tr>
     </table>
     */
    public ModifyAppearanceRequestBuilder modifyAppearance() throws IllegalArgumentException {
        return new ModifyAppearanceRequestBuilder();
    }
}
