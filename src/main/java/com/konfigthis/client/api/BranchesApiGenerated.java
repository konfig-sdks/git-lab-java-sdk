/*
 * GitLab API
 * An OpenAPI definition for the GitLab REST API. Few API resources or endpoints are currently included. The intent is to expand this to match the entire Markdown documentation of the API: <https://docs.gitlab.com/ee/api/>. Contributions are welcome.  When viewing this on gitlab.com, you can test API calls directly from the browser against the `gitlab.com` instance, if you are logged in. The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie), so each request is made using your account.  Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html) 
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.APIEntitiesBranch;
import com.konfigthis.client.model.BranchesProtectBranchRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BranchesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BranchesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public BranchesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKeyAuth() == null) {
            throw new IllegalArgumentException("\"Private-Token\" is required but no API key was provided. Please set \"Private-Token\" with ApiClient#setApiKeyAuth(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call checkIfExistsCall(String id, String branch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/projects/{id}/repository/branches/{branch}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkIfExistsValidateBeforeCall(String id, String branch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling checkIfExists(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling checkIfExists(Async)");
        }

        return checkIfExistsCall(id, branch, _callback);

    }


    private ApiResponse<Void> checkIfExistsWithHttpInfo(String id, String branch) throws ApiException {
        okhttp3.Call localVarCall = checkIfExistsValidateBeforeCall(id, branch, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call checkIfExistsAsync(String id, String branch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkIfExistsValidateBeforeCall(id, branch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CheckIfExistsRequestBuilder {
        private final String id;
        private final String branch;

        private CheckIfExistsRequestBuilder(String id, String branch) {
            this.id = id;
            this.branch = branch;
        }

        /**
         * Build call for checkIfExists
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkIfExistsCall(id, branch, _callback);
        }


        /**
         * Execute checkIfExists request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            checkIfExistsWithHttpInfo(id, branch);
        }

        /**
         * Execute checkIfExists request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return checkIfExistsWithHttpInfo(id, branch);
        }

        /**
         * Execute checkIfExists request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return checkIfExistsAsync(id, branch, _callback);
        }
    }

    /**
     * 
     * Check if a branch exists
     * @param id The ID or URL-encoded path of the project (required)
     * @param branch The name of the branch (required)
     * @return CheckIfExistsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public CheckIfExistsRequestBuilder checkIfExists(String id, String branch) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (branch == null) throw new IllegalArgumentException("\"branch\" is required but got null");
            

        return new CheckIfExistsRequestBuilder(id, branch);
    }
    private okhttp3.Call createBranchCall(String id, String branch, String ref, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/projects/{id}/repository/branches"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (branch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branch", branch));
        }

        if (ref != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ref", ref));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBranchValidateBeforeCall(String id, String branch, String ref, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createBranch(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling createBranch(Async)");
        }

        // verify the required parameter 'ref' is set
        if (ref == null) {
            throw new ApiException("Missing the required parameter 'ref' when calling createBranch(Async)");
        }

        return createBranchCall(id, branch, ref, _callback);

    }


    private ApiResponse<APIEntitiesBranch> createBranchWithHttpInfo(String id, String branch, String ref) throws ApiException {
        okhttp3.Call localVarCall = createBranchValidateBeforeCall(id, branch, ref, null);
        Type localVarReturnType = new TypeToken<APIEntitiesBranch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createBranchAsync(String id, String branch, String ref, final ApiCallback<APIEntitiesBranch> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBranchValidateBeforeCall(id, branch, ref, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesBranch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateBranchRequestBuilder {
        private final String id;
        private final String branch;
        private final String ref;

        private CreateBranchRequestBuilder(String id, String branch, String ref) {
            this.id = id;
            this.branch = branch;
            this.ref = ref;
        }

        /**
         * Build call for createBranch
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create branch </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Failed to create branch </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createBranchCall(id, branch, ref, _callback);
        }


        /**
         * Execute createBranch request
         * @return APIEntitiesBranch
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create branch </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Failed to create branch </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesBranch execute() throws ApiException {
            ApiResponse<APIEntitiesBranch> localVarResp = createBranchWithHttpInfo(id, branch, ref);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createBranch request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesBranch&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create branch </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Failed to create branch </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesBranch> executeWithHttpInfo() throws ApiException {
            return createBranchWithHttpInfo(id, branch, ref);
        }

        /**
         * Execute createBranch request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create branch </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Failed to create branch </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesBranch> _callback) throws ApiException {
            return createBranchAsync(id, branch, ref, _callback);
        }
    }

    /**
     * 
     * Create branch
     * @param id The ID or URL-encoded path of the project (required)
     * @param branch The name of the branch (required)
     * @param ref Create branch from commit sha or existing branch (required)
     * @return CreateBranchRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create branch </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failed to create branch </td><td>  -  </td></tr>
     </table>
     */
    public CreateBranchRequestBuilder createBranch(String id, String branch, String ref) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (branch == null) throw new IllegalArgumentException("\"branch\" is required but got null");
            

        if (ref == null) throw new IllegalArgumentException("\"ref\" is required but got null");
            

        return new CreateBranchRequestBuilder(id, branch, ref);
    }
    private okhttp3.Call deleteBranchCall(String id, String branch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/projects/{id}/repository/branches/{branch}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBranchValidateBeforeCall(String id, String branch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteBranch(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling deleteBranch(Async)");
        }

        return deleteBranchCall(id, branch, _callback);

    }


    private ApiResponse<Void> deleteBranchWithHttpInfo(String id, String branch) throws ApiException {
        okhttp3.Call localVarCall = deleteBranchValidateBeforeCall(id, branch, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteBranchAsync(String id, String branch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBranchValidateBeforeCall(id, branch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteBranchRequestBuilder {
        private final String id;
        private final String branch;

        private DeleteBranchRequestBuilder(String id, String branch) {
            this.id = id;
            this.branch = branch;
        }

        /**
         * Build call for deleteBranch
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Delete a branch </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Branch Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteBranchCall(id, branch, _callback);
        }


        /**
         * Execute deleteBranch request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Delete a branch </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Branch Not Found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteBranchWithHttpInfo(id, branch);
        }

        /**
         * Execute deleteBranch request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Delete a branch </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Branch Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteBranchWithHttpInfo(id, branch);
        }

        /**
         * Execute deleteBranch request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Delete a branch </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Branch Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteBranchAsync(id, branch, _callback);
        }
    }

    /**
     * 
     * Delete a branch
     * @param id The ID or URL-encoded path of the project (required)
     * @param branch The name of the branch (required)
     * @return DeleteBranchRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete a branch </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Branch Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DeleteBranchRequestBuilder deleteBranch(String id, String branch) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (branch == null) throw new IllegalArgumentException("\"branch\" is required but got null");
            

        return new DeleteBranchRequestBuilder(id, branch);
    }
    private okhttp3.Call deleteMergedCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/projects/{id}/repository/merged_branches"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMergedValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteMerged(Async)");
        }

        return deleteMergedCall(id, _callback);

    }


    private ApiResponse<Void> deleteMergedWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteMergedValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteMergedAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMergedValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteMergedRequestBuilder {
        private final String id;

        private DeleteMergedRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for deleteMerged
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 Accepted </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> 404 Project Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteMergedCall(id, _callback);
        }


        /**
         * Execute deleteMerged request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 Accepted </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> 404 Project Not Found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteMergedWithHttpInfo(id);
        }

        /**
         * Execute deleteMerged request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 Accepted </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> 404 Project Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteMergedWithHttpInfo(id);
        }

        /**
         * Execute deleteMerged request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> 202 Accepted </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> 404 Project Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteMergedAsync(id, _callback);
        }
    }

    /**
     * 
     * Delete all merged branches
     * @param id The ID or URL-encoded path of the project (required)
     * @return DeleteMergedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> 202 Accepted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 Project Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DeleteMergedRequestBuilder deleteMerged(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DeleteMergedRequestBuilder(id);
    }
    private okhttp3.Call getAllCall(String id, Integer page, Integer perPage, String search, String regex, String sort, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/projects/{id}/repository/branches"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (regex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("regex", regex));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(String id, Integer page, Integer perPage, String search, String regex, String sort, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAll(Async)");
        }

        return getAllCall(id, page, perPage, search, regex, sort, pageToken, _callback);

    }


    private ApiResponse<List<APIEntitiesBranch>> getAllWithHttpInfo(String id, Integer page, Integer perPage, String search, String regex, String sort, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(id, page, perPage, search, regex, sort, pageToken, null);
        Type localVarReturnType = new TypeToken<List<APIEntitiesBranch>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAsync(String id, Integer page, Integer perPage, String search, String regex, String sort, String pageToken, final ApiCallback<List<APIEntitiesBranch>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(id, page, perPage, search, regex, sort, pageToken, _callback);
        Type localVarReturnType = new TypeToken<List<APIEntitiesBranch>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {
        private final String id;
        private Integer page;
        private Integer perPage;
        private String search;
        private String regex;
        private String sort;
        private String pageToken;

        private GetAllRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set page
         * @param page Current page number (optional, default to 1)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of items per page (optional, default to 20)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set search
         * @param search Return list of branches matching the search criteria (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Set regex
         * @param regex Return list of branches matching the regex (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder regex(String regex) {
            this.regex = regex;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Return list of branches sorted by the given field (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set pageToken
         * @param pageToken Name of branch to start the pagination from (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder pageToken(String pageToken) {
            this.pageToken = pageToken;
            return this;
        }
        
        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get a project repository branches </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> 404 Project Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(id, page, perPage, search, regex, sort, pageToken, _callback);
        }


        /**
         * Execute getAll request
         * @return List&lt;APIEntitiesBranch&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get a project repository branches </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> 404 Project Not Found </td><td>  -  </td></tr>
         </table>
         */
        public List<APIEntitiesBranch> execute() throws ApiException {
            ApiResponse<List<APIEntitiesBranch>> localVarResp = getAllWithHttpInfo(id, page, perPage, search, regex, sort, pageToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;List&lt;APIEntitiesBranch&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get a project repository branches </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> 404 Project Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<APIEntitiesBranch>> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo(id, page, perPage, search, regex, sort, pageToken);
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get a project repository branches </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> 404 Project Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<APIEntitiesBranch>> _callback) throws ApiException {
            return getAllAsync(id, page, perPage, search, regex, sort, pageToken, _callback);
        }
    }

    /**
     * 
     * Get a project repository branches
     * @param id The ID or URL-encoded path of the project (required)
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a project repository branches </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 Project Not Found </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestBuilder getAll(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetAllRequestBuilder(id);
    }
    private okhttp3.Call getSingleBranchCall(String id, Integer branch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/projects/{id}/repository/branches/{branch}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleBranchValidateBeforeCall(String id, Integer branch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSingleBranch(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling getSingleBranch(Async)");
        }

        return getSingleBranchCall(id, branch, _callback);

    }


    private ApiResponse<APIEntitiesBranch> getSingleBranchWithHttpInfo(String id, Integer branch) throws ApiException {
        okhttp3.Call localVarCall = getSingleBranchValidateBeforeCall(id, branch, null);
        Type localVarReturnType = new TypeToken<APIEntitiesBranch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleBranchAsync(String id, Integer branch, final ApiCallback<APIEntitiesBranch> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleBranchValidateBeforeCall(id, branch, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesBranch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleBranchRequestBuilder {
        private final String id;
        private final Integer branch;

        private GetSingleBranchRequestBuilder(String id, Integer branch) {
            this.id = id;
            this.branch = branch;
        }

        /**
         * Build call for getSingleBranch
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get a single repository branch </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Branch Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleBranchCall(id, branch, _callback);
        }


        /**
         * Execute getSingleBranch request
         * @return APIEntitiesBranch
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get a single repository branch </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Branch Not Found </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesBranch execute() throws ApiException {
            ApiResponse<APIEntitiesBranch> localVarResp = getSingleBranchWithHttpInfo(id, branch);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleBranch request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesBranch&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get a single repository branch </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Branch Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesBranch> executeWithHttpInfo() throws ApiException {
            return getSingleBranchWithHttpInfo(id, branch);
        }

        /**
         * Execute getSingleBranch request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get a single repository branch </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Branch Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesBranch> _callback) throws ApiException {
            return getSingleBranchAsync(id, branch, _callback);
        }
    }

    /**
     * 
     * Get a single repository branch
     * @param id The ID or URL-encoded path of the project (required)
     * @param branch  (required)
     * @return GetSingleBranchRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single repository branch </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Branch Not Found </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleBranchRequestBuilder getSingleBranch(String id, Integer branch) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (branch == null) throw new IllegalArgumentException("\"branch\" is required but got null");
        return new GetSingleBranchRequestBuilder(id, branch);
    }
    private okhttp3.Call protectBranchCall(String id, String branch, BranchesProtectBranchRequest branchesProtectBranchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = branchesProtectBranchRequest;

        // create path and map variables
        String localVarPath = "/api/v4/projects/{id}/repository/branches/{branch}/protect"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protectBranchValidateBeforeCall(String id, String branch, BranchesProtectBranchRequest branchesProtectBranchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling protectBranch(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling protectBranch(Async)");
        }

        return protectBranchCall(id, branch, branchesProtectBranchRequest, _callback);

    }


    private ApiResponse<APIEntitiesBranch> protectBranchWithHttpInfo(String id, String branch, BranchesProtectBranchRequest branchesProtectBranchRequest) throws ApiException {
        okhttp3.Call localVarCall = protectBranchValidateBeforeCall(id, branch, branchesProtectBranchRequest, null);
        Type localVarReturnType = new TypeToken<APIEntitiesBranch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call protectBranchAsync(String id, String branch, BranchesProtectBranchRequest branchesProtectBranchRequest, final ApiCallback<APIEntitiesBranch> _callback) throws ApiException {

        okhttp3.Call localVarCall = protectBranchValidateBeforeCall(id, branch, branchesProtectBranchRequest, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesBranch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ProtectBranchRequestBuilder {
        private final String id;
        private final String branch;
        private Boolean developersCanPush;
        private Boolean developersCanMerge;

        private ProtectBranchRequestBuilder(String id, String branch) {
            this.id = id;
            this.branch = branch;
        }

        /**
         * Set developersCanPush
         * @param developersCanPush Flag if developers can push to that branch (optional)
         * @return ProtectBranchRequestBuilder
         */
        public ProtectBranchRequestBuilder developersCanPush(Boolean developersCanPush) {
            this.developersCanPush = developersCanPush;
            return this;
        }
        
        /**
         * Set developersCanMerge
         * @param developersCanMerge Flag if developers can merge to that branch (optional)
         * @return ProtectBranchRequestBuilder
         */
        public ProtectBranchRequestBuilder developersCanMerge(Boolean developersCanMerge) {
            this.developersCanMerge = developersCanMerge;
            return this;
        }
        
        /**
         * Build call for protectBranch
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Protect a single branch </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> 404 Branch Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BranchesProtectBranchRequest branchesProtectBranchRequest = buildBodyParams();
            return protectBranchCall(id, branch, branchesProtectBranchRequest, _callback);
        }

        private BranchesProtectBranchRequest buildBodyParams() {
            BranchesProtectBranchRequest branchesProtectBranchRequest = new BranchesProtectBranchRequest();
            branchesProtectBranchRequest.developersCanPush(this.developersCanPush);
            branchesProtectBranchRequest.developersCanMerge(this.developersCanMerge);
            return branchesProtectBranchRequest;
        }

        /**
         * Execute protectBranch request
         * @return APIEntitiesBranch
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Protect a single branch </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> 404 Branch Not Found </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesBranch execute() throws ApiException {
            BranchesProtectBranchRequest branchesProtectBranchRequest = buildBodyParams();
            ApiResponse<APIEntitiesBranch> localVarResp = protectBranchWithHttpInfo(id, branch, branchesProtectBranchRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute protectBranch request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesBranch&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Protect a single branch </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> 404 Branch Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesBranch> executeWithHttpInfo() throws ApiException {
            BranchesProtectBranchRequest branchesProtectBranchRequest = buildBodyParams();
            return protectBranchWithHttpInfo(id, branch, branchesProtectBranchRequest);
        }

        /**
         * Execute protectBranch request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Protect a single branch </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> 404 Branch Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesBranch> _callback) throws ApiException {
            BranchesProtectBranchRequest branchesProtectBranchRequest = buildBodyParams();
            return protectBranchAsync(id, branch, branchesProtectBranchRequest, _callback);
        }
    }

    /**
     * 
     * Protect a single branch
     * @param id The ID or URL-encoded path of the project (required)
     * @param branch The name of the branch (required)
     * @return ProtectBranchRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Protect a single branch </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 Branch Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ProtectBranchRequestBuilder protectBranch(String id, String branch) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (branch == null) throw new IllegalArgumentException("\"branch\" is required but got null");
            

        return new ProtectBranchRequestBuilder(id, branch);
    }
    private okhttp3.Call unprotectBranchCall(String id, String branch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/projects/{id}/repository/branches/{branch}/unprotect"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unprotectBranchValidateBeforeCall(String id, String branch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling unprotectBranch(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling unprotectBranch(Async)");
        }

        return unprotectBranchCall(id, branch, _callback);

    }


    private ApiResponse<APIEntitiesBranch> unprotectBranchWithHttpInfo(String id, String branch) throws ApiException {
        okhttp3.Call localVarCall = unprotectBranchValidateBeforeCall(id, branch, null);
        Type localVarReturnType = new TypeToken<APIEntitiesBranch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call unprotectBranchAsync(String id, String branch, final ApiCallback<APIEntitiesBranch> _callback) throws ApiException {

        okhttp3.Call localVarCall = unprotectBranchValidateBeforeCall(id, branch, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesBranch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UnprotectBranchRequestBuilder {
        private final String id;
        private final String branch;

        private UnprotectBranchRequestBuilder(String id, String branch) {
            this.id = id;
            this.branch = branch;
        }

        /**
         * Build call for unprotectBranch
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Unprotect a single branch </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> 404 Project Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return unprotectBranchCall(id, branch, _callback);
        }


        /**
         * Execute unprotectBranch request
         * @return APIEntitiesBranch
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Unprotect a single branch </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> 404 Project Not Found </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesBranch execute() throws ApiException {
            ApiResponse<APIEntitiesBranch> localVarResp = unprotectBranchWithHttpInfo(id, branch);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute unprotectBranch request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesBranch&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Unprotect a single branch </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> 404 Project Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesBranch> executeWithHttpInfo() throws ApiException {
            return unprotectBranchWithHttpInfo(id, branch);
        }

        /**
         * Execute unprotectBranch request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Unprotect a single branch </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> 404 Project Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesBranch> _callback) throws ApiException {
            return unprotectBranchAsync(id, branch, _callback);
        }
    }

    /**
     * 
     * Unprotect a single branch
     * @param id The ID or URL-encoded path of the project (required)
     * @param branch The name of the branch (required)
     * @return UnprotectBranchRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unprotect a single branch </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 Project Not Found </td><td>  -  </td></tr>
     </table>
     */
    public UnprotectBranchRequestBuilder unprotectBranch(String id, String branch) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (branch == null) throw new IllegalArgumentException("\"branch\" is required but got null");
            

        return new UnprotectBranchRequestBuilder(id, branch);
    }
}
