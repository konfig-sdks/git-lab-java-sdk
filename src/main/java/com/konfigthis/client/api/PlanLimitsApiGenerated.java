/*
 * GitLab API
 * An OpenAPI definition for the GitLab REST API. Few API resources or endpoints are currently included. The intent is to expand this to match the entire Markdown documentation of the API: <https://docs.gitlab.com/ee/api/>. Contributions are welcome.  When viewing this on gitlab.com, you can test API calls directly from the browser against the `gitlab.com` instance, if you are logged in. The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie), so each request is made using your account.  Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html) 
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.APIEntitiesPlanLimit;
import com.konfigthis.client.model.PlanlimitsModifyLimitsRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PlanLimitsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PlanLimitsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PlanLimitsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKeyAuth() == null) {
            throw new IllegalArgumentException("\"Private-Token\" is required but no API key was provided. Please set \"Private-Token\" with ApiClient#setApiKeyAuth(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getCurrentLimitsCall(String planName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/application/plan_limits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (planName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("plan_name", planName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrentLimitsValidateBeforeCall(String planName, final ApiCallback _callback) throws ApiException {
        return getCurrentLimitsCall(planName, _callback);

    }


    private ApiResponse<APIEntitiesPlanLimit> getCurrentLimitsWithHttpInfo(String planName) throws ApiException {
        okhttp3.Call localVarCall = getCurrentLimitsValidateBeforeCall(planName, null);
        Type localVarReturnType = new TypeToken<APIEntitiesPlanLimit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCurrentLimitsAsync(String planName, final ApiCallback<APIEntitiesPlanLimit> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrentLimitsValidateBeforeCall(planName, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesPlanLimit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCurrentLimitsRequestBuilder {
        private String planName;

        private GetCurrentLimitsRequestBuilder() {
        }

        /**
         * Set planName
         * @param planName Name of the plan to get the limits from. Default: default. (optional, default to default)
         * @return GetCurrentLimitsRequestBuilder
         */
        public GetCurrentLimitsRequestBuilder planName(String planName) {
            this.planName = planName;
            return this;
        }
        
        /**
         * Build call for getCurrentLimits
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get current plan limits </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCurrentLimitsCall(planName, _callback);
        }


        /**
         * Execute getCurrentLimits request
         * @return APIEntitiesPlanLimit
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get current plan limits </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesPlanLimit execute() throws ApiException {
            ApiResponse<APIEntitiesPlanLimit> localVarResp = getCurrentLimitsWithHttpInfo(planName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCurrentLimits request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesPlanLimit&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get current plan limits </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesPlanLimit> executeWithHttpInfo() throws ApiException {
            return getCurrentLimitsWithHttpInfo(planName);
        }

        /**
         * Execute getCurrentLimits request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get current plan limits </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesPlanLimit> _callback) throws ApiException {
            return getCurrentLimitsAsync(planName, _callback);
        }
    }

    /**
     * Get current plan limits
     * List the current limits of a plan on the GitLab instance.
     * @return GetCurrentLimitsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get current plan limits </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public GetCurrentLimitsRequestBuilder getCurrentLimits() throws IllegalArgumentException {
        return new GetCurrentLimitsRequestBuilder();
    }
    private okhttp3.Call modifyLimitsCall(PlanlimitsModifyLimitsRequest planlimitsModifyLimitsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = planlimitsModifyLimitsRequest;

        // create path and map variables
        String localVarPath = "/api/v4/application/plan_limits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyLimitsValidateBeforeCall(PlanlimitsModifyLimitsRequest planlimitsModifyLimitsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'planlimitsModifyLimitsRequest' is set
        if (planlimitsModifyLimitsRequest == null) {
            throw new ApiException("Missing the required parameter 'planlimitsModifyLimitsRequest' when calling modifyLimits(Async)");
        }

        return modifyLimitsCall(planlimitsModifyLimitsRequest, _callback);

    }


    private ApiResponse<APIEntitiesPlanLimit> modifyLimitsWithHttpInfo(PlanlimitsModifyLimitsRequest planlimitsModifyLimitsRequest) throws ApiException {
        okhttp3.Call localVarCall = modifyLimitsValidateBeforeCall(planlimitsModifyLimitsRequest, null);
        Type localVarReturnType = new TypeToken<APIEntitiesPlanLimit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call modifyLimitsAsync(PlanlimitsModifyLimitsRequest planlimitsModifyLimitsRequest, final ApiCallback<APIEntitiesPlanLimit> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyLimitsValidateBeforeCall(planlimitsModifyLimitsRequest, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesPlanLimit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ModifyLimitsRequestBuilder {
        private final String planName;
        private Integer ciPipelineSize;
        private Integer ciActiveJobs;
        private Integer ciProjectSubscriptions;
        private Integer ciPipelineSchedules;
        private Integer ciNeedsSizeLimit;
        private Integer ciRegisteredGroupRunners;
        private Integer ciRegisteredProjectRunners;
        private Integer conanMaxFileSize;
        private Integer enforcementLimit;
        private Integer genericPackagesMaxFileSize;
        private Integer helmMaxFileSize;
        private Integer mavenMaxFileSize;
        private Integer notificationLimit;
        private Integer npmMaxFileSize;
        private Integer nugetMaxFileSize;
        private Integer pypiMaxFileSize;
        private Integer terraformModuleMaxFileSize;
        private Integer storageSizeLimit;
        private Integer pipelineHierarchySize;

        private ModifyLimitsRequestBuilder(String planName) {
            this.planName = planName;
        }

        /**
         * Set ciPipelineSize
         * @param ciPipelineSize Maximum number of jobs in a single pipeline (optional)
         * @return ModifyLimitsRequestBuilder
         */
        public ModifyLimitsRequestBuilder ciPipelineSize(Integer ciPipelineSize) {
            this.ciPipelineSize = ciPipelineSize;
            return this;
        }
        
        /**
         * Set ciActiveJobs
         * @param ciActiveJobs Total number of jobs in currently active pipelines (optional)
         * @return ModifyLimitsRequestBuilder
         */
        public ModifyLimitsRequestBuilder ciActiveJobs(Integer ciActiveJobs) {
            this.ciActiveJobs = ciActiveJobs;
            return this;
        }
        
        /**
         * Set ciProjectSubscriptions
         * @param ciProjectSubscriptions Maximum number of pipeline subscriptions to and from a project (optional)
         * @return ModifyLimitsRequestBuilder
         */
        public ModifyLimitsRequestBuilder ciProjectSubscriptions(Integer ciProjectSubscriptions) {
            this.ciProjectSubscriptions = ciProjectSubscriptions;
            return this;
        }
        
        /**
         * Set ciPipelineSchedules
         * @param ciPipelineSchedules Maximum number of pipeline schedules (optional)
         * @return ModifyLimitsRequestBuilder
         */
        public ModifyLimitsRequestBuilder ciPipelineSchedules(Integer ciPipelineSchedules) {
            this.ciPipelineSchedules = ciPipelineSchedules;
            return this;
        }
        
        /**
         * Set ciNeedsSizeLimit
         * @param ciNeedsSizeLimit Maximum number of DAG dependencies that a job can have (optional)
         * @return ModifyLimitsRequestBuilder
         */
        public ModifyLimitsRequestBuilder ciNeedsSizeLimit(Integer ciNeedsSizeLimit) {
            this.ciNeedsSizeLimit = ciNeedsSizeLimit;
            return this;
        }
        
        /**
         * Set ciRegisteredGroupRunners
         * @param ciRegisteredGroupRunners Maximum number of runners registered per group (optional)
         * @return ModifyLimitsRequestBuilder
         */
        public ModifyLimitsRequestBuilder ciRegisteredGroupRunners(Integer ciRegisteredGroupRunners) {
            this.ciRegisteredGroupRunners = ciRegisteredGroupRunners;
            return this;
        }
        
        /**
         * Set ciRegisteredProjectRunners
         * @param ciRegisteredProjectRunners Maximum number of runners registered per project (optional)
         * @return ModifyLimitsRequestBuilder
         */
        public ModifyLimitsRequestBuilder ciRegisteredProjectRunners(Integer ciRegisteredProjectRunners) {
            this.ciRegisteredProjectRunners = ciRegisteredProjectRunners;
            return this;
        }
        
        /**
         * Set conanMaxFileSize
         * @param conanMaxFileSize Maximum Conan package file size in bytes (optional)
         * @return ModifyLimitsRequestBuilder
         */
        public ModifyLimitsRequestBuilder conanMaxFileSize(Integer conanMaxFileSize) {
            this.conanMaxFileSize = conanMaxFileSize;
            return this;
        }
        
        /**
         * Set enforcementLimit
         * @param enforcementLimit Maximum storage size for the root namespace enforcement in MiB (optional)
         * @return ModifyLimitsRequestBuilder
         */
        public ModifyLimitsRequestBuilder enforcementLimit(Integer enforcementLimit) {
            this.enforcementLimit = enforcementLimit;
            return this;
        }
        
        /**
         * Set genericPackagesMaxFileSize
         * @param genericPackagesMaxFileSize Maximum generic package file size in bytes (optional)
         * @return ModifyLimitsRequestBuilder
         */
        public ModifyLimitsRequestBuilder genericPackagesMaxFileSize(Integer genericPackagesMaxFileSize) {
            this.genericPackagesMaxFileSize = genericPackagesMaxFileSize;
            return this;
        }
        
        /**
         * Set helmMaxFileSize
         * @param helmMaxFileSize Maximum Helm chart file size in bytes (optional)
         * @return ModifyLimitsRequestBuilder
         */
        public ModifyLimitsRequestBuilder helmMaxFileSize(Integer helmMaxFileSize) {
            this.helmMaxFileSize = helmMaxFileSize;
            return this;
        }
        
        /**
         * Set mavenMaxFileSize
         * @param mavenMaxFileSize Maximum Maven package file size in bytes (optional)
         * @return ModifyLimitsRequestBuilder
         */
        public ModifyLimitsRequestBuilder mavenMaxFileSize(Integer mavenMaxFileSize) {
            this.mavenMaxFileSize = mavenMaxFileSize;
            return this;
        }
        
        /**
         * Set notificationLimit
         * @param notificationLimit Maximum storage size for the root namespace notifications in MiB (optional)
         * @return ModifyLimitsRequestBuilder
         */
        public ModifyLimitsRequestBuilder notificationLimit(Integer notificationLimit) {
            this.notificationLimit = notificationLimit;
            return this;
        }
        
        /**
         * Set npmMaxFileSize
         * @param npmMaxFileSize Maximum NPM package file size in bytes (optional)
         * @return ModifyLimitsRequestBuilder
         */
        public ModifyLimitsRequestBuilder npmMaxFileSize(Integer npmMaxFileSize) {
            this.npmMaxFileSize = npmMaxFileSize;
            return this;
        }
        
        /**
         * Set nugetMaxFileSize
         * @param nugetMaxFileSize Maximum NuGet package file size in bytes (optional)
         * @return ModifyLimitsRequestBuilder
         */
        public ModifyLimitsRequestBuilder nugetMaxFileSize(Integer nugetMaxFileSize) {
            this.nugetMaxFileSize = nugetMaxFileSize;
            return this;
        }
        
        /**
         * Set pypiMaxFileSize
         * @param pypiMaxFileSize Maximum PyPI package file size in bytes (optional)
         * @return ModifyLimitsRequestBuilder
         */
        public ModifyLimitsRequestBuilder pypiMaxFileSize(Integer pypiMaxFileSize) {
            this.pypiMaxFileSize = pypiMaxFileSize;
            return this;
        }
        
        /**
         * Set terraformModuleMaxFileSize
         * @param terraformModuleMaxFileSize Maximum Terraform Module package file size in bytes (optional)
         * @return ModifyLimitsRequestBuilder
         */
        public ModifyLimitsRequestBuilder terraformModuleMaxFileSize(Integer terraformModuleMaxFileSize) {
            this.terraformModuleMaxFileSize = terraformModuleMaxFileSize;
            return this;
        }
        
        /**
         * Set storageSizeLimit
         * @param storageSizeLimit Maximum storage size for the root namespace in MiB (optional)
         * @return ModifyLimitsRequestBuilder
         */
        public ModifyLimitsRequestBuilder storageSizeLimit(Integer storageSizeLimit) {
            this.storageSizeLimit = storageSizeLimit;
            return this;
        }
        
        /**
         * Set pipelineHierarchySize
         * @param pipelineHierarchySize Maximum number of downstream pipelines in a pipeline&#39;s hierarchy tree (optional)
         * @return ModifyLimitsRequestBuilder
         */
        public ModifyLimitsRequestBuilder pipelineHierarchySize(Integer pipelineHierarchySize) {
            this.pipelineHierarchySize = pipelineHierarchySize;
            return this;
        }
        
        /**
         * Build call for modifyLimits
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Change plan limits </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PlanlimitsModifyLimitsRequest planlimitsModifyLimitsRequest = buildBodyParams();
            return modifyLimitsCall(planlimitsModifyLimitsRequest, _callback);
        }

        private PlanlimitsModifyLimitsRequest buildBodyParams() {
            PlanlimitsModifyLimitsRequest planlimitsModifyLimitsRequest = new PlanlimitsModifyLimitsRequest();
            if (this.planName != null)
            planlimitsModifyLimitsRequest.planName(PlanlimitsModifyLimitsRequest.PlanNameEnum.fromValue(this.planName));
            planlimitsModifyLimitsRequest.ciPipelineSize(this.ciPipelineSize);
            planlimitsModifyLimitsRequest.ciActiveJobs(this.ciActiveJobs);
            planlimitsModifyLimitsRequest.ciProjectSubscriptions(this.ciProjectSubscriptions);
            planlimitsModifyLimitsRequest.ciPipelineSchedules(this.ciPipelineSchedules);
            planlimitsModifyLimitsRequest.ciNeedsSizeLimit(this.ciNeedsSizeLimit);
            planlimitsModifyLimitsRequest.ciRegisteredGroupRunners(this.ciRegisteredGroupRunners);
            planlimitsModifyLimitsRequest.ciRegisteredProjectRunners(this.ciRegisteredProjectRunners);
            planlimitsModifyLimitsRequest.conanMaxFileSize(this.conanMaxFileSize);
            planlimitsModifyLimitsRequest.enforcementLimit(this.enforcementLimit);
            planlimitsModifyLimitsRequest.genericPackagesMaxFileSize(this.genericPackagesMaxFileSize);
            planlimitsModifyLimitsRequest.helmMaxFileSize(this.helmMaxFileSize);
            planlimitsModifyLimitsRequest.mavenMaxFileSize(this.mavenMaxFileSize);
            planlimitsModifyLimitsRequest.notificationLimit(this.notificationLimit);
            planlimitsModifyLimitsRequest.npmMaxFileSize(this.npmMaxFileSize);
            planlimitsModifyLimitsRequest.nugetMaxFileSize(this.nugetMaxFileSize);
            planlimitsModifyLimitsRequest.pypiMaxFileSize(this.pypiMaxFileSize);
            planlimitsModifyLimitsRequest.terraformModuleMaxFileSize(this.terraformModuleMaxFileSize);
            planlimitsModifyLimitsRequest.storageSizeLimit(this.storageSizeLimit);
            planlimitsModifyLimitsRequest.pipelineHierarchySize(this.pipelineHierarchySize);
            return planlimitsModifyLimitsRequest;
        }

        /**
         * Execute modifyLimits request
         * @return APIEntitiesPlanLimit
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Change plan limits </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesPlanLimit execute() throws ApiException {
            PlanlimitsModifyLimitsRequest planlimitsModifyLimitsRequest = buildBodyParams();
            ApiResponse<APIEntitiesPlanLimit> localVarResp = modifyLimitsWithHttpInfo(planlimitsModifyLimitsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute modifyLimits request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesPlanLimit&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Change plan limits </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesPlanLimit> executeWithHttpInfo() throws ApiException {
            PlanlimitsModifyLimitsRequest planlimitsModifyLimitsRequest = buildBodyParams();
            return modifyLimitsWithHttpInfo(planlimitsModifyLimitsRequest);
        }

        /**
         * Execute modifyLimits request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Change plan limits </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesPlanLimit> _callback) throws ApiException {
            PlanlimitsModifyLimitsRequest planlimitsModifyLimitsRequest = buildBodyParams();
            return modifyLimitsAsync(planlimitsModifyLimitsRequest, _callback);
        }
    }

    /**
     * Change plan limits
     * Modify the limits of a plan on the GitLab instance.
     * @param planlimitsModifyLimitsRequest  (required)
     * @return ModifyLimitsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Change plan limits </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ModifyLimitsRequestBuilder modifyLimits(String planName) throws IllegalArgumentException {
        if (planName == null) throw new IllegalArgumentException("\"planName\" is required but got null");
            

        return new ModifyLimitsRequestBuilder(planName);
    }
}
