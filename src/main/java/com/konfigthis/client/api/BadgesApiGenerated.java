/*
 * GitLab API
 * An OpenAPI definition for the GitLab REST API. Few API resources or endpoints are currently included. The intent is to expand this to match the entire Markdown documentation of the API: <https://docs.gitlab.com/ee/api/>. Contributions are welcome.  When viewing this on gitlab.com, you can test API calls directly from the browser against the `gitlab.com` instance, if you are logged in. The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie), so each request is made using your account.  Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html) 
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.APIEntitiesBadge;
import com.konfigthis.client.model.APIEntitiesBasicBadgeDetails;
import com.konfigthis.client.model.BadgesAddBadgeToGroupRequest;
import com.konfigthis.client.model.BadgesAddProjectBadgeRequest;
import com.konfigthis.client.model.BadgesUpdateGroupBadgeRequest;
import com.konfigthis.client.model.BadgesUpdateProjectBadgeRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BadgesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BadgesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public BadgesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKeyAuth() == null) {
            throw new IllegalArgumentException("\"Private-Token\" is required but no API key was provided. Please set \"Private-Token\" with ApiClient#setApiKeyAuth(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addBadgeToGroupCall(String id, BadgesAddBadgeToGroupRequest badgesAddBadgeToGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = badgesAddBadgeToGroupRequest;

        // create path and map variables
        String localVarPath = "/api/v4/groups/{id}/badges"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addBadgeToGroupValidateBeforeCall(String id, BadgesAddBadgeToGroupRequest badgesAddBadgeToGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addBadgeToGroup(Async)");
        }

        // verify the required parameter 'badgesAddBadgeToGroupRequest' is set
        if (badgesAddBadgeToGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'badgesAddBadgeToGroupRequest' when calling addBadgeToGroup(Async)");
        }

        return addBadgeToGroupCall(id, badgesAddBadgeToGroupRequest, _callback);

    }


    private ApiResponse<APIEntitiesBadge> addBadgeToGroupWithHttpInfo(String id, BadgesAddBadgeToGroupRequest badgesAddBadgeToGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = addBadgeToGroupValidateBeforeCall(id, badgesAddBadgeToGroupRequest, null);
        Type localVarReturnType = new TypeToken<APIEntitiesBadge>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addBadgeToGroupAsync(String id, BadgesAddBadgeToGroupRequest badgesAddBadgeToGroupRequest, final ApiCallback<APIEntitiesBadge> _callback) throws ApiException {

        okhttp3.Call localVarCall = addBadgeToGroupValidateBeforeCall(id, badgesAddBadgeToGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesBadge>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddBadgeToGroupRequestBuilder {
        private final String linkUrl;
        private final String imageUrl;
        private final String id;
        private String name;

        private AddBadgeToGroupRequestBuilder(String linkUrl, String imageUrl, String id) {
            this.linkUrl = linkUrl;
            this.imageUrl = imageUrl;
            this.id = id;
        }

        /**
         * Set name
         * @param name Name for the badge (optional)
         * @return AddBadgeToGroupRequestBuilder
         */
        public AddBadgeToGroupRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for addBadgeToGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Adds a badge to a group. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BadgesAddBadgeToGroupRequest badgesAddBadgeToGroupRequest = buildBodyParams();
            return addBadgeToGroupCall(id, badgesAddBadgeToGroupRequest, _callback);
        }

        private BadgesAddBadgeToGroupRequest buildBodyParams() {
            BadgesAddBadgeToGroupRequest badgesAddBadgeToGroupRequest = new BadgesAddBadgeToGroupRequest();
            badgesAddBadgeToGroupRequest.linkUrl(this.linkUrl);
            badgesAddBadgeToGroupRequest.imageUrl(this.imageUrl);
            badgesAddBadgeToGroupRequest.name(this.name);
            return badgesAddBadgeToGroupRequest;
        }

        /**
         * Execute addBadgeToGroup request
         * @return APIEntitiesBadge
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Adds a badge to a group. </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesBadge execute() throws ApiException {
            BadgesAddBadgeToGroupRequest badgesAddBadgeToGroupRequest = buildBodyParams();
            ApiResponse<APIEntitiesBadge> localVarResp = addBadgeToGroupWithHttpInfo(id, badgesAddBadgeToGroupRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addBadgeToGroup request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesBadge&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Adds a badge to a group. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesBadge> executeWithHttpInfo() throws ApiException {
            BadgesAddBadgeToGroupRequest badgesAddBadgeToGroupRequest = buildBodyParams();
            return addBadgeToGroupWithHttpInfo(id, badgesAddBadgeToGroupRequest);
        }

        /**
         * Execute addBadgeToGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Adds a badge to a group. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesBadge> _callback) throws ApiException {
            BadgesAddBadgeToGroupRequest badgesAddBadgeToGroupRequest = buildBodyParams();
            return addBadgeToGroupAsync(id, badgesAddBadgeToGroupRequest, _callback);
        }
    }

    /**
     * Adds a badge to a group.
     * This feature was introduced in GitLab 10.6.
     * @param id The ID or URL-encoded path of the group owned by the authenticated user. (required)
     * @param badgesAddBadgeToGroupRequest  (required)
     * @return AddBadgeToGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Adds a badge to a group. </td><td>  -  </td></tr>
     </table>
     */
    public AddBadgeToGroupRequestBuilder addBadgeToGroup(String linkUrl, String imageUrl, String id) throws IllegalArgumentException {
        if (linkUrl == null) throw new IllegalArgumentException("\"linkUrl\" is required but got null");
            

        if (imageUrl == null) throw new IllegalArgumentException("\"imageUrl\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new AddBadgeToGroupRequestBuilder(linkUrl, imageUrl, id);
    }
    private okhttp3.Call addProjectBadgeCall(String id, BadgesAddProjectBadgeRequest badgesAddProjectBadgeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = badgesAddProjectBadgeRequest;

        // create path and map variables
        String localVarPath = "/api/v4/projects/{id}/badges"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addProjectBadgeValidateBeforeCall(String id, BadgesAddProjectBadgeRequest badgesAddProjectBadgeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addProjectBadge(Async)");
        }

        // verify the required parameter 'badgesAddProjectBadgeRequest' is set
        if (badgesAddProjectBadgeRequest == null) {
            throw new ApiException("Missing the required parameter 'badgesAddProjectBadgeRequest' when calling addProjectBadge(Async)");
        }

        return addProjectBadgeCall(id, badgesAddProjectBadgeRequest, _callback);

    }


    private ApiResponse<APIEntitiesBadge> addProjectBadgeWithHttpInfo(String id, BadgesAddProjectBadgeRequest badgesAddProjectBadgeRequest) throws ApiException {
        okhttp3.Call localVarCall = addProjectBadgeValidateBeforeCall(id, badgesAddProjectBadgeRequest, null);
        Type localVarReturnType = new TypeToken<APIEntitiesBadge>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addProjectBadgeAsync(String id, BadgesAddProjectBadgeRequest badgesAddProjectBadgeRequest, final ApiCallback<APIEntitiesBadge> _callback) throws ApiException {

        okhttp3.Call localVarCall = addProjectBadgeValidateBeforeCall(id, badgesAddProjectBadgeRequest, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesBadge>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddProjectBadgeRequestBuilder {
        private final String linkUrl;
        private final String imageUrl;
        private final String id;
        private String name;

        private AddProjectBadgeRequestBuilder(String linkUrl, String imageUrl, String id) {
            this.linkUrl = linkUrl;
            this.imageUrl = imageUrl;
            this.id = id;
        }

        /**
         * Set name
         * @param name Name for the badge (optional)
         * @return AddProjectBadgeRequestBuilder
         */
        public AddProjectBadgeRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for addProjectBadge
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Adds a badge to a project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BadgesAddProjectBadgeRequest badgesAddProjectBadgeRequest = buildBodyParams();
            return addProjectBadgeCall(id, badgesAddProjectBadgeRequest, _callback);
        }

        private BadgesAddProjectBadgeRequest buildBodyParams() {
            BadgesAddProjectBadgeRequest badgesAddProjectBadgeRequest = new BadgesAddProjectBadgeRequest();
            badgesAddProjectBadgeRequest.linkUrl(this.linkUrl);
            badgesAddProjectBadgeRequest.imageUrl(this.imageUrl);
            badgesAddProjectBadgeRequest.name(this.name);
            return badgesAddProjectBadgeRequest;
        }

        /**
         * Execute addProjectBadge request
         * @return APIEntitiesBadge
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Adds a badge to a project. </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesBadge execute() throws ApiException {
            BadgesAddProjectBadgeRequest badgesAddProjectBadgeRequest = buildBodyParams();
            ApiResponse<APIEntitiesBadge> localVarResp = addProjectBadgeWithHttpInfo(id, badgesAddProjectBadgeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addProjectBadge request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesBadge&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Adds a badge to a project. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesBadge> executeWithHttpInfo() throws ApiException {
            BadgesAddProjectBadgeRequest badgesAddProjectBadgeRequest = buildBodyParams();
            return addProjectBadgeWithHttpInfo(id, badgesAddProjectBadgeRequest);
        }

        /**
         * Execute addProjectBadge request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Adds a badge to a project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesBadge> _callback) throws ApiException {
            BadgesAddProjectBadgeRequest badgesAddProjectBadgeRequest = buildBodyParams();
            return addProjectBadgeAsync(id, badgesAddProjectBadgeRequest, _callback);
        }
    }

    /**
     * Adds a badge to a project.
     * This feature was introduced in GitLab 10.6.
     * @param id The ID or URL-encoded path of the project owned by the authenticated user. (required)
     * @param badgesAddProjectBadgeRequest  (required)
     * @return AddProjectBadgeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Adds a badge to a project. </td><td>  -  </td></tr>
     </table>
     */
    public AddProjectBadgeRequestBuilder addProjectBadge(String linkUrl, String imageUrl, String id) throws IllegalArgumentException {
        if (linkUrl == null) throw new IllegalArgumentException("\"linkUrl\" is required but got null");
            

        if (imageUrl == null) throw new IllegalArgumentException("\"imageUrl\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new AddProjectBadgeRequestBuilder(linkUrl, imageUrl, id);
    }
    private okhttp3.Call getGroupBadgeCall(String id, Integer badgeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/groups/{id}/badges/{badge_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "badge_id" + "}", localVarApiClient.escapeString(badgeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupBadgeValidateBeforeCall(String id, Integer badgeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getGroupBadge(Async)");
        }

        // verify the required parameter 'badgeId' is set
        if (badgeId == null) {
            throw new ApiException("Missing the required parameter 'badgeId' when calling getGroupBadge(Async)");
        }

        return getGroupBadgeCall(id, badgeId, _callback);

    }


    private ApiResponse<APIEntitiesBadge> getGroupBadgeWithHttpInfo(String id, Integer badgeId) throws ApiException {
        okhttp3.Call localVarCall = getGroupBadgeValidateBeforeCall(id, badgeId, null);
        Type localVarReturnType = new TypeToken<APIEntitiesBadge>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGroupBadgeAsync(String id, Integer badgeId, final ApiCallback<APIEntitiesBadge> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupBadgeValidateBeforeCall(id, badgeId, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesBadge>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetGroupBadgeRequestBuilder {
        private final String id;
        private final Integer badgeId;

        private GetGroupBadgeRequestBuilder(String id, Integer badgeId) {
            this.id = id;
            this.badgeId = badgeId;
        }

        /**
         * Build call for getGroupBadge
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Gets a badge of a group. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGroupBadgeCall(id, badgeId, _callback);
        }


        /**
         * Execute getGroupBadge request
         * @return APIEntitiesBadge
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Gets a badge of a group. </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesBadge execute() throws ApiException {
            ApiResponse<APIEntitiesBadge> localVarResp = getGroupBadgeWithHttpInfo(id, badgeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getGroupBadge request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesBadge&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Gets a badge of a group. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesBadge> executeWithHttpInfo() throws ApiException {
            return getGroupBadgeWithHttpInfo(id, badgeId);
        }

        /**
         * Execute getGroupBadge request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Gets a badge of a group. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesBadge> _callback) throws ApiException {
            return getGroupBadgeAsync(id, badgeId, _callback);
        }
    }

    /**
     * Gets a badge of a group.
     * This feature was introduced in GitLab 10.6.
     * @param id The ID or URL-encoded path of the group owned by the authenticated user. (required)
     * @param badgeId The badge ID (required)
     * @return GetGroupBadgeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets a badge of a group. </td><td>  -  </td></tr>
     </table>
     */
    public GetGroupBadgeRequestBuilder getGroupBadge(String id, Integer badgeId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (badgeId == null) throw new IllegalArgumentException("\"badgeId\" is required but got null");
        return new GetGroupBadgeRequestBuilder(id, badgeId);
    }
    private okhttp3.Call getListCall(String id, Integer page, Integer perPage, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/groups/{id}/badges"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListValidateBeforeCall(String id, Integer page, Integer perPage, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getList(Async)");
        }

        return getListCall(id, page, perPage, name, _callback);

    }


    private ApiResponse<List<APIEntitiesBadge>> getListWithHttpInfo(String id, Integer page, Integer perPage, String name) throws ApiException {
        okhttp3.Call localVarCall = getListValidateBeforeCall(id, page, perPage, name, null);
        Type localVarReturnType = new TypeToken<List<APIEntitiesBadge>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListAsync(String id, Integer page, Integer perPage, String name, final ApiCallback<List<APIEntitiesBadge>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListValidateBeforeCall(id, page, perPage, name, _callback);
        Type localVarReturnType = new TypeToken<List<APIEntitiesBadge>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListRequestBuilder {
        private final String id;
        private Integer page;
        private Integer perPage;
        private String name;

        private GetListRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set page
         * @param page Current page number (optional, default to 1)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of items per page (optional, default to 20)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set name
         * @param name Name for the badge (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for getList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Gets a list of group badges viewable by the authenticated user. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListCall(id, page, perPage, name, _callback);
        }


        /**
         * Execute getList request
         * @return List&lt;APIEntitiesBadge&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Gets a list of group badges viewable by the authenticated user. </td><td>  -  </td></tr>
         </table>
         */
        public List<APIEntitiesBadge> execute() throws ApiException {
            ApiResponse<List<APIEntitiesBadge>> localVarResp = getListWithHttpInfo(id, page, perPage, name);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getList request with HTTP info returned
         * @return ApiResponse&lt;List&lt;APIEntitiesBadge&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Gets a list of group badges viewable by the authenticated user. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<APIEntitiesBadge>> executeWithHttpInfo() throws ApiException {
            return getListWithHttpInfo(id, page, perPage, name);
        }

        /**
         * Execute getList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Gets a list of group badges viewable by the authenticated user. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<APIEntitiesBadge>> _callback) throws ApiException {
            return getListAsync(id, page, perPage, name, _callback);
        }
    }

    /**
     * Gets a list of group badges viewable by the authenticated user.
     * This feature was introduced in GitLab 10.6.
     * @param id The ID or URL-encoded path of the group owned by the authenticated user. (required)
     * @return GetListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets a list of group badges viewable by the authenticated user. </td><td>  -  </td></tr>
     </table>
     */
    public GetListRequestBuilder getList(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetListRequestBuilder(id);
    }
    private okhttp3.Call getProjectBadgeCall(String id, Integer badgeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/projects/{id}/badges/{badge_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "badge_id" + "}", localVarApiClient.escapeString(badgeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectBadgeValidateBeforeCall(String id, Integer badgeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getProjectBadge(Async)");
        }

        // verify the required parameter 'badgeId' is set
        if (badgeId == null) {
            throw new ApiException("Missing the required parameter 'badgeId' when calling getProjectBadge(Async)");
        }

        return getProjectBadgeCall(id, badgeId, _callback);

    }


    private ApiResponse<APIEntitiesBadge> getProjectBadgeWithHttpInfo(String id, Integer badgeId) throws ApiException {
        okhttp3.Call localVarCall = getProjectBadgeValidateBeforeCall(id, badgeId, null);
        Type localVarReturnType = new TypeToken<APIEntitiesBadge>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProjectBadgeAsync(String id, Integer badgeId, final ApiCallback<APIEntitiesBadge> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectBadgeValidateBeforeCall(id, badgeId, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesBadge>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetProjectBadgeRequestBuilder {
        private final String id;
        private final Integer badgeId;

        private GetProjectBadgeRequestBuilder(String id, Integer badgeId) {
            this.id = id;
            this.badgeId = badgeId;
        }

        /**
         * Build call for getProjectBadge
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Gets a badge of a project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProjectBadgeCall(id, badgeId, _callback);
        }


        /**
         * Execute getProjectBadge request
         * @return APIEntitiesBadge
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Gets a badge of a project. </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesBadge execute() throws ApiException {
            ApiResponse<APIEntitiesBadge> localVarResp = getProjectBadgeWithHttpInfo(id, badgeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getProjectBadge request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesBadge&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Gets a badge of a project. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesBadge> executeWithHttpInfo() throws ApiException {
            return getProjectBadgeWithHttpInfo(id, badgeId);
        }

        /**
         * Execute getProjectBadge request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Gets a badge of a project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesBadge> _callback) throws ApiException {
            return getProjectBadgeAsync(id, badgeId, _callback);
        }
    }

    /**
     * Gets a badge of a project.
     * This feature was introduced in GitLab 10.6.
     * @param id The ID or URL-encoded path of the project owned by the authenticated user. (required)
     * @param badgeId The badge ID (required)
     * @return GetProjectBadgeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets a badge of a project. </td><td>  -  </td></tr>
     </table>
     */
    public GetProjectBadgeRequestBuilder getProjectBadge(String id, Integer badgeId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (badgeId == null) throw new IllegalArgumentException("\"badgeId\" is required but got null");
        return new GetProjectBadgeRequestBuilder(id, badgeId);
    }
    private okhttp3.Call listViewableByAuthenticatedUserCall(String id, Integer page, Integer perPage, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/projects/{id}/badges"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listViewableByAuthenticatedUserValidateBeforeCall(String id, Integer page, Integer perPage, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listViewableByAuthenticatedUser(Async)");
        }

        return listViewableByAuthenticatedUserCall(id, page, perPage, name, _callback);

    }


    private ApiResponse<List<APIEntitiesBadge>> listViewableByAuthenticatedUserWithHttpInfo(String id, Integer page, Integer perPage, String name) throws ApiException {
        okhttp3.Call localVarCall = listViewableByAuthenticatedUserValidateBeforeCall(id, page, perPage, name, null);
        Type localVarReturnType = new TypeToken<List<APIEntitiesBadge>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listViewableByAuthenticatedUserAsync(String id, Integer page, Integer perPage, String name, final ApiCallback<List<APIEntitiesBadge>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listViewableByAuthenticatedUserValidateBeforeCall(id, page, perPage, name, _callback);
        Type localVarReturnType = new TypeToken<List<APIEntitiesBadge>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListViewableByAuthenticatedUserRequestBuilder {
        private final String id;
        private Integer page;
        private Integer perPage;
        private String name;

        private ListViewableByAuthenticatedUserRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set page
         * @param page Current page number (optional, default to 1)
         * @return ListViewableByAuthenticatedUserRequestBuilder
         */
        public ListViewableByAuthenticatedUserRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of items per page (optional, default to 20)
         * @return ListViewableByAuthenticatedUserRequestBuilder
         */
        public ListViewableByAuthenticatedUserRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set name
         * @param name Name for the badge (optional)
         * @return ListViewableByAuthenticatedUserRequestBuilder
         */
        public ListViewableByAuthenticatedUserRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for listViewableByAuthenticatedUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Gets a list of project badges viewable by the authenticated user. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listViewableByAuthenticatedUserCall(id, page, perPage, name, _callback);
        }


        /**
         * Execute listViewableByAuthenticatedUser request
         * @return List&lt;APIEntitiesBadge&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Gets a list of project badges viewable by the authenticated user. </td><td>  -  </td></tr>
         </table>
         */
        public List<APIEntitiesBadge> execute() throws ApiException {
            ApiResponse<List<APIEntitiesBadge>> localVarResp = listViewableByAuthenticatedUserWithHttpInfo(id, page, perPage, name);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listViewableByAuthenticatedUser request with HTTP info returned
         * @return ApiResponse&lt;List&lt;APIEntitiesBadge&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Gets a list of project badges viewable by the authenticated user. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<APIEntitiesBadge>> executeWithHttpInfo() throws ApiException {
            return listViewableByAuthenticatedUserWithHttpInfo(id, page, perPage, name);
        }

        /**
         * Execute listViewableByAuthenticatedUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Gets a list of project badges viewable by the authenticated user. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<APIEntitiesBadge>> _callback) throws ApiException {
            return listViewableByAuthenticatedUserAsync(id, page, perPage, name, _callback);
        }
    }

    /**
     * Gets a list of project badges viewable by the authenticated user.
     * This feature was introduced in GitLab 10.6.
     * @param id The ID or URL-encoded path of the project owned by the authenticated user. (required)
     * @return ListViewableByAuthenticatedUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets a list of project badges viewable by the authenticated user. </td><td>  -  </td></tr>
     </table>
     */
    public ListViewableByAuthenticatedUserRequestBuilder listViewableByAuthenticatedUser(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ListViewableByAuthenticatedUserRequestBuilder(id);
    }
    private okhttp3.Call previewBadgeFromGroupCall(String id, String linkUrl, String imageUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/groups/{id}/badges/render"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (linkUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("link_url", linkUrl));
        }

        if (imageUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("image_url", imageUrl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call previewBadgeFromGroupValidateBeforeCall(String id, String linkUrl, String imageUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling previewBadgeFromGroup(Async)");
        }

        // verify the required parameter 'linkUrl' is set
        if (linkUrl == null) {
            throw new ApiException("Missing the required parameter 'linkUrl' when calling previewBadgeFromGroup(Async)");
        }

        // verify the required parameter 'imageUrl' is set
        if (imageUrl == null) {
            throw new ApiException("Missing the required parameter 'imageUrl' when calling previewBadgeFromGroup(Async)");
        }

        return previewBadgeFromGroupCall(id, linkUrl, imageUrl, _callback);

    }


    private ApiResponse<APIEntitiesBasicBadgeDetails> previewBadgeFromGroupWithHttpInfo(String id, String linkUrl, String imageUrl) throws ApiException {
        okhttp3.Call localVarCall = previewBadgeFromGroupValidateBeforeCall(id, linkUrl, imageUrl, null);
        Type localVarReturnType = new TypeToken<APIEntitiesBasicBadgeDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call previewBadgeFromGroupAsync(String id, String linkUrl, String imageUrl, final ApiCallback<APIEntitiesBasicBadgeDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = previewBadgeFromGroupValidateBeforeCall(id, linkUrl, imageUrl, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesBasicBadgeDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PreviewBadgeFromGroupRequestBuilder {
        private final String id;
        private final String linkUrl;
        private final String imageUrl;

        private PreviewBadgeFromGroupRequestBuilder(String id, String linkUrl, String imageUrl) {
            this.id = id;
            this.linkUrl = linkUrl;
            this.imageUrl = imageUrl;
        }

        /**
         * Build call for previewBadgeFromGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Preview a badge from a group. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return previewBadgeFromGroupCall(id, linkUrl, imageUrl, _callback);
        }


        /**
         * Execute previewBadgeFromGroup request
         * @return APIEntitiesBasicBadgeDetails
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Preview a badge from a group. </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesBasicBadgeDetails execute() throws ApiException {
            ApiResponse<APIEntitiesBasicBadgeDetails> localVarResp = previewBadgeFromGroupWithHttpInfo(id, linkUrl, imageUrl);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute previewBadgeFromGroup request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesBasicBadgeDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Preview a badge from a group. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesBasicBadgeDetails> executeWithHttpInfo() throws ApiException {
            return previewBadgeFromGroupWithHttpInfo(id, linkUrl, imageUrl);
        }

        /**
         * Execute previewBadgeFromGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Preview a badge from a group. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesBasicBadgeDetails> _callback) throws ApiException {
            return previewBadgeFromGroupAsync(id, linkUrl, imageUrl, _callback);
        }
    }

    /**
     * Preview a badge from a group.
     * This feature was introduced in GitLab 10.6.
     * @param id The ID or URL-encoded path of the group owned by the authenticated user. (required)
     * @param linkUrl URL of the badge link (required)
     * @param imageUrl URL of the badge image (required)
     * @return PreviewBadgeFromGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Preview a badge from a group. </td><td>  -  </td></tr>
     </table>
     */
    public PreviewBadgeFromGroupRequestBuilder previewBadgeFromGroup(String id, String linkUrl, String imageUrl) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (linkUrl == null) throw new IllegalArgumentException("\"linkUrl\" is required but got null");
            

        if (imageUrl == null) throw new IllegalArgumentException("\"imageUrl\" is required but got null");
            

        return new PreviewBadgeFromGroupRequestBuilder(id, linkUrl, imageUrl);
    }
    private okhttp3.Call removeFromGroupCall(String id, Integer badgeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/groups/{id}/badges/{badge_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "badge_id" + "}", localVarApiClient.escapeString(badgeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFromGroupValidateBeforeCall(String id, Integer badgeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeFromGroup(Async)");
        }

        // verify the required parameter 'badgeId' is set
        if (badgeId == null) {
            throw new ApiException("Missing the required parameter 'badgeId' when calling removeFromGroup(Async)");
        }

        return removeFromGroupCall(id, badgeId, _callback);

    }


    private ApiResponse<Void> removeFromGroupWithHttpInfo(String id, Integer badgeId) throws ApiException {
        okhttp3.Call localVarCall = removeFromGroupValidateBeforeCall(id, badgeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeFromGroupAsync(String id, Integer badgeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFromGroupValidateBeforeCall(id, badgeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveFromGroupRequestBuilder {
        private final String id;
        private final Integer badgeId;

        private RemoveFromGroupRequestBuilder(String id, Integer badgeId) {
            this.id = id;
            this.badgeId = badgeId;
        }

        /**
         * Build call for removeFromGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Removes a badge from the group. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeFromGroupCall(id, badgeId, _callback);
        }


        /**
         * Execute removeFromGroup request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Removes a badge from the group. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeFromGroupWithHttpInfo(id, badgeId);
        }

        /**
         * Execute removeFromGroup request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Removes a badge from the group. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeFromGroupWithHttpInfo(id, badgeId);
        }

        /**
         * Execute removeFromGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Removes a badge from the group. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeFromGroupAsync(id, badgeId, _callback);
        }
    }

    /**
     * Removes a badge from the group.
     * This feature was introduced in GitLab 10.6.
     * @param id The ID or URL-encoded path of the group owned by the authenticated user. (required)
     * @param badgeId The badge ID (required)
     * @return RemoveFromGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Removes a badge from the group. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFromGroupRequestBuilder removeFromGroup(String id, Integer badgeId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (badgeId == null) throw new IllegalArgumentException("\"badgeId\" is required but got null");
        return new RemoveFromGroupRequestBuilder(id, badgeId);
    }
    private okhttp3.Call removeFromProjectCall(String id, Integer badgeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/projects/{id}/badges/{badge_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "badge_id" + "}", localVarApiClient.escapeString(badgeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFromProjectValidateBeforeCall(String id, Integer badgeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeFromProject(Async)");
        }

        // verify the required parameter 'badgeId' is set
        if (badgeId == null) {
            throw new ApiException("Missing the required parameter 'badgeId' when calling removeFromProject(Async)");
        }

        return removeFromProjectCall(id, badgeId, _callback);

    }


    private ApiResponse<Void> removeFromProjectWithHttpInfo(String id, Integer badgeId) throws ApiException {
        okhttp3.Call localVarCall = removeFromProjectValidateBeforeCall(id, badgeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeFromProjectAsync(String id, Integer badgeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFromProjectValidateBeforeCall(id, badgeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveFromProjectRequestBuilder {
        private final String id;
        private final Integer badgeId;

        private RemoveFromProjectRequestBuilder(String id, Integer badgeId) {
            this.id = id;
            this.badgeId = badgeId;
        }

        /**
         * Build call for removeFromProject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Removes a badge from the project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeFromProjectCall(id, badgeId, _callback);
        }


        /**
         * Execute removeFromProject request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Removes a badge from the project. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeFromProjectWithHttpInfo(id, badgeId);
        }

        /**
         * Execute removeFromProject request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Removes a badge from the project. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeFromProjectWithHttpInfo(id, badgeId);
        }

        /**
         * Execute removeFromProject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Removes a badge from the project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeFromProjectAsync(id, badgeId, _callback);
        }
    }

    /**
     * Removes a badge from the project.
     * This feature was introduced in GitLab 10.6.
     * @param id The ID or URL-encoded path of the project owned by the authenticated user. (required)
     * @param badgeId The badge ID (required)
     * @return RemoveFromProjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Removes a badge from the project. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFromProjectRequestBuilder removeFromProject(String id, Integer badgeId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (badgeId == null) throw new IllegalArgumentException("\"badgeId\" is required but got null");
        return new RemoveFromProjectRequestBuilder(id, badgeId);
    }
    private okhttp3.Call renderPreviewFromProjectCall(String id, String linkUrl, String imageUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/projects/{id}/badges/render"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (linkUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("link_url", linkUrl));
        }

        if (imageUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("image_url", imageUrl));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renderPreviewFromProjectValidateBeforeCall(String id, String linkUrl, String imageUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling renderPreviewFromProject(Async)");
        }

        // verify the required parameter 'linkUrl' is set
        if (linkUrl == null) {
            throw new ApiException("Missing the required parameter 'linkUrl' when calling renderPreviewFromProject(Async)");
        }

        // verify the required parameter 'imageUrl' is set
        if (imageUrl == null) {
            throw new ApiException("Missing the required parameter 'imageUrl' when calling renderPreviewFromProject(Async)");
        }

        return renderPreviewFromProjectCall(id, linkUrl, imageUrl, _callback);

    }


    private ApiResponse<APIEntitiesBasicBadgeDetails> renderPreviewFromProjectWithHttpInfo(String id, String linkUrl, String imageUrl) throws ApiException {
        okhttp3.Call localVarCall = renderPreviewFromProjectValidateBeforeCall(id, linkUrl, imageUrl, null);
        Type localVarReturnType = new TypeToken<APIEntitiesBasicBadgeDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call renderPreviewFromProjectAsync(String id, String linkUrl, String imageUrl, final ApiCallback<APIEntitiesBasicBadgeDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = renderPreviewFromProjectValidateBeforeCall(id, linkUrl, imageUrl, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesBasicBadgeDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RenderPreviewFromProjectRequestBuilder {
        private final String id;
        private final String linkUrl;
        private final String imageUrl;

        private RenderPreviewFromProjectRequestBuilder(String id, String linkUrl, String imageUrl) {
            this.id = id;
            this.linkUrl = linkUrl;
            this.imageUrl = imageUrl;
        }

        /**
         * Build call for renderPreviewFromProject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Preview a badge from a project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return renderPreviewFromProjectCall(id, linkUrl, imageUrl, _callback);
        }


        /**
         * Execute renderPreviewFromProject request
         * @return APIEntitiesBasicBadgeDetails
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Preview a badge from a project. </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesBasicBadgeDetails execute() throws ApiException {
            ApiResponse<APIEntitiesBasicBadgeDetails> localVarResp = renderPreviewFromProjectWithHttpInfo(id, linkUrl, imageUrl);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute renderPreviewFromProject request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesBasicBadgeDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Preview a badge from a project. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesBasicBadgeDetails> executeWithHttpInfo() throws ApiException {
            return renderPreviewFromProjectWithHttpInfo(id, linkUrl, imageUrl);
        }

        /**
         * Execute renderPreviewFromProject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Preview a badge from a project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesBasicBadgeDetails> _callback) throws ApiException {
            return renderPreviewFromProjectAsync(id, linkUrl, imageUrl, _callback);
        }
    }

    /**
     * Preview a badge from a project.
     * This feature was introduced in GitLab 10.6.
     * @param id The ID or URL-encoded path of the project owned by the authenticated user. (required)
     * @param linkUrl URL of the badge link (required)
     * @param imageUrl URL of the badge image (required)
     * @return RenderPreviewFromProjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Preview a badge from a project. </td><td>  -  </td></tr>
     </table>
     */
    public RenderPreviewFromProjectRequestBuilder renderPreviewFromProject(String id, String linkUrl, String imageUrl) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (linkUrl == null) throw new IllegalArgumentException("\"linkUrl\" is required but got null");
            

        if (imageUrl == null) throw new IllegalArgumentException("\"imageUrl\" is required but got null");
            

        return new RenderPreviewFromProjectRequestBuilder(id, linkUrl, imageUrl);
    }
    private okhttp3.Call updateGroupBadgeCall(String id, Integer badgeId, BadgesUpdateGroupBadgeRequest badgesUpdateGroupBadgeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = badgesUpdateGroupBadgeRequest;

        // create path and map variables
        String localVarPath = "/api/v4/groups/{id}/badges/{badge_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "badge_id" + "}", localVarApiClient.escapeString(badgeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGroupBadgeValidateBeforeCall(String id, Integer badgeId, BadgesUpdateGroupBadgeRequest badgesUpdateGroupBadgeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateGroupBadge(Async)");
        }

        // verify the required parameter 'badgeId' is set
        if (badgeId == null) {
            throw new ApiException("Missing the required parameter 'badgeId' when calling updateGroupBadge(Async)");
        }

        return updateGroupBadgeCall(id, badgeId, badgesUpdateGroupBadgeRequest, _callback);

    }


    private ApiResponse<APIEntitiesBadge> updateGroupBadgeWithHttpInfo(String id, Integer badgeId, BadgesUpdateGroupBadgeRequest badgesUpdateGroupBadgeRequest) throws ApiException {
        okhttp3.Call localVarCall = updateGroupBadgeValidateBeforeCall(id, badgeId, badgesUpdateGroupBadgeRequest, null);
        Type localVarReturnType = new TypeToken<APIEntitiesBadge>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateGroupBadgeAsync(String id, Integer badgeId, BadgesUpdateGroupBadgeRequest badgesUpdateGroupBadgeRequest, final ApiCallback<APIEntitiesBadge> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGroupBadgeValidateBeforeCall(id, badgeId, badgesUpdateGroupBadgeRequest, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesBadge>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateGroupBadgeRequestBuilder {
        private final String id;
        private final Integer badgeId;
        private String linkUrl;
        private String imageUrl;
        private String name;

        private UpdateGroupBadgeRequestBuilder(String id, Integer badgeId) {
            this.id = id;
            this.badgeId = badgeId;
        }

        /**
         * Set linkUrl
         * @param linkUrl URL of the badge link (optional)
         * @return UpdateGroupBadgeRequestBuilder
         */
        public UpdateGroupBadgeRequestBuilder linkUrl(String linkUrl) {
            this.linkUrl = linkUrl;
            return this;
        }
        
        /**
         * Set imageUrl
         * @param imageUrl URL of the badge image (optional)
         * @return UpdateGroupBadgeRequestBuilder
         */
        public UpdateGroupBadgeRequestBuilder imageUrl(String imageUrl) {
            this.imageUrl = imageUrl;
            return this;
        }
        
        /**
         * Set name
         * @param name Name for the badge (optional)
         * @return UpdateGroupBadgeRequestBuilder
         */
        public UpdateGroupBadgeRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for updateGroupBadge
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updates a badge of a group. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BadgesUpdateGroupBadgeRequest badgesUpdateGroupBadgeRequest = buildBodyParams();
            return updateGroupBadgeCall(id, badgeId, badgesUpdateGroupBadgeRequest, _callback);
        }

        private BadgesUpdateGroupBadgeRequest buildBodyParams() {
            BadgesUpdateGroupBadgeRequest badgesUpdateGroupBadgeRequest = new BadgesUpdateGroupBadgeRequest();
            badgesUpdateGroupBadgeRequest.linkUrl(this.linkUrl);
            badgesUpdateGroupBadgeRequest.imageUrl(this.imageUrl);
            badgesUpdateGroupBadgeRequest.name(this.name);
            return badgesUpdateGroupBadgeRequest;
        }

        /**
         * Execute updateGroupBadge request
         * @return APIEntitiesBadge
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updates a badge of a group. </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesBadge execute() throws ApiException {
            BadgesUpdateGroupBadgeRequest badgesUpdateGroupBadgeRequest = buildBodyParams();
            ApiResponse<APIEntitiesBadge> localVarResp = updateGroupBadgeWithHttpInfo(id, badgeId, badgesUpdateGroupBadgeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateGroupBadge request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesBadge&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updates a badge of a group. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesBadge> executeWithHttpInfo() throws ApiException {
            BadgesUpdateGroupBadgeRequest badgesUpdateGroupBadgeRequest = buildBodyParams();
            return updateGroupBadgeWithHttpInfo(id, badgeId, badgesUpdateGroupBadgeRequest);
        }

        /**
         * Execute updateGroupBadge request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updates a badge of a group. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesBadge> _callback) throws ApiException {
            BadgesUpdateGroupBadgeRequest badgesUpdateGroupBadgeRequest = buildBodyParams();
            return updateGroupBadgeAsync(id, badgeId, badgesUpdateGroupBadgeRequest, _callback);
        }
    }

    /**
     * Updates a badge of a group.
     * This feature was introduced in GitLab 10.6.
     * @param id The ID or URL-encoded path of the group owned by the authenticated user. (required)
     * @param badgeId  (required)
     * @return UpdateGroupBadgeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updates a badge of a group. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateGroupBadgeRequestBuilder updateGroupBadge(String id, Integer badgeId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (badgeId == null) throw new IllegalArgumentException("\"badgeId\" is required but got null");
        return new UpdateGroupBadgeRequestBuilder(id, badgeId);
    }
    private okhttp3.Call updateProjectBadgeCall(String id, Integer badgeId, BadgesUpdateProjectBadgeRequest badgesUpdateProjectBadgeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = badgesUpdateProjectBadgeRequest;

        // create path and map variables
        String localVarPath = "/api/v4/projects/{id}/badges/{badge_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "badge_id" + "}", localVarApiClient.escapeString(badgeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProjectBadgeValidateBeforeCall(String id, Integer badgeId, BadgesUpdateProjectBadgeRequest badgesUpdateProjectBadgeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateProjectBadge(Async)");
        }

        // verify the required parameter 'badgeId' is set
        if (badgeId == null) {
            throw new ApiException("Missing the required parameter 'badgeId' when calling updateProjectBadge(Async)");
        }

        return updateProjectBadgeCall(id, badgeId, badgesUpdateProjectBadgeRequest, _callback);

    }


    private ApiResponse<APIEntitiesBadge> updateProjectBadgeWithHttpInfo(String id, Integer badgeId, BadgesUpdateProjectBadgeRequest badgesUpdateProjectBadgeRequest) throws ApiException {
        okhttp3.Call localVarCall = updateProjectBadgeValidateBeforeCall(id, badgeId, badgesUpdateProjectBadgeRequest, null);
        Type localVarReturnType = new TypeToken<APIEntitiesBadge>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateProjectBadgeAsync(String id, Integer badgeId, BadgesUpdateProjectBadgeRequest badgesUpdateProjectBadgeRequest, final ApiCallback<APIEntitiesBadge> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProjectBadgeValidateBeforeCall(id, badgeId, badgesUpdateProjectBadgeRequest, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesBadge>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateProjectBadgeRequestBuilder {
        private final String id;
        private final Integer badgeId;
        private String linkUrl;
        private String imageUrl;
        private String name;

        private UpdateProjectBadgeRequestBuilder(String id, Integer badgeId) {
            this.id = id;
            this.badgeId = badgeId;
        }

        /**
         * Set linkUrl
         * @param linkUrl URL of the badge link (optional)
         * @return UpdateProjectBadgeRequestBuilder
         */
        public UpdateProjectBadgeRequestBuilder linkUrl(String linkUrl) {
            this.linkUrl = linkUrl;
            return this;
        }
        
        /**
         * Set imageUrl
         * @param imageUrl URL of the badge image (optional)
         * @return UpdateProjectBadgeRequestBuilder
         */
        public UpdateProjectBadgeRequestBuilder imageUrl(String imageUrl) {
            this.imageUrl = imageUrl;
            return this;
        }
        
        /**
         * Set name
         * @param name Name for the badge (optional)
         * @return UpdateProjectBadgeRequestBuilder
         */
        public UpdateProjectBadgeRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for updateProjectBadge
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updates a badge of a project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BadgesUpdateProjectBadgeRequest badgesUpdateProjectBadgeRequest = buildBodyParams();
            return updateProjectBadgeCall(id, badgeId, badgesUpdateProjectBadgeRequest, _callback);
        }

        private BadgesUpdateProjectBadgeRequest buildBodyParams() {
            BadgesUpdateProjectBadgeRequest badgesUpdateProjectBadgeRequest = new BadgesUpdateProjectBadgeRequest();
            badgesUpdateProjectBadgeRequest.linkUrl(this.linkUrl);
            badgesUpdateProjectBadgeRequest.imageUrl(this.imageUrl);
            badgesUpdateProjectBadgeRequest.name(this.name);
            return badgesUpdateProjectBadgeRequest;
        }

        /**
         * Execute updateProjectBadge request
         * @return APIEntitiesBadge
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updates a badge of a project. </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesBadge execute() throws ApiException {
            BadgesUpdateProjectBadgeRequest badgesUpdateProjectBadgeRequest = buildBodyParams();
            ApiResponse<APIEntitiesBadge> localVarResp = updateProjectBadgeWithHttpInfo(id, badgeId, badgesUpdateProjectBadgeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateProjectBadge request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesBadge&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updates a badge of a project. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesBadge> executeWithHttpInfo() throws ApiException {
            BadgesUpdateProjectBadgeRequest badgesUpdateProjectBadgeRequest = buildBodyParams();
            return updateProjectBadgeWithHttpInfo(id, badgeId, badgesUpdateProjectBadgeRequest);
        }

        /**
         * Execute updateProjectBadge request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Updates a badge of a project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesBadge> _callback) throws ApiException {
            BadgesUpdateProjectBadgeRequest badgesUpdateProjectBadgeRequest = buildBodyParams();
            return updateProjectBadgeAsync(id, badgeId, badgesUpdateProjectBadgeRequest, _callback);
        }
    }

    /**
     * Updates a badge of a project.
     * This feature was introduced in GitLab 10.6.
     * @param id The ID or URL-encoded path of the project owned by the authenticated user. (required)
     * @param badgeId  (required)
     * @return UpdateProjectBadgeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updates a badge of a project. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateProjectBadgeRequestBuilder updateProjectBadge(String id, Integer badgeId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (badgeId == null) throw new IllegalArgumentException("\"badgeId\" is required but got null");
        return new UpdateProjectBadgeRequestBuilder(id, badgeId);
    }
}
