/*
 * GitLab API
 * An OpenAPI definition for the GitLab REST API. Few API resources or endpoints are currently included. The intent is to expand this to match the entire Markdown documentation of the API: <https://docs.gitlab.com/ee/api/>. Contributions are welcome.  When viewing this on gitlab.com, you can test API calls directly from the browser against the `gitlab.com` instance, if you are logged in. The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie), so each request is made using your account.  Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html) 
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.APIEntitiesAccessRequester;
import com.konfigthis.client.model.AccessrequestsApproveForUserRequest;
import com.konfigthis.client.model.AccessrequestsApproveForUserRequest1;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AccessRequestsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccessRequestsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AccessRequestsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKeyAuth() == null) {
            throw new IllegalArgumentException("\"Private-Token\" is required but no API key was provided. Please set \"Private-Token\" with ApiClient#setApiKeyAuth(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call approveForUserCall(String id, Integer userId, AccessrequestsApproveForUserRequest accessrequestsApproveForUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accessrequestsApproveForUserRequest;

        // create path and map variables
        String localVarPath = "/api/v4/groups/{id}/access_requests/{user_id}/approve"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "successfull_response"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call approveForUserValidateBeforeCall(String id, Integer userId, AccessrequestsApproveForUserRequest accessrequestsApproveForUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling approveForUser(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling approveForUser(Async)");
        }

        return approveForUserCall(id, userId, accessrequestsApproveForUserRequest, _callback);

    }


    private ApiResponse<APIEntitiesAccessRequester> approveForUserWithHttpInfo(String id, Integer userId, AccessrequestsApproveForUserRequest accessrequestsApproveForUserRequest) throws ApiException {
        okhttp3.Call localVarCall = approveForUserValidateBeforeCall(id, userId, accessrequestsApproveForUserRequest, null);
        Type localVarReturnType = new TypeToken<APIEntitiesAccessRequester>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call approveForUserAsync(String id, Integer userId, AccessrequestsApproveForUserRequest accessrequestsApproveForUserRequest, final ApiCallback<APIEntitiesAccessRequester> _callback) throws ApiException {

        okhttp3.Call localVarCall = approveForUserValidateBeforeCall(id, userId, accessrequestsApproveForUserRequest, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesAccessRequester>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ApproveForUserRequestBuilder {
        private final String id;
        private final Integer userId;
        private Integer accessLevel;

        private ApproveForUserRequestBuilder(String id, Integer userId) {
            this.id = id;
            this.userId = userId;
        }

        /**
         * Set accessLevel
         * @param accessLevel A valid access level (defaults: &#x60;30&#x60;, the Developer role) (optional, default to 30)
         * @return ApproveForUserRequestBuilder
         */
        public ApproveForUserRequestBuilder accessLevel(Integer accessLevel) {
            this.accessLevel = accessLevel;
            return this;
        }
        
        /**
         * Build call for approveForUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccessrequestsApproveForUserRequest accessrequestsApproveForUserRequest = buildBodyParams();
            return approveForUserCall(id, userId, accessrequestsApproveForUserRequest, _callback);
        }

        private AccessrequestsApproveForUserRequest buildBodyParams() {
            AccessrequestsApproveForUserRequest accessrequestsApproveForUserRequest = new AccessrequestsApproveForUserRequest();
            accessrequestsApproveForUserRequest.accessLevel(this.accessLevel);
            return accessrequestsApproveForUserRequest;
        }

        /**
         * Execute approveForUser request
         * @return APIEntitiesAccessRequester
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesAccessRequester execute() throws ApiException {
            AccessrequestsApproveForUserRequest accessrequestsApproveForUserRequest = buildBodyParams();
            ApiResponse<APIEntitiesAccessRequester> localVarResp = approveForUserWithHttpInfo(id, userId, accessrequestsApproveForUserRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute approveForUser request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesAccessRequester&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesAccessRequester> executeWithHttpInfo() throws ApiException {
            AccessrequestsApproveForUserRequest accessrequestsApproveForUserRequest = buildBodyParams();
            return approveForUserWithHttpInfo(id, userId, accessrequestsApproveForUserRequest);
        }

        /**
         * Execute approveForUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesAccessRequester> _callback) throws ApiException {
            AccessrequestsApproveForUserRequest accessrequestsApproveForUserRequest = buildBodyParams();
            return approveForUserAsync(id, userId, accessrequestsApproveForUserRequest, _callback);
        }
    }

    /**
     * Approves an access request for the given user.
     * This feature was introduced in GitLab 8.11.
     * @param id The ID or URL-encoded path of the group owned by the authenticated user (required)
     * @param userId The user ID of the access requester (required)
     * @return ApproveForUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApproveForUserRequestBuilder approveForUser(String id, Integer userId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
        return new ApproveForUserRequestBuilder(id, userId);
    }
    private okhttp3.Call approveForUser_0Call(String id, Integer userId, AccessrequestsApproveForUserRequest1 accessrequestsApproveForUserRequest1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accessrequestsApproveForUserRequest1;

        // create path and map variables
        String localVarPath = "/api/v4/projects/{id}/access_requests/{user_id}/approve"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "successfull_response"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call approveForUser_0ValidateBeforeCall(String id, Integer userId, AccessrequestsApproveForUserRequest1 accessrequestsApproveForUserRequest1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling approveForUser_0(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling approveForUser_0(Async)");
        }

        return approveForUser_0Call(id, userId, accessrequestsApproveForUserRequest1, _callback);

    }


    private ApiResponse<APIEntitiesAccessRequester> approveForUser_0WithHttpInfo(String id, Integer userId, AccessrequestsApproveForUserRequest1 accessrequestsApproveForUserRequest1) throws ApiException {
        okhttp3.Call localVarCall = approveForUser_0ValidateBeforeCall(id, userId, accessrequestsApproveForUserRequest1, null);
        Type localVarReturnType = new TypeToken<APIEntitiesAccessRequester>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call approveForUser_0Async(String id, Integer userId, AccessrequestsApproveForUserRequest1 accessrequestsApproveForUserRequest1, final ApiCallback<APIEntitiesAccessRequester> _callback) throws ApiException {

        okhttp3.Call localVarCall = approveForUser_0ValidateBeforeCall(id, userId, accessrequestsApproveForUserRequest1, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesAccessRequester>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ApproveForUser0RequestBuilder {
        private final String id;
        private final Integer userId;
        private Integer accessLevel;

        private ApproveForUser0RequestBuilder(String id, Integer userId) {
            this.id = id;
            this.userId = userId;
        }

        /**
         * Set accessLevel
         * @param accessLevel A valid access level (defaults: &#x60;30&#x60;, the Developer role) (optional, default to 30)
         * @return ApproveForUser0RequestBuilder
         */
        public ApproveForUser0RequestBuilder accessLevel(Integer accessLevel) {
            this.accessLevel = accessLevel;
            return this;
        }
        
        /**
         * Build call for approveForUser_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccessrequestsApproveForUserRequest1 accessrequestsApproveForUserRequest1 = buildBodyParams();
            return approveForUser_0Call(id, userId, accessrequestsApproveForUserRequest1, _callback);
        }

        private AccessrequestsApproveForUserRequest1 buildBodyParams() {
            AccessrequestsApproveForUserRequest1 accessrequestsApproveForUserRequest1 = new AccessrequestsApproveForUserRequest1();
            accessrequestsApproveForUserRequest1.accessLevel(this.accessLevel);
            return accessrequestsApproveForUserRequest1;
        }

        /**
         * Execute approveForUser_0 request
         * @return APIEntitiesAccessRequester
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesAccessRequester execute() throws ApiException {
            AccessrequestsApproveForUserRequest1 accessrequestsApproveForUserRequest1 = buildBodyParams();
            ApiResponse<APIEntitiesAccessRequester> localVarResp = approveForUser_0WithHttpInfo(id, userId, accessrequestsApproveForUserRequest1);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute approveForUser_0 request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesAccessRequester&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesAccessRequester> executeWithHttpInfo() throws ApiException {
            AccessrequestsApproveForUserRequest1 accessrequestsApproveForUserRequest1 = buildBodyParams();
            return approveForUser_0WithHttpInfo(id, userId, accessrequestsApproveForUserRequest1);
        }

        /**
         * Execute approveForUser_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesAccessRequester> _callback) throws ApiException {
            AccessrequestsApproveForUserRequest1 accessrequestsApproveForUserRequest1 = buildBodyParams();
            return approveForUser_0Async(id, userId, accessrequestsApproveForUserRequest1, _callback);
        }
    }

    /**
     * Approves an access request for the given user.
     * This feature was introduced in GitLab 8.11.
     * @param id The ID or URL-encoded path of the project owned by the authenticated user (required)
     * @param userId The user ID of the access requester (required)
     * @return ApproveForUser0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApproveForUser0RequestBuilder approveForUser_0(String id, Integer userId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
        return new ApproveForUser0RequestBuilder(id, userId);
    }
    private okhttp3.Call denyAccessToUserCall(String id, Integer userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/groups/{id}/access_requests/{user_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call denyAccessToUserValidateBeforeCall(String id, Integer userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling denyAccessToUser(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling denyAccessToUser(Async)");
        }

        return denyAccessToUserCall(id, userId, _callback);

    }


    private ApiResponse<Void> denyAccessToUserWithHttpInfo(String id, Integer userId) throws ApiException {
        okhttp3.Call localVarCall = denyAccessToUserValidateBeforeCall(id, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call denyAccessToUserAsync(String id, Integer userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = denyAccessToUserValidateBeforeCall(id, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DenyAccessToUserRequestBuilder {
        private final String id;
        private final Integer userId;

        private DenyAccessToUserRequestBuilder(String id, Integer userId) {
            this.id = id;
            this.userId = userId;
        }

        /**
         * Build call for denyAccessToUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Denies an access request for the given user. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return denyAccessToUserCall(id, userId, _callback);
        }


        /**
         * Execute denyAccessToUser request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Denies an access request for the given user. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            denyAccessToUserWithHttpInfo(id, userId);
        }

        /**
         * Execute denyAccessToUser request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Denies an access request for the given user. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return denyAccessToUserWithHttpInfo(id, userId);
        }

        /**
         * Execute denyAccessToUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Denies an access request for the given user. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return denyAccessToUserAsync(id, userId, _callback);
        }
    }

    /**
     * Denies an access request for the given user.
     * This feature was introduced in GitLab 8.11.
     * @param id The ID or URL-encoded path of the group owned by the authenticated user (required)
     * @param userId The user ID of the access requester (required)
     * @return DenyAccessToUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Denies an access request for the given user. </td><td>  -  </td></tr>
     </table>
     */
    public DenyAccessToUserRequestBuilder denyAccessToUser(String id, Integer userId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
        return new DenyAccessToUserRequestBuilder(id, userId);
    }
    private okhttp3.Call denyAccessToUser_0Call(String id, Integer userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/projects/{id}/access_requests/{user_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call denyAccessToUser_0ValidateBeforeCall(String id, Integer userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling denyAccessToUser_0(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling denyAccessToUser_0(Async)");
        }

        return denyAccessToUser_0Call(id, userId, _callback);

    }


    private ApiResponse<Void> denyAccessToUser_0WithHttpInfo(String id, Integer userId) throws ApiException {
        okhttp3.Call localVarCall = denyAccessToUser_0ValidateBeforeCall(id, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call denyAccessToUser_0Async(String id, Integer userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = denyAccessToUser_0ValidateBeforeCall(id, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DenyAccessToUser0RequestBuilder {
        private final String id;
        private final Integer userId;

        private DenyAccessToUser0RequestBuilder(String id, Integer userId) {
            this.id = id;
            this.userId = userId;
        }

        /**
         * Build call for denyAccessToUser_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Denies an access request for the given user. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return denyAccessToUser_0Call(id, userId, _callback);
        }


        /**
         * Execute denyAccessToUser_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Denies an access request for the given user. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            denyAccessToUser_0WithHttpInfo(id, userId);
        }

        /**
         * Execute denyAccessToUser_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Denies an access request for the given user. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return denyAccessToUser_0WithHttpInfo(id, userId);
        }

        /**
         * Execute denyAccessToUser_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Denies an access request for the given user. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return denyAccessToUser_0Async(id, userId, _callback);
        }
    }

    /**
     * Denies an access request for the given user.
     * This feature was introduced in GitLab 8.11.
     * @param id The ID or URL-encoded path of the project owned by the authenticated user (required)
     * @param userId The user ID of the access requester (required)
     * @return DenyAccessToUser0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Denies an access request for the given user. </td><td>  -  </td></tr>
     </table>
     */
    public DenyAccessToUser0RequestBuilder denyAccessToUser_0(String id, Integer userId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
        return new DenyAccessToUser0RequestBuilder(id, userId);
    }
    private okhttp3.Call getListCall(String id, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/groups/{id}/access_requests"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListValidateBeforeCall(String id, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getList(Async)");
        }

        return getListCall(id, page, perPage, _callback);

    }


    private ApiResponse<APIEntitiesAccessRequester> getListWithHttpInfo(String id, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getListValidateBeforeCall(id, page, perPage, null);
        Type localVarReturnType = new TypeToken<APIEntitiesAccessRequester>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListAsync(String id, Integer page, Integer perPage, final ApiCallback<APIEntitiesAccessRequester> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListValidateBeforeCall(id, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesAccessRequester>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListRequestBuilder {
        private final String id;
        private Integer page;
        private Integer perPage;

        private GetListRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set page
         * @param page Current page number (optional, default to 1)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of items per page (optional, default to 20)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Gets a list of access requests for a group. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListCall(id, page, perPage, _callback);
        }


        /**
         * Execute getList request
         * @return APIEntitiesAccessRequester
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Gets a list of access requests for a group. </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesAccessRequester execute() throws ApiException {
            ApiResponse<APIEntitiesAccessRequester> localVarResp = getListWithHttpInfo(id, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getList request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesAccessRequester&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Gets a list of access requests for a group. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesAccessRequester> executeWithHttpInfo() throws ApiException {
            return getListWithHttpInfo(id, page, perPage);
        }

        /**
         * Execute getList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Gets a list of access requests for a group. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesAccessRequester> _callback) throws ApiException {
            return getListAsync(id, page, perPage, _callback);
        }
    }

    /**
     * Gets a list of access requests for a group.
     * This feature was introduced in GitLab 8.11.
     * @param id The ID or URL-encoded path of the group owned by the authenticated user (required)
     * @return GetListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets a list of access requests for a group. </td><td>  -  </td></tr>
     </table>
     */
    public GetListRequestBuilder getList(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetListRequestBuilder(id);
    }
    private okhttp3.Call getList_0Call(String id, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/projects/{id}/access_requests"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getList_0ValidateBeforeCall(String id, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getList_0(Async)");
        }

        return getList_0Call(id, page, perPage, _callback);

    }


    private ApiResponse<APIEntitiesAccessRequester> getList_0WithHttpInfo(String id, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getList_0ValidateBeforeCall(id, page, perPage, null);
        Type localVarReturnType = new TypeToken<APIEntitiesAccessRequester>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getList_0Async(String id, Integer page, Integer perPage, final ApiCallback<APIEntitiesAccessRequester> _callback) throws ApiException {

        okhttp3.Call localVarCall = getList_0ValidateBeforeCall(id, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesAccessRequester>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetList0RequestBuilder {
        private final String id;
        private Integer page;
        private Integer perPage;

        private GetList0RequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set page
         * @param page Current page number (optional, default to 1)
         * @return GetList0RequestBuilder
         */
        public GetList0RequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of items per page (optional, default to 20)
         * @return GetList0RequestBuilder
         */
        public GetList0RequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getList_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Gets a list of access requests for a project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getList_0Call(id, page, perPage, _callback);
        }


        /**
         * Execute getList_0 request
         * @return APIEntitiesAccessRequester
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Gets a list of access requests for a project. </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesAccessRequester execute() throws ApiException {
            ApiResponse<APIEntitiesAccessRequester> localVarResp = getList_0WithHttpInfo(id, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getList_0 request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesAccessRequester&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Gets a list of access requests for a project. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesAccessRequester> executeWithHttpInfo() throws ApiException {
            return getList_0WithHttpInfo(id, page, perPage);
        }

        /**
         * Execute getList_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Gets a list of access requests for a project. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesAccessRequester> _callback) throws ApiException {
            return getList_0Async(id, page, perPage, _callback);
        }
    }

    /**
     * Gets a list of access requests for a project.
     * This feature was introduced in GitLab 8.11.
     * @param id The ID or URL-encoded path of the project owned by the authenticated user (required)
     * @return GetList0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets a list of access requests for a project. </td><td>  -  </td></tr>
     </table>
     */
    public GetList0RequestBuilder getList_0(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetList0RequestBuilder(id);
    }
    private okhttp3.Call requestAccessToGroupCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/groups/{id}/access_requests"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "successfull_response"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestAccessToGroupValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling requestAccessToGroup(Async)");
        }

        return requestAccessToGroupCall(id, _callback);

    }


    private ApiResponse<APIEntitiesAccessRequester> requestAccessToGroupWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = requestAccessToGroupValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<APIEntitiesAccessRequester>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call requestAccessToGroupAsync(String id, final ApiCallback<APIEntitiesAccessRequester> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestAccessToGroupValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesAccessRequester>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RequestAccessToGroupRequestBuilder {
        private final String id;

        private RequestAccessToGroupRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for requestAccessToGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return requestAccessToGroupCall(id, _callback);
        }


        /**
         * Execute requestAccessToGroup request
         * @return APIEntitiesAccessRequester
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesAccessRequester execute() throws ApiException {
            ApiResponse<APIEntitiesAccessRequester> localVarResp = requestAccessToGroupWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute requestAccessToGroup request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesAccessRequester&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesAccessRequester> executeWithHttpInfo() throws ApiException {
            return requestAccessToGroupWithHttpInfo(id);
        }

        /**
         * Execute requestAccessToGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesAccessRequester> _callback) throws ApiException {
            return requestAccessToGroupAsync(id, _callback);
        }
    }

    /**
     * Requests access for the authenticated user to a group.
     * This feature was introduced in GitLab 8.11.
     * @param id The ID or URL-encoded path of the group owned by the authenticated user (required)
     * @return RequestAccessToGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public RequestAccessToGroupRequestBuilder requestAccessToGroup(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new RequestAccessToGroupRequestBuilder(id);
    }
    private okhttp3.Call requestAccessToProjectCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/projects/{id}/access_requests"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "successfull_response"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestAccessToProjectValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling requestAccessToProject(Async)");
        }

        return requestAccessToProjectCall(id, _callback);

    }


    private ApiResponse<APIEntitiesAccessRequester> requestAccessToProjectWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = requestAccessToProjectValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<APIEntitiesAccessRequester>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call requestAccessToProjectAsync(String id, final ApiCallback<APIEntitiesAccessRequester> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestAccessToProjectValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesAccessRequester>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RequestAccessToProjectRequestBuilder {
        private final String id;

        private RequestAccessToProjectRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for requestAccessToProject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return requestAccessToProjectCall(id, _callback);
        }


        /**
         * Execute requestAccessToProject request
         * @return APIEntitiesAccessRequester
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesAccessRequester execute() throws ApiException {
            ApiResponse<APIEntitiesAccessRequester> localVarResp = requestAccessToProjectWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute requestAccessToProject request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesAccessRequester&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesAccessRequester> executeWithHttpInfo() throws ApiException {
            return requestAccessToProjectWithHttpInfo(id);
        }

        /**
         * Execute requestAccessToProject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesAccessRequester> _callback) throws ApiException {
            return requestAccessToProjectAsync(id, _callback);
        }
    }

    /**
     * Requests access for the authenticated user to a project.
     * This feature was introduced in GitLab 8.11.
     * @param id The ID or URL-encoded path of the project owned by the authenticated user (required)
     * @return RequestAccessToProjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public RequestAccessToProjectRequestBuilder requestAccessToProject(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new RequestAccessToProjectRequestBuilder(id);
    }
}
