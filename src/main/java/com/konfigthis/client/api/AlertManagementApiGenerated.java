/*
 * GitLab API
 * An OpenAPI definition for the GitLab REST API. Few API resources or endpoints are currently included. The intent is to expand this to match the entire Markdown documentation of the API: <https://docs.gitlab.com/ee/api/>. Contributions are welcome.  When viewing this on gitlab.com, you can test API calls directly from the browser against the `gitlab.com` instance, if you are logged in. The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie), so each request is made using your account.  Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html) 
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.APIEntitiesMetricImage;
import com.konfigthis.client.model.AlertmanagementUpdateMetricImageRequest;
import com.konfigthis.client.model.AlertmanagementUploadMetricImageRequest;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AlertManagementApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AlertManagementApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AlertManagementApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKeyAuth() == null) {
            throw new IllegalArgumentException("\"Private-Token\" is required but no API key was provided. Please set \"Private-Token\" with ApiClient#setApiKeyAuth(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call authorizeMetricImageUploadCall(String id, Integer alertIid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/projects/{id}/alert_management_alerts/{alert_iid}/metric_images/authorize"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "alert_iid" + "}", localVarApiClient.escapeString(alertIid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authorizeMetricImageUploadValidateBeforeCall(String id, Integer alertIid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling authorizeMetricImageUpload(Async)");
        }

        // verify the required parameter 'alertIid' is set
        if (alertIid == null) {
            throw new ApiException("Missing the required parameter 'alertIid' when calling authorizeMetricImageUpload(Async)");
        }

        return authorizeMetricImageUploadCall(id, alertIid, _callback);

    }


    private ApiResponse<Void> authorizeMetricImageUploadWithHttpInfo(String id, Integer alertIid) throws ApiException {
        okhttp3.Call localVarCall = authorizeMetricImageUploadValidateBeforeCall(id, alertIid, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call authorizeMetricImageUploadAsync(String id, Integer alertIid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = authorizeMetricImageUploadValidateBeforeCall(id, alertIid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AuthorizeMetricImageUploadRequestBuilder {
        private final String id;
        private final Integer alertIid;

        private AuthorizeMetricImageUploadRequestBuilder(String id, Integer alertIid) {
            this.id = id;
            this.alertIid = alertIid;
        }

        /**
         * Build call for authorizeMetricImageUpload
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Workhorse authorize metric image file upload </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return authorizeMetricImageUploadCall(id, alertIid, _callback);
        }


        /**
         * Execute authorizeMetricImageUpload request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Workhorse authorize metric image file upload </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            authorizeMetricImageUploadWithHttpInfo(id, alertIid);
        }

        /**
         * Execute authorizeMetricImageUpload request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Workhorse authorize metric image file upload </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return authorizeMetricImageUploadWithHttpInfo(id, alertIid);
        }

        /**
         * Execute authorizeMetricImageUpload request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Workhorse authorize metric image file upload </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return authorizeMetricImageUploadAsync(id, alertIid, _callback);
        }
    }

    /**
     * 
     * Workhorse authorize metric image file upload
     * @param id The ID or URL-encoded path of the project (required)
     * @param alertIid The IID of the Alert (required)
     * @return AuthorizeMetricImageUploadRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Workhorse authorize metric image file upload </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public AuthorizeMetricImageUploadRequestBuilder authorizeMetricImageUpload(String id, Integer alertIid) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (alertIid == null) throw new IllegalArgumentException("\"alertIid\" is required but got null");
        return new AuthorizeMetricImageUploadRequestBuilder(id, alertIid);
    }
    private okhttp3.Call getMetricImagesForAlertCall(String id, Integer alertIid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/projects/{id}/alert_management_alerts/{alert_iid}/metric_images"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "alert_iid" + "}", localVarApiClient.escapeString(alertIid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMetricImagesForAlertValidateBeforeCall(String id, Integer alertIid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getMetricImagesForAlert(Async)");
        }

        // verify the required parameter 'alertIid' is set
        if (alertIid == null) {
            throw new ApiException("Missing the required parameter 'alertIid' when calling getMetricImagesForAlert(Async)");
        }

        return getMetricImagesForAlertCall(id, alertIid, _callback);

    }


    private ApiResponse<List<APIEntitiesMetricImage>> getMetricImagesForAlertWithHttpInfo(String id, Integer alertIid) throws ApiException {
        okhttp3.Call localVarCall = getMetricImagesForAlertValidateBeforeCall(id, alertIid, null);
        Type localVarReturnType = new TypeToken<List<APIEntitiesMetricImage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMetricImagesForAlertAsync(String id, Integer alertIid, final ApiCallback<List<APIEntitiesMetricImage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMetricImagesForAlertValidateBeforeCall(id, alertIid, _callback);
        Type localVarReturnType = new TypeToken<List<APIEntitiesMetricImage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMetricImagesForAlertRequestBuilder {
        private final String id;
        private final Integer alertIid;

        private GetMetricImagesForAlertRequestBuilder(String id, Integer alertIid) {
            this.id = id;
            this.alertIid = alertIid;
        }

        /**
         * Build call for getMetricImagesForAlert
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Metric Images for alert </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMetricImagesForAlertCall(id, alertIid, _callback);
        }


        /**
         * Execute getMetricImagesForAlert request
         * @return List&lt;APIEntitiesMetricImage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Metric Images for alert </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public List<APIEntitiesMetricImage> execute() throws ApiException {
            ApiResponse<List<APIEntitiesMetricImage>> localVarResp = getMetricImagesForAlertWithHttpInfo(id, alertIid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMetricImagesForAlert request with HTTP info returned
         * @return ApiResponse&lt;List&lt;APIEntitiesMetricImage&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Metric Images for alert </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<APIEntitiesMetricImage>> executeWithHttpInfo() throws ApiException {
            return getMetricImagesForAlertWithHttpInfo(id, alertIid);
        }

        /**
         * Execute getMetricImagesForAlert request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Metric Images for alert </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<APIEntitiesMetricImage>> _callback) throws ApiException {
            return getMetricImagesForAlertAsync(id, alertIid, _callback);
        }
    }

    /**
     * 
     * Metric Images for alert
     * @param id The ID or URL-encoded path of the project (required)
     * @param alertIid The IID of the Alert (required)
     * @return GetMetricImagesForAlertRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Metric Images for alert </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public GetMetricImagesForAlertRequestBuilder getMetricImagesForAlert(String id, Integer alertIid) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (alertIid == null) throw new IllegalArgumentException("\"alertIid\" is required but got null");
        return new GetMetricImagesForAlertRequestBuilder(id, alertIid);
    }
    private okhttp3.Call removeMetricImageCall(String id, Integer alertIid, Integer metricImageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/projects/{id}/alert_management_alerts/{alert_iid}/metric_images/{metric_image_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "alert_iid" + "}", localVarApiClient.escapeString(alertIid.toString()))
            .replace("{" + "metric_image_id" + "}", localVarApiClient.escapeString(metricImageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeMetricImageValidateBeforeCall(String id, Integer alertIid, Integer metricImageId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeMetricImage(Async)");
        }

        // verify the required parameter 'alertIid' is set
        if (alertIid == null) {
            throw new ApiException("Missing the required parameter 'alertIid' when calling removeMetricImage(Async)");
        }

        // verify the required parameter 'metricImageId' is set
        if (metricImageId == null) {
            throw new ApiException("Missing the required parameter 'metricImageId' when calling removeMetricImage(Async)");
        }

        return removeMetricImageCall(id, alertIid, metricImageId, _callback);

    }


    private ApiResponse<APIEntitiesMetricImage> removeMetricImageWithHttpInfo(String id, Integer alertIid, Integer metricImageId) throws ApiException {
        okhttp3.Call localVarCall = removeMetricImageValidateBeforeCall(id, alertIid, metricImageId, null);
        Type localVarReturnType = new TypeToken<APIEntitiesMetricImage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeMetricImageAsync(String id, Integer alertIid, Integer metricImageId, final ApiCallback<APIEntitiesMetricImage> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeMetricImageValidateBeforeCall(id, alertIid, metricImageId, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesMetricImage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveMetricImageRequestBuilder {
        private final String id;
        private final Integer alertIid;
        private final Integer metricImageId;

        private RemoveMetricImageRequestBuilder(String id, Integer alertIid, Integer metricImageId) {
            this.id = id;
            this.alertIid = alertIid;
            this.metricImageId = metricImageId;
        }

        /**
         * Build call for removeMetricImage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Remove a metric image for an alert </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeMetricImageCall(id, alertIid, metricImageId, _callback);
        }


        /**
         * Execute removeMetricImage request
         * @return APIEntitiesMetricImage
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Remove a metric image for an alert </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesMetricImage execute() throws ApiException {
            ApiResponse<APIEntitiesMetricImage> localVarResp = removeMetricImageWithHttpInfo(id, alertIid, metricImageId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeMetricImage request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesMetricImage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Remove a metric image for an alert </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesMetricImage> executeWithHttpInfo() throws ApiException {
            return removeMetricImageWithHttpInfo(id, alertIid, metricImageId);
        }

        /**
         * Execute removeMetricImage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Remove a metric image for an alert </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesMetricImage> _callback) throws ApiException {
            return removeMetricImageAsync(id, alertIid, metricImageId, _callback);
        }
    }

    /**
     * 
     * Remove a metric image for an alert
     * @param id The ID or URL-encoded path of the project (required)
     * @param alertIid The IID of the Alert (required)
     * @param metricImageId The ID of metric image (required)
     * @return RemoveMetricImageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Remove a metric image for an alert </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public RemoveMetricImageRequestBuilder removeMetricImage(String id, Integer alertIid, Integer metricImageId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (alertIid == null) throw new IllegalArgumentException("\"alertIid\" is required but got null");
        if (metricImageId == null) throw new IllegalArgumentException("\"metricImageId\" is required but got null");
        return new RemoveMetricImageRequestBuilder(id, alertIid, metricImageId);
    }
    private okhttp3.Call updateMetricImageCall(String id, Integer alertIid, Integer metricImageId, String url, String urlText, AlertmanagementUpdateMetricImageRequest alertmanagementUpdateMetricImageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = alertmanagementUpdateMetricImageRequest;

        // create path and map variables
        String localVarPath = "/api/v4/projects/{id}/alert_management_alerts/{alert_iid}/metric_images/{metric_image_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "alert_iid" + "}", localVarApiClient.escapeString(alertIid.toString()))
            .replace("{" + "metric_image_id" + "}", localVarApiClient.escapeString(metricImageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarFormParams.put("url", url);
        }

        if (urlText != null) {
            localVarFormParams.put("url_text", urlText);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMetricImageValidateBeforeCall(String id, Integer alertIid, Integer metricImageId, String url, String urlText, AlertmanagementUpdateMetricImageRequest alertmanagementUpdateMetricImageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateMetricImage(Async)");
        }

        // verify the required parameter 'alertIid' is set
        if (alertIid == null) {
            throw new ApiException("Missing the required parameter 'alertIid' when calling updateMetricImage(Async)");
        }

        // verify the required parameter 'metricImageId' is set
        if (metricImageId == null) {
            throw new ApiException("Missing the required parameter 'metricImageId' when calling updateMetricImage(Async)");
        }

        return updateMetricImageCall(id, alertIid, metricImageId, url, urlText, alertmanagementUpdateMetricImageRequest, _callback);

    }


    private ApiResponse<APIEntitiesMetricImage> updateMetricImageWithHttpInfo(String id, Integer alertIid, Integer metricImageId, String url, String urlText, AlertmanagementUpdateMetricImageRequest alertmanagementUpdateMetricImageRequest) throws ApiException {
        okhttp3.Call localVarCall = updateMetricImageValidateBeforeCall(id, alertIid, metricImageId, url, urlText, alertmanagementUpdateMetricImageRequest, null);
        Type localVarReturnType = new TypeToken<APIEntitiesMetricImage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateMetricImageAsync(String id, Integer alertIid, Integer metricImageId, String url, String urlText, AlertmanagementUpdateMetricImageRequest alertmanagementUpdateMetricImageRequest, final ApiCallback<APIEntitiesMetricImage> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMetricImageValidateBeforeCall(id, alertIid, metricImageId, url, urlText, alertmanagementUpdateMetricImageRequest, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesMetricImage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateMetricImageRequestBuilder {
        private final String id;
        private final Integer alertIid;
        private final Integer metricImageId;
        private String url;
        private String urlText;

        private UpdateMetricImageRequestBuilder(String id, Integer alertIid, Integer metricImageId) {
            this.id = id;
            this.alertIid = alertIid;
            this.metricImageId = metricImageId;
        }

        /**
         * Set url
         * @param url The url to view more metric info (optional)
         * @return UpdateMetricImageRequestBuilder
         */
        public UpdateMetricImageRequestBuilder url(String url) {
            this.url = url;
            return this;
        }
        
        /**
         * Set urlText
         * @param urlText A description of the image or URL (optional)
         * @return UpdateMetricImageRequestBuilder
         */
        public UpdateMetricImageRequestBuilder urlText(String urlText) {
            this.urlText = urlText;
            return this;
        }
        
        /**
         * Build call for updateMetricImage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update a metric image for an alert </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AlertmanagementUpdateMetricImageRequest alertmanagementUpdateMetricImageRequest = buildBodyParams();
            return updateMetricImageCall(id, alertIid, metricImageId, url, urlText, alertmanagementUpdateMetricImageRequest, _callback);
        }

        private AlertmanagementUpdateMetricImageRequest buildBodyParams() {
            AlertmanagementUpdateMetricImageRequest alertmanagementUpdateMetricImageRequest = new AlertmanagementUpdateMetricImageRequest();
            alertmanagementUpdateMetricImageRequest.url(this.url);
            alertmanagementUpdateMetricImageRequest.urlText(this.urlText);
            return alertmanagementUpdateMetricImageRequest;
        }

        /**
         * Execute updateMetricImage request
         * @return APIEntitiesMetricImage
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update a metric image for an alert </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesMetricImage execute() throws ApiException {
            AlertmanagementUpdateMetricImageRequest alertmanagementUpdateMetricImageRequest = buildBodyParams();
            ApiResponse<APIEntitiesMetricImage> localVarResp = updateMetricImageWithHttpInfo(id, alertIid, metricImageId, url, urlText, alertmanagementUpdateMetricImageRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateMetricImage request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesMetricImage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update a metric image for an alert </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesMetricImage> executeWithHttpInfo() throws ApiException {
            AlertmanagementUpdateMetricImageRequest alertmanagementUpdateMetricImageRequest = buildBodyParams();
            return updateMetricImageWithHttpInfo(id, alertIid, metricImageId, url, urlText, alertmanagementUpdateMetricImageRequest);
        }

        /**
         * Execute updateMetricImage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update a metric image for an alert </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesMetricImage> _callback) throws ApiException {
            AlertmanagementUpdateMetricImageRequest alertmanagementUpdateMetricImageRequest = buildBodyParams();
            return updateMetricImageAsync(id, alertIid, metricImageId, url, urlText, alertmanagementUpdateMetricImageRequest, _callback);
        }
    }

    /**
     * 
     * Update a metric image for an alert
     * @param id The ID or URL-encoded path of the project (required)
     * @param alertIid The IID of the Alert (required)
     * @param metricImageId The ID of metric image (required)
     * @return UpdateMetricImageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a metric image for an alert </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMetricImageRequestBuilder updateMetricImage(String id, Integer alertIid, Integer metricImageId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (alertIid == null) throw new IllegalArgumentException("\"alertIid\" is required but got null");
        if (metricImageId == null) throw new IllegalArgumentException("\"metricImageId\" is required but got null");
        return new UpdateMetricImageRequestBuilder(id, alertIid, metricImageId);
    }
    private okhttp3.Call uploadMetricImageCall(String id, Integer alertIid, File _file, AlertmanagementUploadMetricImageRequest alertmanagementUploadMetricImageRequest, String url, String urlText, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = alertmanagementUploadMetricImageRequest;

        // create path and map variables
        String localVarPath = "/api/v4/projects/{id}/alert_management_alerts/{alert_iid}/metric_images"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "alert_iid" + "}", localVarApiClient.escapeString(alertIid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (url != null) {
            localVarFormParams.put("url", url);
        }

        if (urlText != null) {
            localVarFormParams.put("url_text", urlText);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadMetricImageValidateBeforeCall(String id, Integer alertIid, File _file, AlertmanagementUploadMetricImageRequest alertmanagementUploadMetricImageRequest, String url, String urlText, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling uploadMetricImage(Async)");
        }

        // verify the required parameter 'alertIid' is set
        if (alertIid == null) {
            throw new ApiException("Missing the required parameter 'alertIid' when calling uploadMetricImage(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling uploadMetricImage(Async)");
        }

        // verify the required parameter 'alertmanagementUploadMetricImageRequest' is set
        if (alertmanagementUploadMetricImageRequest == null) {
            throw new ApiException("Missing the required parameter 'alertmanagementUploadMetricImageRequest' when calling uploadMetricImage(Async)");
        }

        return uploadMetricImageCall(id, alertIid, _file, alertmanagementUploadMetricImageRequest, url, urlText, _callback);

    }


    private ApiResponse<APIEntitiesMetricImage> uploadMetricImageWithHttpInfo(String id, Integer alertIid, File _file, AlertmanagementUploadMetricImageRequest alertmanagementUploadMetricImageRequest, String url, String urlText) throws ApiException {
        okhttp3.Call localVarCall = uploadMetricImageValidateBeforeCall(id, alertIid, _file, alertmanagementUploadMetricImageRequest, url, urlText, null);
        Type localVarReturnType = new TypeToken<APIEntitiesMetricImage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call uploadMetricImageAsync(String id, Integer alertIid, File _file, AlertmanagementUploadMetricImageRequest alertmanagementUploadMetricImageRequest, String url, String urlText, final ApiCallback<APIEntitiesMetricImage> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadMetricImageValidateBeforeCall(id, alertIid, _file, alertmanagementUploadMetricImageRequest, url, urlText, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesMetricImage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UploadMetricImageRequestBuilder {
        private final String id;
        private final Integer alertIid;
        private final File _file;
        private String url;
        private String urlText;

        private UploadMetricImageRequestBuilder(String id, Integer alertIid, File _file) {
            this.id = id;
            this.alertIid = alertIid;
            this._file = _file;
        }

        /**
         * Set url
         * @param url The url to view more metric info (optional)
         * @return UploadMetricImageRequestBuilder
         */
        public UploadMetricImageRequestBuilder url(String url) {
            this.url = url;
            return this;
        }
        
        /**
         * Set urlText
         * @param urlText A description of the image or URL (optional)
         * @return UploadMetricImageRequestBuilder
         */
        public UploadMetricImageRequestBuilder urlText(String urlText) {
            this.urlText = urlText;
            return this;
        }
        
        /**
         * Build call for uploadMetricImage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Upload a metric image for an alert </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AlertmanagementUploadMetricImageRequest alertmanagementUploadMetricImageRequest = buildBodyParams();
            return uploadMetricImageCall(id, alertIid, _file, alertmanagementUploadMetricImageRequest, url, urlText, _callback);
        }

        private AlertmanagementUploadMetricImageRequest buildBodyParams() {
            AlertmanagementUploadMetricImageRequest alertmanagementUploadMetricImageRequest = new AlertmanagementUploadMetricImageRequest();
            alertmanagementUploadMetricImageRequest._file(this._file);
            alertmanagementUploadMetricImageRequest.url(this.url);
            alertmanagementUploadMetricImageRequest.urlText(this.urlText);
            return alertmanagementUploadMetricImageRequest;
        }

        /**
         * Execute uploadMetricImage request
         * @return APIEntitiesMetricImage
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Upload a metric image for an alert </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesMetricImage execute() throws ApiException {
            AlertmanagementUploadMetricImageRequest alertmanagementUploadMetricImageRequest = buildBodyParams();
            ApiResponse<APIEntitiesMetricImage> localVarResp = uploadMetricImageWithHttpInfo(id, alertIid, _file, alertmanagementUploadMetricImageRequest, url, urlText);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute uploadMetricImage request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesMetricImage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Upload a metric image for an alert </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesMetricImage> executeWithHttpInfo() throws ApiException {
            AlertmanagementUploadMetricImageRequest alertmanagementUploadMetricImageRequest = buildBodyParams();
            return uploadMetricImageWithHttpInfo(id, alertIid, _file, alertmanagementUploadMetricImageRequest, url, urlText);
        }

        /**
         * Execute uploadMetricImage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Upload a metric image for an alert </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesMetricImage> _callback) throws ApiException {
            AlertmanagementUploadMetricImageRequest alertmanagementUploadMetricImageRequest = buildBodyParams();
            return uploadMetricImageAsync(id, alertIid, _file, alertmanagementUploadMetricImageRequest, url, urlText, _callback);
        }
    }

    /**
     * 
     * Upload a metric image for an alert
     * @param id The ID or URL-encoded path of the project (required)
     * @param alertIid The IID of the Alert (required)
     * @param _file The image file to be uploaded (required)
     * @param alertmanagementUploadMetricImageRequest  (required)
     * @return UploadMetricImageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload a metric image for an alert </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public UploadMetricImageRequestBuilder uploadMetricImage(String id, Integer alertIid, File _file) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (alertIid == null) throw new IllegalArgumentException("\"alertIid\" is required but got null");
        if (_file == null) throw new IllegalArgumentException("\"_file\" is required but got null");
        return new UploadMetricImageRequestBuilder(id, alertIid, _file);
    }
}
