/*
 * GitLab API
 * An OpenAPI definition for the GitLab REST API. Few API resources or endpoints are currently included. The intent is to expand this to match the entire Markdown documentation of the API: <https://docs.gitlab.com/ee/api/>. Contributions are welcome.  When viewing this on gitlab.com, you can test API calls directly from the browser against the `gitlab.com` instance, if you are logged in. The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie), so each request is made using your account.  Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html) 
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.APIEntitiesBroadcastMessage;
import com.konfigthis.client.model.BroadcastmessagesCreateMessageRequest;
import com.konfigthis.client.model.BroadcastmessagesUpdateMessageRequest;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BroadcastMessagesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BroadcastMessagesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public BroadcastMessagesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKeyAuth() == null) {
            throw new IllegalArgumentException("\"Private-Token\" is required but no API key was provided. Please set \"Private-Token\" with ApiClient#setApiKeyAuth(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createMessageCall(BroadcastmessagesCreateMessageRequest broadcastmessagesCreateMessageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = broadcastmessagesCreateMessageRequest;

        // create path and map variables
        String localVarPath = "/api/v4/broadcast_messages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMessageValidateBeforeCall(BroadcastmessagesCreateMessageRequest broadcastmessagesCreateMessageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'broadcastmessagesCreateMessageRequest' is set
        if (broadcastmessagesCreateMessageRequest == null) {
            throw new ApiException("Missing the required parameter 'broadcastmessagesCreateMessageRequest' when calling createMessage(Async)");
        }

        return createMessageCall(broadcastmessagesCreateMessageRequest, _callback);

    }


    private ApiResponse<APIEntitiesBroadcastMessage> createMessageWithHttpInfo(BroadcastmessagesCreateMessageRequest broadcastmessagesCreateMessageRequest) throws ApiException {
        okhttp3.Call localVarCall = createMessageValidateBeforeCall(broadcastmessagesCreateMessageRequest, null);
        Type localVarReturnType = new TypeToken<APIEntitiesBroadcastMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createMessageAsync(BroadcastmessagesCreateMessageRequest broadcastmessagesCreateMessageRequest, final ApiCallback<APIEntitiesBroadcastMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMessageValidateBeforeCall(broadcastmessagesCreateMessageRequest, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesBroadcastMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateMessageRequestBuilder {
        private final String message;
        private OffsetDateTime startsAt;
        private OffsetDateTime endsAt;
        private String color;
        private String font;
        private List<Integer> targetAccessLevels;
        private String targetPath;
        private String broadcastType;
        private Boolean dismissable;

        private CreateMessageRequestBuilder(String message) {
            this.message = message;
        }

        /**
         * Set startsAt
         * @param startsAt Starting time (optional)
         * @return CreateMessageRequestBuilder
         */
        public CreateMessageRequestBuilder startsAt(OffsetDateTime startsAt) {
            this.startsAt = startsAt;
            return this;
        }
        
        /**
         * Set endsAt
         * @param endsAt Ending time (optional)
         * @return CreateMessageRequestBuilder
         */
        public CreateMessageRequestBuilder endsAt(OffsetDateTime endsAt) {
            this.endsAt = endsAt;
            return this;
        }
        
        /**
         * Set color
         * @param color Background color (optional)
         * @return CreateMessageRequestBuilder
         */
        public CreateMessageRequestBuilder color(String color) {
            this.color = color;
            return this;
        }
        
        /**
         * Set font
         * @param font Foreground color (optional)
         * @return CreateMessageRequestBuilder
         */
        public CreateMessageRequestBuilder font(String font) {
            this.font = font;
            return this;
        }
        
        /**
         * Set targetAccessLevels
         * @param targetAccessLevels Target user roles (optional)
         * @return CreateMessageRequestBuilder
         */
        public CreateMessageRequestBuilder targetAccessLevels(List<Integer> targetAccessLevels) {
            this.targetAccessLevels = targetAccessLevels;
            return this;
        }
        
        /**
         * Set targetPath
         * @param targetPath Target path (optional)
         * @return CreateMessageRequestBuilder
         */
        public CreateMessageRequestBuilder targetPath(String targetPath) {
            this.targetPath = targetPath;
            return this;
        }
        
        /**
         * Set broadcastType
         * @param broadcastType Broadcast type. Defaults to banner (optional)
         * @return CreateMessageRequestBuilder
         */
        public CreateMessageRequestBuilder broadcastType(String broadcastType) {
            this.broadcastType = broadcastType;
            return this;
        }
        
        /**
         * Set dismissable
         * @param dismissable Is dismissable (optional)
         * @return CreateMessageRequestBuilder
         */
        public CreateMessageRequestBuilder dismissable(Boolean dismissable) {
            this.dismissable = dismissable;
            return this;
        }
        
        /**
         * Build call for createMessage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create a broadcast message </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BroadcastmessagesCreateMessageRequest broadcastmessagesCreateMessageRequest = buildBodyParams();
            return createMessageCall(broadcastmessagesCreateMessageRequest, _callback);
        }

        private BroadcastmessagesCreateMessageRequest buildBodyParams() {
            BroadcastmessagesCreateMessageRequest broadcastmessagesCreateMessageRequest = new BroadcastmessagesCreateMessageRequest();
            broadcastmessagesCreateMessageRequest.message(this.message);
            broadcastmessagesCreateMessageRequest.startsAt(this.startsAt);
            broadcastmessagesCreateMessageRequest.endsAt(this.endsAt);
            broadcastmessagesCreateMessageRequest.color(this.color);
            broadcastmessagesCreateMessageRequest.font(this.font);
            if (this.targetAccessLevels != null)
            broadcastmessagesCreateMessageRequest.targetAccessLevels(BroadcastmessagesCreateMessageRequest.TargetAccessLevelsEnum.fromValue(this.targetAccessLevels));
            broadcastmessagesCreateMessageRequest.targetPath(this.targetPath);
            if (this.broadcastType != null)
            broadcastmessagesCreateMessageRequest.broadcastType(BroadcastmessagesCreateMessageRequest.BroadcastTypeEnum.fromValue(this.broadcastType));
            broadcastmessagesCreateMessageRequest.dismissable(this.dismissable);
            return broadcastmessagesCreateMessageRequest;
        }

        /**
         * Execute createMessage request
         * @return APIEntitiesBroadcastMessage
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create a broadcast message </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesBroadcastMessage execute() throws ApiException {
            BroadcastmessagesCreateMessageRequest broadcastmessagesCreateMessageRequest = buildBodyParams();
            ApiResponse<APIEntitiesBroadcastMessage> localVarResp = createMessageWithHttpInfo(broadcastmessagesCreateMessageRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createMessage request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesBroadcastMessage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create a broadcast message </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesBroadcastMessage> executeWithHttpInfo() throws ApiException {
            BroadcastmessagesCreateMessageRequest broadcastmessagesCreateMessageRequest = buildBodyParams();
            return createMessageWithHttpInfo(broadcastmessagesCreateMessageRequest);
        }

        /**
         * Execute createMessage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create a broadcast message </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesBroadcastMessage> _callback) throws ApiException {
            BroadcastmessagesCreateMessageRequest broadcastmessagesCreateMessageRequest = buildBodyParams();
            return createMessageAsync(broadcastmessagesCreateMessageRequest, _callback);
        }
    }

    /**
     * Create a broadcast message
     * This feature was introduced in GitLab 8.12.
     * @param broadcastmessagesCreateMessageRequest  (required)
     * @return CreateMessageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a broadcast message </td><td>  -  </td></tr>
     </table>
     */
    public CreateMessageRequestBuilder createMessage(String message) throws IllegalArgumentException {
        if (message == null) throw new IllegalArgumentException("\"message\" is required but got null");
            

        return new CreateMessageRequestBuilder(message);
    }
    private okhttp3.Call deleteMessageCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/broadcast_messages/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMessageValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteMessage(Async)");
        }

        return deleteMessageCall(id, _callback);

    }


    private ApiResponse<APIEntitiesBroadcastMessage> deleteMessageWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = deleteMessageValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<APIEntitiesBroadcastMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteMessageAsync(Integer id, final ApiCallback<APIEntitiesBroadcastMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMessageValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesBroadcastMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteMessageRequestBuilder {
        private final Integer id;

        private DeleteMessageRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for deleteMessage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Delete a broadcast message </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteMessageCall(id, _callback);
        }


        /**
         * Execute deleteMessage request
         * @return APIEntitiesBroadcastMessage
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Delete a broadcast message </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesBroadcastMessage execute() throws ApiException {
            ApiResponse<APIEntitiesBroadcastMessage> localVarResp = deleteMessageWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteMessage request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesBroadcastMessage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Delete a broadcast message </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesBroadcastMessage> executeWithHttpInfo() throws ApiException {
            return deleteMessageWithHttpInfo(id);
        }

        /**
         * Execute deleteMessage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Delete a broadcast message </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesBroadcastMessage> _callback) throws ApiException {
            return deleteMessageAsync(id, _callback);
        }
    }

    /**
     * Delete a broadcast message
     * This feature was introduced in GitLab 8.12.
     * @param id Broadcast message ID (required)
     * @return DeleteMessageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a broadcast message </td><td>  -  </td></tr>
     </table>
     */
    public DeleteMessageRequestBuilder deleteMessage(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new DeleteMessageRequestBuilder(id);
    }
    private okhttp3.Call getSpecificMessageCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/broadcast_messages/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificMessageValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSpecificMessage(Async)");
        }

        return getSpecificMessageCall(id, _callback);

    }


    private ApiResponse<APIEntitiesBroadcastMessage> getSpecificMessageWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getSpecificMessageValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<APIEntitiesBroadcastMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificMessageAsync(Integer id, final ApiCallback<APIEntitiesBroadcastMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificMessageValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesBroadcastMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificMessageRequestBuilder {
        private final Integer id;

        private GetSpecificMessageRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for getSpecificMessage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get a specific broadcast message </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificMessageCall(id, _callback);
        }


        /**
         * Execute getSpecificMessage request
         * @return APIEntitiesBroadcastMessage
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get a specific broadcast message </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesBroadcastMessage execute() throws ApiException {
            ApiResponse<APIEntitiesBroadcastMessage> localVarResp = getSpecificMessageWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificMessage request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesBroadcastMessage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get a specific broadcast message </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesBroadcastMessage> executeWithHttpInfo() throws ApiException {
            return getSpecificMessageWithHttpInfo(id);
        }

        /**
         * Execute getSpecificMessage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get a specific broadcast message </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesBroadcastMessage> _callback) throws ApiException {
            return getSpecificMessageAsync(id, _callback);
        }
    }

    /**
     * Get a specific broadcast message
     * This feature was introduced in GitLab 8.12.
     * @param id Broadcast message ID (required)
     * @return GetSpecificMessageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a specific broadcast message </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificMessageRequestBuilder getSpecificMessage(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetSpecificMessageRequestBuilder(id);
    }
    private okhttp3.Call listAllCall(Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/broadcast_messages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllValidateBeforeCall(Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        return listAllCall(page, perPage, _callback);

    }


    private ApiResponse<APIEntitiesBroadcastMessage> listAllWithHttpInfo(Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listAllValidateBeforeCall(page, perPage, null);
        Type localVarReturnType = new TypeToken<APIEntitiesBroadcastMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllAsync(Integer page, Integer perPage, final ApiCallback<APIEntitiesBroadcastMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllValidateBeforeCall(page, perPage, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesBroadcastMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllRequestBuilder {
        private Integer page;
        private Integer perPage;

        private ListAllRequestBuilder() {
        }

        /**
         * Set page
         * @param page Current page number (optional, default to 1)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of items per page (optional, default to 20)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for listAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get all broadcast messages </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllCall(page, perPage, _callback);
        }


        /**
         * Execute listAll request
         * @return APIEntitiesBroadcastMessage
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get all broadcast messages </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesBroadcastMessage execute() throws ApiException {
            ApiResponse<APIEntitiesBroadcastMessage> localVarResp = listAllWithHttpInfo(page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAll request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesBroadcastMessage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get all broadcast messages </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesBroadcastMessage> executeWithHttpInfo() throws ApiException {
            return listAllWithHttpInfo(page, perPage);
        }

        /**
         * Execute listAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get all broadcast messages </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesBroadcastMessage> _callback) throws ApiException {
            return listAllAsync(page, perPage, _callback);
        }
    }

    /**
     * Get all broadcast messages
     * This feature was introduced in GitLab 8.12.
     * @return ListAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all broadcast messages </td><td>  -  </td></tr>
     </table>
     */
    public ListAllRequestBuilder listAll() throws IllegalArgumentException {
        return new ListAllRequestBuilder();
    }
    private okhttp3.Call updateMessageCall(Integer id, BroadcastmessagesUpdateMessageRequest broadcastmessagesUpdateMessageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = broadcastmessagesUpdateMessageRequest;

        // create path and map variables
        String localVarPath = "/api/v4/broadcast_messages/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMessageValidateBeforeCall(Integer id, BroadcastmessagesUpdateMessageRequest broadcastmessagesUpdateMessageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateMessage(Async)");
        }

        return updateMessageCall(id, broadcastmessagesUpdateMessageRequest, _callback);

    }


    private ApiResponse<APIEntitiesBroadcastMessage> updateMessageWithHttpInfo(Integer id, BroadcastmessagesUpdateMessageRequest broadcastmessagesUpdateMessageRequest) throws ApiException {
        okhttp3.Call localVarCall = updateMessageValidateBeforeCall(id, broadcastmessagesUpdateMessageRequest, null);
        Type localVarReturnType = new TypeToken<APIEntitiesBroadcastMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateMessageAsync(Integer id, BroadcastmessagesUpdateMessageRequest broadcastmessagesUpdateMessageRequest, final ApiCallback<APIEntitiesBroadcastMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMessageValidateBeforeCall(id, broadcastmessagesUpdateMessageRequest, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesBroadcastMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateMessageRequestBuilder {
        private final Integer id;
        private String message;
        private OffsetDateTime startsAt;
        private OffsetDateTime endsAt;
        private String color;
        private String font;
        private List<Integer> targetAccessLevels;
        private String targetPath;
        private String broadcastType;
        private Boolean dismissable;

        private UpdateMessageRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Set message
         * @param message Message to display (optional)
         * @return UpdateMessageRequestBuilder
         */
        public UpdateMessageRequestBuilder message(String message) {
            this.message = message;
            return this;
        }
        
        /**
         * Set startsAt
         * @param startsAt Starting time (optional)
         * @return UpdateMessageRequestBuilder
         */
        public UpdateMessageRequestBuilder startsAt(OffsetDateTime startsAt) {
            this.startsAt = startsAt;
            return this;
        }
        
        /**
         * Set endsAt
         * @param endsAt Ending time (optional)
         * @return UpdateMessageRequestBuilder
         */
        public UpdateMessageRequestBuilder endsAt(OffsetDateTime endsAt) {
            this.endsAt = endsAt;
            return this;
        }
        
        /**
         * Set color
         * @param color Background color (optional)
         * @return UpdateMessageRequestBuilder
         */
        public UpdateMessageRequestBuilder color(String color) {
            this.color = color;
            return this;
        }
        
        /**
         * Set font
         * @param font Foreground color (optional)
         * @return UpdateMessageRequestBuilder
         */
        public UpdateMessageRequestBuilder font(String font) {
            this.font = font;
            return this;
        }
        
        /**
         * Set targetAccessLevels
         * @param targetAccessLevels Target user roles (optional)
         * @return UpdateMessageRequestBuilder
         */
        public UpdateMessageRequestBuilder targetAccessLevels(List<Integer> targetAccessLevels) {
            this.targetAccessLevels = targetAccessLevels;
            return this;
        }
        
        /**
         * Set targetPath
         * @param targetPath Target path (optional)
         * @return UpdateMessageRequestBuilder
         */
        public UpdateMessageRequestBuilder targetPath(String targetPath) {
            this.targetPath = targetPath;
            return this;
        }
        
        /**
         * Set broadcastType
         * @param broadcastType Broadcast Type (optional)
         * @return UpdateMessageRequestBuilder
         */
        public UpdateMessageRequestBuilder broadcastType(String broadcastType) {
            this.broadcastType = broadcastType;
            return this;
        }
        
        /**
         * Set dismissable
         * @param dismissable Is dismissable (optional)
         * @return UpdateMessageRequestBuilder
         */
        public UpdateMessageRequestBuilder dismissable(Boolean dismissable) {
            this.dismissable = dismissable;
            return this;
        }
        
        /**
         * Build call for updateMessage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update a broadcast message </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BroadcastmessagesUpdateMessageRequest broadcastmessagesUpdateMessageRequest = buildBodyParams();
            return updateMessageCall(id, broadcastmessagesUpdateMessageRequest, _callback);
        }

        private BroadcastmessagesUpdateMessageRequest buildBodyParams() {
            BroadcastmessagesUpdateMessageRequest broadcastmessagesUpdateMessageRequest = new BroadcastmessagesUpdateMessageRequest();
            broadcastmessagesUpdateMessageRequest.message(this.message);
            broadcastmessagesUpdateMessageRequest.startsAt(this.startsAt);
            broadcastmessagesUpdateMessageRequest.endsAt(this.endsAt);
            broadcastmessagesUpdateMessageRequest.color(this.color);
            broadcastmessagesUpdateMessageRequest.font(this.font);
            if (this.targetAccessLevels != null)
            broadcastmessagesUpdateMessageRequest.targetAccessLevels(BroadcastmessagesUpdateMessageRequest.TargetAccessLevelsEnum.fromValue(this.targetAccessLevels));
            broadcastmessagesUpdateMessageRequest.targetPath(this.targetPath);
            if (this.broadcastType != null)
            broadcastmessagesUpdateMessageRequest.broadcastType(BroadcastmessagesUpdateMessageRequest.BroadcastTypeEnum.fromValue(this.broadcastType));
            broadcastmessagesUpdateMessageRequest.dismissable(this.dismissable);
            return broadcastmessagesUpdateMessageRequest;
        }

        /**
         * Execute updateMessage request
         * @return APIEntitiesBroadcastMessage
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update a broadcast message </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesBroadcastMessage execute() throws ApiException {
            BroadcastmessagesUpdateMessageRequest broadcastmessagesUpdateMessageRequest = buildBodyParams();
            ApiResponse<APIEntitiesBroadcastMessage> localVarResp = updateMessageWithHttpInfo(id, broadcastmessagesUpdateMessageRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateMessage request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesBroadcastMessage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update a broadcast message </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesBroadcastMessage> executeWithHttpInfo() throws ApiException {
            BroadcastmessagesUpdateMessageRequest broadcastmessagesUpdateMessageRequest = buildBodyParams();
            return updateMessageWithHttpInfo(id, broadcastmessagesUpdateMessageRequest);
        }

        /**
         * Execute updateMessage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update a broadcast message </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesBroadcastMessage> _callback) throws ApiException {
            BroadcastmessagesUpdateMessageRequest broadcastmessagesUpdateMessageRequest = buildBodyParams();
            return updateMessageAsync(id, broadcastmessagesUpdateMessageRequest, _callback);
        }
    }

    /**
     * Update a broadcast message
     * This feature was introduced in GitLab 8.12.
     * @param id Broadcast message ID (required)
     * @return UpdateMessageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a broadcast message </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMessageRequestBuilder updateMessage(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new UpdateMessageRequestBuilder(id);
    }
}
