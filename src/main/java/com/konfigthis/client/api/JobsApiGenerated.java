/*
 * GitLab API
 * An OpenAPI definition for the GitLab REST API. Few API resources or endpoints are currently included. The intent is to expand this to match the entire Markdown documentation of the API: <https://docs.gitlab.com/ee/api/>. Contributions are welcome.  When viewing this on gitlab.com, you can test API calls directly from the browser against the `gitlab.com` instance, if you are logged in. The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie), so each request is made using your account.  Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html) 
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.APIEntitiesJob;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class JobsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public JobsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public JobsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKeyAuth() == null) {
            throw new IllegalArgumentException("\"Private-Token\" is required but no API key was provided. Please set \"Private-Token\" with ApiClient#setApiKeyAuth(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getSingleByIdCall(Integer id, Integer jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/projects/{id}/jobs/{job_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleByIdValidateBeforeCall(Integer id, Integer jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSingleById(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling getSingleById(Async)");
        }

        return getSingleByIdCall(id, jobId, _callback);

    }


    private ApiResponse<APIEntitiesJob> getSingleByIdWithHttpInfo(Integer id, Integer jobId) throws ApiException {
        okhttp3.Call localVarCall = getSingleByIdValidateBeforeCall(id, jobId, null);
        Type localVarReturnType = new TypeToken<APIEntitiesJob>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleByIdAsync(Integer id, Integer jobId, final ApiCallback<APIEntitiesJob> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleByIdValidateBeforeCall(id, jobId, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesJob>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleByIdRequestBuilder {
        private final Integer id;
        private final Integer jobId;

        private GetSingleByIdRequestBuilder(Integer id, Integer jobId) {
            this.id = id;
            this.jobId = jobId;
        }

        /**
         * Build call for getSingleById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A single job object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleByIdCall(id, jobId, _callback);
        }


        /**
         * Execute getSingleById request
         * @return APIEntitiesJob
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A single job object </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesJob execute() throws ApiException {
            ApiResponse<APIEntitiesJob> localVarResp = getSingleByIdWithHttpInfo(id, jobId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleById request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesJob&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A single job object </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesJob> executeWithHttpInfo() throws ApiException {
            return getSingleByIdWithHttpInfo(id, jobId);
        }

        /**
         * Execute getSingleById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A single job object </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesJob> _callback) throws ApiException {
            return getSingleByIdAsync(id, jobId, _callback);
        }
    }

    /**
     * Get a single job by ID
     * 
     * @param id The ID of the project (required)
     * @param jobId The ID of the job (required)
     * @return GetSingleByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A single job object </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleByIdRequestBuilder getSingleById(Integer id, Integer jobId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        if (jobId == null) throw new IllegalArgumentException("\"jobId\" is required but got null");
        return new GetSingleByIdRequestBuilder(id, jobId);
    }
    private okhttp3.Call listForProjectCall(Integer id, List<String> scope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/projects/{id}/jobs"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "scope", scope));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listForProjectValidateBeforeCall(Integer id, List<String> scope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listForProject(Async)");
        }

        return listForProjectCall(id, scope, _callback);

    }


    private ApiResponse<List<APIEntitiesJob>> listForProjectWithHttpInfo(Integer id, List<String> scope) throws ApiException {
        okhttp3.Call localVarCall = listForProjectValidateBeforeCall(id, scope, null);
        Type localVarReturnType = new TypeToken<List<APIEntitiesJob>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listForProjectAsync(Integer id, List<String> scope, final ApiCallback<List<APIEntitiesJob>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listForProjectValidateBeforeCall(id, scope, _callback);
        Type localVarReturnType = new TypeToken<List<APIEntitiesJob>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListForProjectRequestBuilder {
        private final Integer id;
        private List<String> scope;

        private ListForProjectRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Set scope
         * @param scope Return all jobs with the specified statuses (optional)
         * @return ListForProjectRequestBuilder
         */
        public ListForProjectRequestBuilder scope(List<String> scope) {
            this.scope = scope;
            return this;
        }
        
        /**
         * Build call for listForProject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An array of jobs </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listForProjectCall(id, scope, _callback);
        }


        /**
         * Execute listForProject request
         * @return List&lt;APIEntitiesJob&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An array of jobs </td><td>  -  </td></tr>
         </table>
         */
        public List<APIEntitiesJob> execute() throws ApiException {
            ApiResponse<List<APIEntitiesJob>> localVarResp = listForProjectWithHttpInfo(id, scope);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listForProject request with HTTP info returned
         * @return ApiResponse&lt;List&lt;APIEntitiesJob&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An array of jobs </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<APIEntitiesJob>> executeWithHttpInfo() throws ApiException {
            return listForProjectWithHttpInfo(id, scope);
        }

        /**
         * Execute listForProject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An array of jobs </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<APIEntitiesJob>> _callback) throws ApiException {
            return listForProjectAsync(id, scope, _callback);
        }
    }

    /**
     * List jobs for a project
     * 
     * @param id The ID of the project (required)
     * @return ListForProjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of jobs </td><td>  -  </td></tr>
     </table>
     */
    public ListForProjectRequestBuilder listForProject(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new ListForProjectRequestBuilder(id);
    }
    private okhttp3.Call runManualJobCall(Integer id, Integer jobId, List<String> jobVariablesAttributes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/projects/{id}/jobs/{job_id}/play"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (jobVariablesAttributes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "job_variables_attributes", jobVariablesAttributes));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call runManualJobValidateBeforeCall(Integer id, Integer jobId, List<String> jobVariablesAttributes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling runManualJob(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling runManualJob(Async)");
        }

        return runManualJobCall(id, jobId, jobVariablesAttributes, _callback);

    }


    private ApiResponse<Void> runManualJobWithHttpInfo(Integer id, Integer jobId, List<String> jobVariablesAttributes) throws ApiException {
        okhttp3.Call localVarCall = runManualJobValidateBeforeCall(id, jobId, jobVariablesAttributes, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call runManualJobAsync(Integer id, Integer jobId, List<String> jobVariablesAttributes, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = runManualJobValidateBeforeCall(id, jobId, jobVariablesAttributes, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RunManualJobRequestBuilder {
        private final Integer id;
        private final Integer jobId;
        private List<String> jobVariablesAttributes;

        private RunManualJobRequestBuilder(Integer id, Integer jobId) {
            this.id = id;
            this.jobId = jobId;
        }

        /**
         * Set jobVariablesAttributes
         * @param jobVariablesAttributes An array containing the custom variables available to the job (optional)
         * @return RunManualJobRequestBuilder
         */
        public RunManualJobRequestBuilder jobVariablesAttributes(List<String> jobVariablesAttributes) {
            this.jobVariablesAttributes = jobVariablesAttributes;
            return this;
        }
        
        /**
         * Build call for runManualJob
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Job started successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return runManualJobCall(id, jobId, jobVariablesAttributes, _callback);
        }


        /**
         * Execute runManualJob request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Job started successfully </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            runManualJobWithHttpInfo(id, jobId, jobVariablesAttributes);
        }

        /**
         * Execute runManualJob request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Job started successfully </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return runManualJobWithHttpInfo(id, jobId, jobVariablesAttributes);
        }

        /**
         * Execute runManualJob request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Job started successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return runManualJobAsync(id, jobId, jobVariablesAttributes, _callback);
        }
    }

    /**
     * Run a manual job
     * 
     * @param id The ID of the project (required)
     * @param jobId The ID of the manual job to run (required)
     * @return RunManualJobRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Job started successfully </td><td>  -  </td></tr>
     </table>
     */
    public RunManualJobRequestBuilder runManualJob(Integer id, Integer jobId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        if (jobId == null) throw new IllegalArgumentException("\"jobId\" is required but got null");
        return new RunManualJobRequestBuilder(id, jobId);
    }
}
