/*
 * GitLab API
 * An OpenAPI definition for the GitLab REST API. Few API resources or endpoints are currently included. The intent is to expand this to match the entire Markdown documentation of the API: <https://docs.gitlab.com/ee/api/>. Contributions are welcome.  When viewing this on gitlab.com, you can test API calls directly from the browser against the `gitlab.com` instance, if you are logged in. The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie), so each request is made using your account.  Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html) 
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.APIEntitiesCiVariable;
import com.konfigthis.client.model.CivariablesCreateNewInstanceVariableRequest;
import com.konfigthis.client.model.CivariablesUpdateInstanceVariableRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CiVariablesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CiVariablesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CiVariablesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKeyAuth() == null) {
            throw new IllegalArgumentException("\"Private-Token\" is required but no API key was provided. Please set \"Private-Token\" with ApiClient#setApiKeyAuth(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewInstanceVariableCall(CivariablesCreateNewInstanceVariableRequest civariablesCreateNewInstanceVariableRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = civariablesCreateNewInstanceVariableRequest;

        // create path and map variables
        String localVarPath = "/api/v4/admin/ci/variables";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewInstanceVariableValidateBeforeCall(CivariablesCreateNewInstanceVariableRequest civariablesCreateNewInstanceVariableRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'civariablesCreateNewInstanceVariableRequest' is set
        if (civariablesCreateNewInstanceVariableRequest == null) {
            throw new ApiException("Missing the required parameter 'civariablesCreateNewInstanceVariableRequest' when calling createNewInstanceVariable(Async)");
        }

        return createNewInstanceVariableCall(civariablesCreateNewInstanceVariableRequest, _callback);

    }


    private ApiResponse<APIEntitiesCiVariable> createNewInstanceVariableWithHttpInfo(CivariablesCreateNewInstanceVariableRequest civariablesCreateNewInstanceVariableRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewInstanceVariableValidateBeforeCall(civariablesCreateNewInstanceVariableRequest, null);
        Type localVarReturnType = new TypeToken<APIEntitiesCiVariable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewInstanceVariableAsync(CivariablesCreateNewInstanceVariableRequest civariablesCreateNewInstanceVariableRequest, final ApiCallback<APIEntitiesCiVariable> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewInstanceVariableValidateBeforeCall(civariablesCreateNewInstanceVariableRequest, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesCiVariable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewInstanceVariableRequestBuilder {
        private final String key;
        private final String value;
        private Boolean _protected;
        private Boolean masked;
        private Boolean raw;
        private String variableType;

        private CreateNewInstanceVariableRequestBuilder(String key, String value) {
            this.key = key;
            this.value = value;
        }

        /**
         * Set _protected
         * @param _protected Whether the variable is protected (optional)
         * @return CreateNewInstanceVariableRequestBuilder
         */
        public CreateNewInstanceVariableRequestBuilder _protected(Boolean _protected) {
            this._protected = _protected;
            return this;
        }
        
        /**
         * Set masked
         * @param masked Whether the variable is masked (optional)
         * @return CreateNewInstanceVariableRequestBuilder
         */
        public CreateNewInstanceVariableRequestBuilder masked(Boolean masked) {
            this.masked = masked;
            return this;
        }
        
        /**
         * Set raw
         * @param raw Whether the variable will be expanded (optional)
         * @return CreateNewInstanceVariableRequestBuilder
         */
        public CreateNewInstanceVariableRequestBuilder raw(Boolean raw) {
            this.raw = raw;
            return this;
        }
        
        /**
         * Set variableType
         * @param variableType The type of a variable. Available types are: env_var (default) and file (optional)
         * @return CreateNewInstanceVariableRequestBuilder
         */
        public CreateNewInstanceVariableRequestBuilder variableType(String variableType) {
            this.variableType = variableType;
            return this;
        }
        
        /**
         * Build call for createNewInstanceVariable
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create a new instance-level variable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> 400 Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CivariablesCreateNewInstanceVariableRequest civariablesCreateNewInstanceVariableRequest = buildBodyParams();
            return createNewInstanceVariableCall(civariablesCreateNewInstanceVariableRequest, _callback);
        }

        private CivariablesCreateNewInstanceVariableRequest buildBodyParams() {
            CivariablesCreateNewInstanceVariableRequest civariablesCreateNewInstanceVariableRequest = new CivariablesCreateNewInstanceVariableRequest();
            civariablesCreateNewInstanceVariableRequest.key(this.key);
            civariablesCreateNewInstanceVariableRequest.value(this.value);
            civariablesCreateNewInstanceVariableRequest._protected(this._protected);
            civariablesCreateNewInstanceVariableRequest.masked(this.masked);
            civariablesCreateNewInstanceVariableRequest.raw(this.raw);
            if (this.variableType != null)
            civariablesCreateNewInstanceVariableRequest.variableType(CivariablesCreateNewInstanceVariableRequest.VariableTypeEnum.fromValue(this.variableType));
            return civariablesCreateNewInstanceVariableRequest;
        }

        /**
         * Execute createNewInstanceVariable request
         * @return APIEntitiesCiVariable
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create a new instance-level variable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> 400 Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesCiVariable execute() throws ApiException {
            CivariablesCreateNewInstanceVariableRequest civariablesCreateNewInstanceVariableRequest = buildBodyParams();
            ApiResponse<APIEntitiesCiVariable> localVarResp = createNewInstanceVariableWithHttpInfo(civariablesCreateNewInstanceVariableRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewInstanceVariable request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesCiVariable&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create a new instance-level variable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> 400 Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesCiVariable> executeWithHttpInfo() throws ApiException {
            CivariablesCreateNewInstanceVariableRequest civariablesCreateNewInstanceVariableRequest = buildBodyParams();
            return createNewInstanceVariableWithHttpInfo(civariablesCreateNewInstanceVariableRequest);
        }

        /**
         * Execute createNewInstanceVariable request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create a new instance-level variable </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> 400 Bad Request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesCiVariable> _callback) throws ApiException {
            CivariablesCreateNewInstanceVariableRequest civariablesCreateNewInstanceVariableRequest = buildBodyParams();
            return createNewInstanceVariableAsync(civariablesCreateNewInstanceVariableRequest, _callback);
        }
    }

    /**
     * 
     * Create a new instance-level variable
     * @param civariablesCreateNewInstanceVariableRequest  (required)
     * @return CreateNewInstanceVariableRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a new instance-level variable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewInstanceVariableRequestBuilder createNewInstanceVariable(String key, String value) throws IllegalArgumentException {
        if (key == null) throw new IllegalArgumentException("\"key\" is required but got null");
            

        if (value == null) throw new IllegalArgumentException("\"value\" is required but got null");
            

        return new CreateNewInstanceVariableRequestBuilder(key, value);
    }
    private okhttp3.Call deleteInstanceVariableCall(String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/admin/ci/variables/{key}"
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteInstanceVariableValidateBeforeCall(String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteInstanceVariable(Async)");
        }

        return deleteInstanceVariableCall(key, _callback);

    }


    private ApiResponse<APIEntitiesCiVariable> deleteInstanceVariableWithHttpInfo(String key) throws ApiException {
        okhttp3.Call localVarCall = deleteInstanceVariableValidateBeforeCall(key, null);
        Type localVarReturnType = new TypeToken<APIEntitiesCiVariable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteInstanceVariableAsync(String key, final ApiCallback<APIEntitiesCiVariable> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteInstanceVariableValidateBeforeCall(key, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesCiVariable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteInstanceVariableRequestBuilder {
        private final String key;

        private DeleteInstanceVariableRequestBuilder(String key) {
            this.key = key;
        }

        /**
         * Build call for deleteInstanceVariable
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Delete an existing instance-level variable </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Instance Variable Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteInstanceVariableCall(key, _callback);
        }


        /**
         * Execute deleteInstanceVariable request
         * @return APIEntitiesCiVariable
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Delete an existing instance-level variable </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Instance Variable Not Found </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesCiVariable execute() throws ApiException {
            ApiResponse<APIEntitiesCiVariable> localVarResp = deleteInstanceVariableWithHttpInfo(key);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteInstanceVariable request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesCiVariable&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Delete an existing instance-level variable </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Instance Variable Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesCiVariable> executeWithHttpInfo() throws ApiException {
            return deleteInstanceVariableWithHttpInfo(key);
        }

        /**
         * Execute deleteInstanceVariable request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Delete an existing instance-level variable </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Instance Variable Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesCiVariable> _callback) throws ApiException {
            return deleteInstanceVariableAsync(key, _callback);
        }
    }

    /**
     * 
     * Delete an existing instance-level variable
     * @param key The key of a variable (required)
     * @return DeleteInstanceVariableRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Delete an existing instance-level variable </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance Variable Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DeleteInstanceVariableRequestBuilder deleteInstanceVariable(String key) throws IllegalArgumentException {
        if (key == null) throw new IllegalArgumentException("\"key\" is required but got null");
            

        return new DeleteInstanceVariableRequestBuilder(key);
    }
    private okhttp3.Call getSpecificInstanceVariableCall(String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/admin/ci/variables/{key}"
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificInstanceVariableValidateBeforeCall(String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getSpecificInstanceVariable(Async)");
        }

        return getSpecificInstanceVariableCall(key, _callback);

    }


    private ApiResponse<APIEntitiesCiVariable> getSpecificInstanceVariableWithHttpInfo(String key) throws ApiException {
        okhttp3.Call localVarCall = getSpecificInstanceVariableValidateBeforeCall(key, null);
        Type localVarReturnType = new TypeToken<APIEntitiesCiVariable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificInstanceVariableAsync(String key, final ApiCallback<APIEntitiesCiVariable> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificInstanceVariableValidateBeforeCall(key, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesCiVariable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificInstanceVariableRequestBuilder {
        private final String key;

        private GetSpecificInstanceVariableRequestBuilder(String key) {
            this.key = key;
        }

        /**
         * Build call for getSpecificInstanceVariable
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get the details of a specific instance-level variable </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Instance Variable Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificInstanceVariableCall(key, _callback);
        }


        /**
         * Execute getSpecificInstanceVariable request
         * @return APIEntitiesCiVariable
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get the details of a specific instance-level variable </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Instance Variable Not Found </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesCiVariable execute() throws ApiException {
            ApiResponse<APIEntitiesCiVariable> localVarResp = getSpecificInstanceVariableWithHttpInfo(key);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificInstanceVariable request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesCiVariable&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get the details of a specific instance-level variable </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Instance Variable Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesCiVariable> executeWithHttpInfo() throws ApiException {
            return getSpecificInstanceVariableWithHttpInfo(key);
        }

        /**
         * Execute getSpecificInstanceVariable request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get the details of a specific instance-level variable </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Instance Variable Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesCiVariable> _callback) throws ApiException {
            return getSpecificInstanceVariableAsync(key, _callback);
        }
    }

    /**
     * 
     * Get the details of a specific instance-level variable
     * @param key The key of a variable (required)
     * @return GetSpecificInstanceVariableRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the details of a specific instance-level variable </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance Variable Not Found </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificInstanceVariableRequestBuilder getSpecificInstanceVariable(String key) throws IllegalArgumentException {
        if (key == null) throw new IllegalArgumentException("\"key\" is required but got null");
            

        return new GetSpecificInstanceVariableRequestBuilder(key);
    }
    private okhttp3.Call listInstanceVariablesCall(Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/admin/ci/variables";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInstanceVariablesValidateBeforeCall(Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        return listInstanceVariablesCall(page, perPage, _callback);

    }


    private ApiResponse<APIEntitiesCiVariable> listInstanceVariablesWithHttpInfo(Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listInstanceVariablesValidateBeforeCall(page, perPage, null);
        Type localVarReturnType = new TypeToken<APIEntitiesCiVariable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listInstanceVariablesAsync(Integer page, Integer perPage, final ApiCallback<APIEntitiesCiVariable> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInstanceVariablesValidateBeforeCall(page, perPage, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesCiVariable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListInstanceVariablesRequestBuilder {
        private Integer page;
        private Integer perPage;

        private ListInstanceVariablesRequestBuilder() {
        }

        /**
         * Set page
         * @param page Current page number (optional, default to 1)
         * @return ListInstanceVariablesRequestBuilder
         */
        public ListInstanceVariablesRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of items per page (optional, default to 20)
         * @return ListInstanceVariablesRequestBuilder
         */
        public ListInstanceVariablesRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for listInstanceVariables
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List all instance-level variables </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listInstanceVariablesCall(page, perPage, _callback);
        }


        /**
         * Execute listInstanceVariables request
         * @return APIEntitiesCiVariable
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List all instance-level variables </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesCiVariable execute() throws ApiException {
            ApiResponse<APIEntitiesCiVariable> localVarResp = listInstanceVariablesWithHttpInfo(page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listInstanceVariables request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesCiVariable&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List all instance-level variables </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesCiVariable> executeWithHttpInfo() throws ApiException {
            return listInstanceVariablesWithHttpInfo(page, perPage);
        }

        /**
         * Execute listInstanceVariables request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List all instance-level variables </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesCiVariable> _callback) throws ApiException {
            return listInstanceVariablesAsync(page, perPage, _callback);
        }
    }

    /**
     * 
     * List all instance-level variables
     * @return ListInstanceVariablesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List all instance-level variables </td><td>  -  </td></tr>
     </table>
     */
    public ListInstanceVariablesRequestBuilder listInstanceVariables() throws IllegalArgumentException {
        return new ListInstanceVariablesRequestBuilder();
    }
    private okhttp3.Call updateInstanceVariableCall(String key, CivariablesUpdateInstanceVariableRequest civariablesUpdateInstanceVariableRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = civariablesUpdateInstanceVariableRequest;

        // create path and map variables
        String localVarPath = "/api/v4/admin/ci/variables/{key}"
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInstanceVariableValidateBeforeCall(String key, CivariablesUpdateInstanceVariableRequest civariablesUpdateInstanceVariableRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateInstanceVariable(Async)");
        }

        return updateInstanceVariableCall(key, civariablesUpdateInstanceVariableRequest, _callback);

    }


    private ApiResponse<APIEntitiesCiVariable> updateInstanceVariableWithHttpInfo(String key, CivariablesUpdateInstanceVariableRequest civariablesUpdateInstanceVariableRequest) throws ApiException {
        okhttp3.Call localVarCall = updateInstanceVariableValidateBeforeCall(key, civariablesUpdateInstanceVariableRequest, null);
        Type localVarReturnType = new TypeToken<APIEntitiesCiVariable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateInstanceVariableAsync(String key, CivariablesUpdateInstanceVariableRequest civariablesUpdateInstanceVariableRequest, final ApiCallback<APIEntitiesCiVariable> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateInstanceVariableValidateBeforeCall(key, civariablesUpdateInstanceVariableRequest, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesCiVariable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateInstanceVariableRequestBuilder {
        private final String key;
        private String value;
        private Boolean _protected;
        private Boolean masked;
        private Boolean raw;
        private String variableType;

        private UpdateInstanceVariableRequestBuilder(String key) {
            this.key = key;
        }

        /**
         * Set value
         * @param value The value of a variable (optional)
         * @return UpdateInstanceVariableRequestBuilder
         */
        public UpdateInstanceVariableRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Set _protected
         * @param _protected Whether the variable is protected (optional)
         * @return UpdateInstanceVariableRequestBuilder
         */
        public UpdateInstanceVariableRequestBuilder _protected(Boolean _protected) {
            this._protected = _protected;
            return this;
        }
        
        /**
         * Set masked
         * @param masked Whether the variable is masked (optional)
         * @return UpdateInstanceVariableRequestBuilder
         */
        public UpdateInstanceVariableRequestBuilder masked(Boolean masked) {
            this.masked = masked;
            return this;
        }
        
        /**
         * Set raw
         * @param raw Whether the variable will be expanded (optional)
         * @return UpdateInstanceVariableRequestBuilder
         */
        public UpdateInstanceVariableRequestBuilder raw(Boolean raw) {
            this.raw = raw;
            return this;
        }
        
        /**
         * Set variableType
         * @param variableType The type of a variable. Available types are: env_var (default) and file (optional)
         * @return UpdateInstanceVariableRequestBuilder
         */
        public UpdateInstanceVariableRequestBuilder variableType(String variableType) {
            this.variableType = variableType;
            return this;
        }
        
        /**
         * Build call for updateInstanceVariable
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update an instance-level variable </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Instance Variable Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CivariablesUpdateInstanceVariableRequest civariablesUpdateInstanceVariableRequest = buildBodyParams();
            return updateInstanceVariableCall(key, civariablesUpdateInstanceVariableRequest, _callback);
        }

        private CivariablesUpdateInstanceVariableRequest buildBodyParams() {
            CivariablesUpdateInstanceVariableRequest civariablesUpdateInstanceVariableRequest = new CivariablesUpdateInstanceVariableRequest();
            civariablesUpdateInstanceVariableRequest.value(this.value);
            civariablesUpdateInstanceVariableRequest._protected(this._protected);
            civariablesUpdateInstanceVariableRequest.masked(this.masked);
            civariablesUpdateInstanceVariableRequest.raw(this.raw);
            if (this.variableType != null)
            civariablesUpdateInstanceVariableRequest.variableType(CivariablesUpdateInstanceVariableRequest.VariableTypeEnum.fromValue(this.variableType));
            return civariablesUpdateInstanceVariableRequest;
        }

        /**
         * Execute updateInstanceVariable request
         * @return APIEntitiesCiVariable
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update an instance-level variable </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Instance Variable Not Found </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesCiVariable execute() throws ApiException {
            CivariablesUpdateInstanceVariableRequest civariablesUpdateInstanceVariableRequest = buildBodyParams();
            ApiResponse<APIEntitiesCiVariable> localVarResp = updateInstanceVariableWithHttpInfo(key, civariablesUpdateInstanceVariableRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateInstanceVariable request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesCiVariable&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update an instance-level variable </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Instance Variable Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesCiVariable> executeWithHttpInfo() throws ApiException {
            CivariablesUpdateInstanceVariableRequest civariablesUpdateInstanceVariableRequest = buildBodyParams();
            return updateInstanceVariableWithHttpInfo(key, civariablesUpdateInstanceVariableRequest);
        }

        /**
         * Execute updateInstanceVariable request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Update an instance-level variable </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Instance Variable Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesCiVariable> _callback) throws ApiException {
            CivariablesUpdateInstanceVariableRequest civariablesUpdateInstanceVariableRequest = buildBodyParams();
            return updateInstanceVariableAsync(key, civariablesUpdateInstanceVariableRequest, _callback);
        }
    }

    /**
     * 
     * Update an instance-level variable
     * @param key The key of a variable (required)
     * @return UpdateInstanceVariableRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update an instance-level variable </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance Variable Not Found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateInstanceVariableRequestBuilder updateInstanceVariable(String key) throws IllegalArgumentException {
        if (key == null) throw new IllegalArgumentException("\"key\" is required but got null");
            

        return new UpdateInstanceVariableRequestBuilder(key);
    }
}
