/*
 * GitLab API
 * An OpenAPI definition for the GitLab REST API. Few API resources or endpoints are currently included. The intent is to expand this to match the entire Markdown documentation of the API: <https://docs.gitlab.com/ee/api/>. Contributions are welcome.  When viewing this on gitlab.com, you can test API calls directly from the browser against the `gitlab.com` instance, if you are logged in. The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie), so each request is made using your account.  Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html) 
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.APIEntitiesBatchedBackgroundMigration;
import com.konfigthis.client.model.BatchedbackgroundmigrationsPauseMigrationRequest;
import com.konfigthis.client.model.BatchedbackgroundmigrationsResumeMigrationRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BatchedBackgroundMigrationsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BatchedBackgroundMigrationsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public BatchedBackgroundMigrationsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKeyAuth() == null) {
            throw new IllegalArgumentException("\"Private-Token\" is required but no API key was provided. Please set \"Private-Token\" with ApiClient#setApiKeyAuth(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getMigrationCall(Integer id, String database, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/admin/batched_background_migrations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (database != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("database", database));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMigrationValidateBeforeCall(Integer id, String database, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getMigration(Async)");
        }

        return getMigrationCall(id, database, _callback);

    }


    private ApiResponse<APIEntitiesBatchedBackgroundMigration> getMigrationWithHttpInfo(Integer id, String database) throws ApiException {
        okhttp3.Call localVarCall = getMigrationValidateBeforeCall(id, database, null);
        Type localVarReturnType = new TypeToken<APIEntitiesBatchedBackgroundMigration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMigrationAsync(Integer id, String database, final ApiCallback<APIEntitiesBatchedBackgroundMigration> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMigrationValidateBeforeCall(id, database, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesBatchedBackgroundMigration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMigrationRequestBuilder {
        private final Integer id;
        private String database;

        private GetMigrationRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Set database
         * @param database The name of the database (optional, default to main)
         * @return GetMigrationRequestBuilder
         */
        public GetMigrationRequestBuilder database(String database) {
            this.database = database;
            return this;
        }
        
        /**
         * Build call for getMigration
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Retrieve a batched background migration </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> 404 Not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMigrationCall(id, database, _callback);
        }


        /**
         * Execute getMigration request
         * @return APIEntitiesBatchedBackgroundMigration
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Retrieve a batched background migration </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> 404 Not found </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesBatchedBackgroundMigration execute() throws ApiException {
            ApiResponse<APIEntitiesBatchedBackgroundMigration> localVarResp = getMigrationWithHttpInfo(id, database);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMigration request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesBatchedBackgroundMigration&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Retrieve a batched background migration </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> 404 Not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesBatchedBackgroundMigration> executeWithHttpInfo() throws ApiException {
            return getMigrationWithHttpInfo(id, database);
        }

        /**
         * Execute getMigration request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Retrieve a batched background migration </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> 404 Not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesBatchedBackgroundMigration> _callback) throws ApiException {
            return getMigrationAsync(id, database, _callback);
        }
    }

    /**
     * 
     * Retrieve a batched background migration
     * @param id The batched background migration id (required)
     * @return GetMigrationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve a batched background migration </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 Not found </td><td>  -  </td></tr>
     </table>
     */
    public GetMigrationRequestBuilder getMigration(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetMigrationRequestBuilder(id);
    }
    private okhttp3.Call listCall(String database, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/admin/batched_background_migrations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (database != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("database", database));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String database, final ApiCallback _callback) throws ApiException {
        return listCall(database, _callback);

    }


    private ApiResponse<List<APIEntitiesBatchedBackgroundMigration>> listWithHttpInfo(String database) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(database, null);
        Type localVarReturnType = new TypeToken<List<APIEntitiesBatchedBackgroundMigration>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(String database, final ApiCallback<List<APIEntitiesBatchedBackgroundMigration>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(database, _callback);
        Type localVarReturnType = new TypeToken<List<APIEntitiesBatchedBackgroundMigration>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private String database;

        private ListRequestBuilder() {
        }

        /**
         * Set database
         * @param database The name of the database, the default &#x60;main&#x60; (optional, default to main)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder database(String database) {
            this.database = database;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get the list of batched background migrations </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(database, _callback);
        }


        /**
         * Execute list request
         * @return List&lt;APIEntitiesBatchedBackgroundMigration&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get the list of batched background migrations </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public List<APIEntitiesBatchedBackgroundMigration> execute() throws ApiException {
            ApiResponse<List<APIEntitiesBatchedBackgroundMigration>> localVarResp = listWithHttpInfo(database);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;List&lt;APIEntitiesBatchedBackgroundMigration&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get the list of batched background migrations </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<APIEntitiesBatchedBackgroundMigration>> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(database);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get the list of batched background migrations </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<APIEntitiesBatchedBackgroundMigration>> _callback) throws ApiException {
            return listAsync(database, _callback);
        }
    }

    /**
     * 
     * Get the list of batched background migrations
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the list of batched background migrations </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call pauseMigrationCall(Integer id, BatchedbackgroundmigrationsPauseMigrationRequest batchedbackgroundmigrationsPauseMigrationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchedbackgroundmigrationsPauseMigrationRequest;

        // create path and map variables
        String localVarPath = "/api/v4/admin/batched_background_migrations/{id}/pause"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pauseMigrationValidateBeforeCall(Integer id, BatchedbackgroundmigrationsPauseMigrationRequest batchedbackgroundmigrationsPauseMigrationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling pauseMigration(Async)");
        }

        return pauseMigrationCall(id, batchedbackgroundmigrationsPauseMigrationRequest, _callback);

    }


    private ApiResponse<APIEntitiesBatchedBackgroundMigration> pauseMigrationWithHttpInfo(Integer id, BatchedbackgroundmigrationsPauseMigrationRequest batchedbackgroundmigrationsPauseMigrationRequest) throws ApiException {
        okhttp3.Call localVarCall = pauseMigrationValidateBeforeCall(id, batchedbackgroundmigrationsPauseMigrationRequest, null);
        Type localVarReturnType = new TypeToken<APIEntitiesBatchedBackgroundMigration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call pauseMigrationAsync(Integer id, BatchedbackgroundmigrationsPauseMigrationRequest batchedbackgroundmigrationsPauseMigrationRequest, final ApiCallback<APIEntitiesBatchedBackgroundMigration> _callback) throws ApiException {

        okhttp3.Call localVarCall = pauseMigrationValidateBeforeCall(id, batchedbackgroundmigrationsPauseMigrationRequest, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesBatchedBackgroundMigration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PauseMigrationRequestBuilder {
        private final Integer id;
        private String database;

        private PauseMigrationRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Set database
         * @param database The name of the database (optional, default to main)
         * @return PauseMigrationRequestBuilder
         */
        public PauseMigrationRequestBuilder database(String database) {
            this.database = database;
            return this;
        }
        
        /**
         * Build call for pauseMigration
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pause a batched background migration </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> 404 Not found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> You can pause only &#x60;active&#x60; batched background migrations. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BatchedbackgroundmigrationsPauseMigrationRequest batchedbackgroundmigrationsPauseMigrationRequest = buildBodyParams();
            return pauseMigrationCall(id, batchedbackgroundmigrationsPauseMigrationRequest, _callback);
        }

        private BatchedbackgroundmigrationsPauseMigrationRequest buildBodyParams() {
            BatchedbackgroundmigrationsPauseMigrationRequest batchedbackgroundmigrationsPauseMigrationRequest = new BatchedbackgroundmigrationsPauseMigrationRequest();
            if (this.database != null)
            batchedbackgroundmigrationsPauseMigrationRequest.database(BatchedbackgroundmigrationsPauseMigrationRequest.DatabaseEnum.fromValue(this.database));
            return batchedbackgroundmigrationsPauseMigrationRequest;
        }

        /**
         * Execute pauseMigration request
         * @return APIEntitiesBatchedBackgroundMigration
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pause a batched background migration </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> 404 Not found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> You can pause only &#x60;active&#x60; batched background migrations. </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesBatchedBackgroundMigration execute() throws ApiException {
            BatchedbackgroundmigrationsPauseMigrationRequest batchedbackgroundmigrationsPauseMigrationRequest = buildBodyParams();
            ApiResponse<APIEntitiesBatchedBackgroundMigration> localVarResp = pauseMigrationWithHttpInfo(id, batchedbackgroundmigrationsPauseMigrationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute pauseMigration request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesBatchedBackgroundMigration&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pause a batched background migration </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> 404 Not found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> You can pause only &#x60;active&#x60; batched background migrations. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesBatchedBackgroundMigration> executeWithHttpInfo() throws ApiException {
            BatchedbackgroundmigrationsPauseMigrationRequest batchedbackgroundmigrationsPauseMigrationRequest = buildBodyParams();
            return pauseMigrationWithHttpInfo(id, batchedbackgroundmigrationsPauseMigrationRequest);
        }

        /**
         * Execute pauseMigration request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Pause a batched background migration </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> 404 Not found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> You can pause only &#x60;active&#x60; batched background migrations. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesBatchedBackgroundMigration> _callback) throws ApiException {
            BatchedbackgroundmigrationsPauseMigrationRequest batchedbackgroundmigrationsPauseMigrationRequest = buildBodyParams();
            return pauseMigrationAsync(id, batchedbackgroundmigrationsPauseMigrationRequest, _callback);
        }
    }

    /**
     * 
     * Pause a batched background migration
     * @param id The batched background migration id (required)
     * @return PauseMigrationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pause a batched background migration </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You can pause only &#x60;active&#x60; batched background migrations. </td><td>  -  </td></tr>
     </table>
     */
    public PauseMigrationRequestBuilder pauseMigration(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new PauseMigrationRequestBuilder(id);
    }
    private okhttp3.Call resumeMigrationCall(Integer id, BatchedbackgroundmigrationsResumeMigrationRequest batchedbackgroundmigrationsResumeMigrationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchedbackgroundmigrationsResumeMigrationRequest;

        // create path and map variables
        String localVarPath = "/api/v4/admin/batched_background_migrations/{id}/resume"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resumeMigrationValidateBeforeCall(Integer id, BatchedbackgroundmigrationsResumeMigrationRequest batchedbackgroundmigrationsResumeMigrationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling resumeMigration(Async)");
        }

        return resumeMigrationCall(id, batchedbackgroundmigrationsResumeMigrationRequest, _callback);

    }


    private ApiResponse<APIEntitiesBatchedBackgroundMigration> resumeMigrationWithHttpInfo(Integer id, BatchedbackgroundmigrationsResumeMigrationRequest batchedbackgroundmigrationsResumeMigrationRequest) throws ApiException {
        okhttp3.Call localVarCall = resumeMigrationValidateBeforeCall(id, batchedbackgroundmigrationsResumeMigrationRequest, null);
        Type localVarReturnType = new TypeToken<APIEntitiesBatchedBackgroundMigration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call resumeMigrationAsync(Integer id, BatchedbackgroundmigrationsResumeMigrationRequest batchedbackgroundmigrationsResumeMigrationRequest, final ApiCallback<APIEntitiesBatchedBackgroundMigration> _callback) throws ApiException {

        okhttp3.Call localVarCall = resumeMigrationValidateBeforeCall(id, batchedbackgroundmigrationsResumeMigrationRequest, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesBatchedBackgroundMigration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ResumeMigrationRequestBuilder {
        private final Integer id;
        private String database;

        private ResumeMigrationRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Set database
         * @param database The name of the database (optional, default to main)
         * @return ResumeMigrationRequestBuilder
         */
        public ResumeMigrationRequestBuilder database(String database) {
            this.database = database;
            return this;
        }
        
        /**
         * Build call for resumeMigration
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Resume a batched background migration </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> 404 Not found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> You can resume only &#x60;paused&#x60; batched background migrations. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BatchedbackgroundmigrationsResumeMigrationRequest batchedbackgroundmigrationsResumeMigrationRequest = buildBodyParams();
            return resumeMigrationCall(id, batchedbackgroundmigrationsResumeMigrationRequest, _callback);
        }

        private BatchedbackgroundmigrationsResumeMigrationRequest buildBodyParams() {
            BatchedbackgroundmigrationsResumeMigrationRequest batchedbackgroundmigrationsResumeMigrationRequest = new BatchedbackgroundmigrationsResumeMigrationRequest();
            if (this.database != null)
            batchedbackgroundmigrationsResumeMigrationRequest.database(BatchedbackgroundmigrationsResumeMigrationRequest.DatabaseEnum.fromValue(this.database));
            return batchedbackgroundmigrationsResumeMigrationRequest;
        }

        /**
         * Execute resumeMigration request
         * @return APIEntitiesBatchedBackgroundMigration
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Resume a batched background migration </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> 404 Not found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> You can resume only &#x60;paused&#x60; batched background migrations. </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesBatchedBackgroundMigration execute() throws ApiException {
            BatchedbackgroundmigrationsResumeMigrationRequest batchedbackgroundmigrationsResumeMigrationRequest = buildBodyParams();
            ApiResponse<APIEntitiesBatchedBackgroundMigration> localVarResp = resumeMigrationWithHttpInfo(id, batchedbackgroundmigrationsResumeMigrationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute resumeMigration request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesBatchedBackgroundMigration&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Resume a batched background migration </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> 404 Not found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> You can resume only &#x60;paused&#x60; batched background migrations. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesBatchedBackgroundMigration> executeWithHttpInfo() throws ApiException {
            BatchedbackgroundmigrationsResumeMigrationRequest batchedbackgroundmigrationsResumeMigrationRequest = buildBodyParams();
            return resumeMigrationWithHttpInfo(id, batchedbackgroundmigrationsResumeMigrationRequest);
        }

        /**
         * Execute resumeMigration request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Resume a batched background migration </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> 404 Not found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> You can resume only &#x60;paused&#x60; batched background migrations. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesBatchedBackgroundMigration> _callback) throws ApiException {
            BatchedbackgroundmigrationsResumeMigrationRequest batchedbackgroundmigrationsResumeMigrationRequest = buildBodyParams();
            return resumeMigrationAsync(id, batchedbackgroundmigrationsResumeMigrationRequest, _callback);
        }
    }

    /**
     * 
     * Resume a batched background migration
     * @param id The batched background migration id (required)
     * @return ResumeMigrationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Resume a batched background migration </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404 Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You can resume only &#x60;paused&#x60; batched background migrations. </td><td>  -  </td></tr>
     </table>
     */
    public ResumeMigrationRequestBuilder resumeMigration(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new ResumeMigrationRequestBuilder(id);
    }
}
