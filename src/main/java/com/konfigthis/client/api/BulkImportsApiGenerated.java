/*
 * GitLab API
 * An OpenAPI definition for the GitLab REST API. Few API resources or endpoints are currently included. The intent is to expand this to match the entire Markdown documentation of the API: <https://docs.gitlab.com/ee/api/>. Contributions are welcome.  When viewing this on gitlab.com, you can test API calls directly from the browser against the `gitlab.com` instance, if you are logged in. The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie), so each request is made using your account.  Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html) 
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.APIEntitiesBulkImport;
import com.konfigthis.client.model.APIEntitiesBulkImports;
import com.konfigthis.client.model.BulkimportsStartNewMigrationRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BulkImportsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BulkImportsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public BulkImportsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKeyAuth() == null) {
            throw new IllegalArgumentException("\"Private-Token\" is required but no API key was provided. Please set \"Private-Token\" with ApiClient#setApiKeyAuth(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getEntityDetailsCall(Integer importId, Integer entityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/bulk_imports/{import_id}/entities/{entity_id}"
            .replace("{" + "import_id" + "}", localVarApiClient.escapeString(importId.toString()))
            .replace("{" + "entity_id" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEntityDetailsValidateBeforeCall(Integer importId, Integer entityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'importId' is set
        if (importId == null) {
            throw new ApiException("Missing the required parameter 'importId' when calling getEntityDetails(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling getEntityDetails(Async)");
        }

        return getEntityDetailsCall(importId, entityId, _callback);

    }


    private ApiResponse<APIEntitiesBulkImports> getEntityDetailsWithHttpInfo(Integer importId, Integer entityId) throws ApiException {
        okhttp3.Call localVarCall = getEntityDetailsValidateBeforeCall(importId, entityId, null);
        Type localVarReturnType = new TypeToken<APIEntitiesBulkImports>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEntityDetailsAsync(Integer importId, Integer entityId, final ApiCallback<APIEntitiesBulkImports> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEntityDetailsValidateBeforeCall(importId, entityId, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesBulkImports>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEntityDetailsRequestBuilder {
        private final Integer importId;
        private final Integer entityId;

        private GetEntityDetailsRequestBuilder(Integer importId, Integer entityId) {
            this.importId = importId;
            this.entityId = entityId;
        }

        /**
         * Build call for getEntityDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get GitLab Migration entity details </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEntityDetailsCall(importId, entityId, _callback);
        }


        /**
         * Execute getEntityDetails request
         * @return APIEntitiesBulkImports
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get GitLab Migration entity details </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesBulkImports execute() throws ApiException {
            ApiResponse<APIEntitiesBulkImports> localVarResp = getEntityDetailsWithHttpInfo(importId, entityId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEntityDetails request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesBulkImports&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get GitLab Migration entity details </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesBulkImports> executeWithHttpInfo() throws ApiException {
            return getEntityDetailsWithHttpInfo(importId, entityId);
        }

        /**
         * Execute getEntityDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get GitLab Migration entity details </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesBulkImports> _callback) throws ApiException {
            return getEntityDetailsAsync(importId, entityId, _callback);
        }
    }

    /**
     * Get GitLab Migration entity details
     * This feature was introduced in GitLab 14.1.
     * @param importId The ID of user&#39;s GitLab Migration (required)
     * @param entityId The ID of GitLab Migration entity (required)
     * @return GetEntityDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get GitLab Migration entity details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     */
    public GetEntityDetailsRequestBuilder getEntityDetails(Integer importId, Integer entityId) throws IllegalArgumentException {
        if (importId == null) throw new IllegalArgumentException("\"importId\" is required but got null");
        if (entityId == null) throw new IllegalArgumentException("\"entityId\" is required but got null");
        return new GetEntityDetailsRequestBuilder(importId, entityId);
    }
    private okhttp3.Call getMigrationDetailsCall(Integer importId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/bulk_imports/{import_id}"
            .replace("{" + "import_id" + "}", localVarApiClient.escapeString(importId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMigrationDetailsValidateBeforeCall(Integer importId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'importId' is set
        if (importId == null) {
            throw new ApiException("Missing the required parameter 'importId' when calling getMigrationDetails(Async)");
        }

        return getMigrationDetailsCall(importId, _callback);

    }


    private ApiResponse<APIEntitiesBulkImport> getMigrationDetailsWithHttpInfo(Integer importId) throws ApiException {
        okhttp3.Call localVarCall = getMigrationDetailsValidateBeforeCall(importId, null);
        Type localVarReturnType = new TypeToken<APIEntitiesBulkImport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMigrationDetailsAsync(Integer importId, final ApiCallback<APIEntitiesBulkImport> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMigrationDetailsValidateBeforeCall(importId, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesBulkImport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMigrationDetailsRequestBuilder {
        private final Integer importId;

        private GetMigrationDetailsRequestBuilder(Integer importId) {
            this.importId = importId;
        }

        /**
         * Build call for getMigrationDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get GitLab Migration details </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMigrationDetailsCall(importId, _callback);
        }


        /**
         * Execute getMigrationDetails request
         * @return APIEntitiesBulkImport
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get GitLab Migration details </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesBulkImport execute() throws ApiException {
            ApiResponse<APIEntitiesBulkImport> localVarResp = getMigrationDetailsWithHttpInfo(importId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMigrationDetails request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesBulkImport&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get GitLab Migration details </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesBulkImport> executeWithHttpInfo() throws ApiException {
            return getMigrationDetailsWithHttpInfo(importId);
        }

        /**
         * Execute getMigrationDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Get GitLab Migration details </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesBulkImport> _callback) throws ApiException {
            return getMigrationDetailsAsync(importId, _callback);
        }
    }

    /**
     * Get GitLab Migration details
     * This feature was introduced in GitLab 14.1.
     * @param importId The ID of user&#39;s GitLab Migration (required)
     * @return GetMigrationDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get GitLab Migration details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     */
    public GetMigrationDetailsRequestBuilder getMigrationDetails(Integer importId) throws IllegalArgumentException {
        if (importId == null) throw new IllegalArgumentException("\"importId\" is required but got null");
        return new GetMigrationDetailsRequestBuilder(importId);
    }
    private okhttp3.Call listEntitiesCall(Integer importId, String status, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/bulk_imports/{import_id}/entities"
            .replace("{" + "import_id" + "}", localVarApiClient.escapeString(importId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEntitiesValidateBeforeCall(Integer importId, String status, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'importId' is set
        if (importId == null) {
            throw new ApiException("Missing the required parameter 'importId' when calling listEntities(Async)");
        }

        return listEntitiesCall(importId, status, page, perPage, _callback);

    }


    private ApiResponse<List<APIEntitiesBulkImports>> listEntitiesWithHttpInfo(Integer importId, String status, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listEntitiesValidateBeforeCall(importId, status, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<APIEntitiesBulkImports>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listEntitiesAsync(Integer importId, String status, Integer page, Integer perPage, final ApiCallback<List<APIEntitiesBulkImports>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEntitiesValidateBeforeCall(importId, status, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<APIEntitiesBulkImports>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListEntitiesRequestBuilder {
        private final Integer importId;
        private String status;
        private Integer page;
        private Integer perPage;

        private ListEntitiesRequestBuilder(Integer importId) {
            this.importId = importId;
        }

        /**
         * Set status
         * @param status Return import entities with specified status (optional)
         * @return ListEntitiesRequestBuilder
         */
        public ListEntitiesRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set page
         * @param page Current page number (optional, default to 1)
         * @return ListEntitiesRequestBuilder
         */
        public ListEntitiesRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of items per page (optional, default to 20)
         * @return ListEntitiesRequestBuilder
         */
        public ListEntitiesRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for listEntities
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List GitLab Migration entities </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listEntitiesCall(importId, status, page, perPage, _callback);
        }


        /**
         * Execute listEntities request
         * @return List&lt;APIEntitiesBulkImports&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List GitLab Migration entities </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
         </table>
         */
        public List<APIEntitiesBulkImports> execute() throws ApiException {
            ApiResponse<List<APIEntitiesBulkImports>> localVarResp = listEntitiesWithHttpInfo(importId, status, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listEntities request with HTTP info returned
         * @return ApiResponse&lt;List&lt;APIEntitiesBulkImports&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List GitLab Migration entities </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<APIEntitiesBulkImports>> executeWithHttpInfo() throws ApiException {
            return listEntitiesWithHttpInfo(importId, status, page, perPage);
        }

        /**
         * Execute listEntities request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List GitLab Migration entities </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<APIEntitiesBulkImports>> _callback) throws ApiException {
            return listEntitiesAsync(importId, status, page, perPage, _callback);
        }
    }

    /**
     * List GitLab Migration entities
     * This feature was introduced in GitLab 14.1.
     * @param importId The ID of user&#39;s GitLab Migration (required)
     * @return ListEntitiesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List GitLab Migration entities </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     */
    public ListEntitiesRequestBuilder listEntities(Integer importId) throws IllegalArgumentException {
        if (importId == null) throw new IllegalArgumentException("\"importId\" is required but got null");
        return new ListEntitiesRequestBuilder(importId);
    }
    private okhttp3.Call listEntities_0Call(Integer page, Integer perPage, String sort, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/bulk_imports/entities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEntities_0ValidateBeforeCall(Integer page, Integer perPage, String sort, String status, final ApiCallback _callback) throws ApiException {
        return listEntities_0Call(page, perPage, sort, status, _callback);

    }


    private ApiResponse<List<APIEntitiesBulkImports>> listEntities_0WithHttpInfo(Integer page, Integer perPage, String sort, String status) throws ApiException {
        okhttp3.Call localVarCall = listEntities_0ValidateBeforeCall(page, perPage, sort, status, null);
        Type localVarReturnType = new TypeToken<List<APIEntitiesBulkImports>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listEntities_0Async(Integer page, Integer perPage, String sort, String status, final ApiCallback<List<APIEntitiesBulkImports>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEntities_0ValidateBeforeCall(page, perPage, sort, status, _callback);
        Type localVarReturnType = new TypeToken<List<APIEntitiesBulkImports>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListEntities0RequestBuilder {
        private Integer page;
        private Integer perPage;
        private String sort;
        private String status;

        private ListEntities0RequestBuilder() {
        }

        /**
         * Set page
         * @param page Current page number (optional, default to 1)
         * @return ListEntities0RequestBuilder
         */
        public ListEntities0RequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of items per page (optional, default to 20)
         * @return ListEntities0RequestBuilder
         */
        public ListEntities0RequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Return GitLab Migrations sorted in created by &#x60;asc&#x60; or &#x60;desc&#x60; order. (optional, default to desc)
         * @return ListEntities0RequestBuilder
         */
        public ListEntities0RequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set status
         * @param status Return all GitLab Migrations&#39; entities with specified status (optional)
         * @return ListEntities0RequestBuilder
         */
        public ListEntities0RequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for listEntities_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List all GitLab Migrations&#39; entities </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listEntities_0Call(page, perPage, sort, status, _callback);
        }


        /**
         * Execute listEntities_0 request
         * @return List&lt;APIEntitiesBulkImports&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List all GitLab Migrations&#39; entities </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
         </table>
         */
        public List<APIEntitiesBulkImports> execute() throws ApiException {
            ApiResponse<List<APIEntitiesBulkImports>> localVarResp = listEntities_0WithHttpInfo(page, perPage, sort, status);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listEntities_0 request with HTTP info returned
         * @return ApiResponse&lt;List&lt;APIEntitiesBulkImports&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List all GitLab Migrations&#39; entities </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<APIEntitiesBulkImports>> executeWithHttpInfo() throws ApiException {
            return listEntities_0WithHttpInfo(page, perPage, sort, status);
        }

        /**
         * Execute listEntities_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List all GitLab Migrations&#39; entities </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<APIEntitiesBulkImports>> _callback) throws ApiException {
            return listEntities_0Async(page, perPage, sort, status, _callback);
        }
    }

    /**
     * List all GitLab Migrations&#39; entities
     * This feature was introduced in GitLab 14.1.
     * @return ListEntities0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List all GitLab Migrations&#39; entities </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     */
    public ListEntities0RequestBuilder listEntities_0() throws IllegalArgumentException {
        return new ListEntities0RequestBuilder();
    }
    private okhttp3.Call listMigrationsCall(Integer page, Integer perPage, String sort, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v4/bulk_imports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMigrationsValidateBeforeCall(Integer page, Integer perPage, String sort, String status, final ApiCallback _callback) throws ApiException {
        return listMigrationsCall(page, perPage, sort, status, _callback);

    }


    private ApiResponse<List<APIEntitiesBulkImport>> listMigrationsWithHttpInfo(Integer page, Integer perPage, String sort, String status) throws ApiException {
        okhttp3.Call localVarCall = listMigrationsValidateBeforeCall(page, perPage, sort, status, null);
        Type localVarReturnType = new TypeToken<List<APIEntitiesBulkImport>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listMigrationsAsync(Integer page, Integer perPage, String sort, String status, final ApiCallback<List<APIEntitiesBulkImport>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMigrationsValidateBeforeCall(page, perPage, sort, status, _callback);
        Type localVarReturnType = new TypeToken<List<APIEntitiesBulkImport>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListMigrationsRequestBuilder {
        private Integer page;
        private Integer perPage;
        private String sort;
        private String status;

        private ListMigrationsRequestBuilder() {
        }

        /**
         * Set page
         * @param page Current page number (optional, default to 1)
         * @return ListMigrationsRequestBuilder
         */
        public ListMigrationsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of items per page (optional, default to 20)
         * @return ListMigrationsRequestBuilder
         */
        public ListMigrationsRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Return GitLab Migrations sorted in created by &#x60;asc&#x60; or &#x60;desc&#x60; order. (optional, default to desc)
         * @return ListMigrationsRequestBuilder
         */
        public ListMigrationsRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set status
         * @param status Return GitLab Migrations with specified status (optional)
         * @return ListMigrationsRequestBuilder
         */
        public ListMigrationsRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for listMigrations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List all GitLab Migrations </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMigrationsCall(page, perPage, sort, status, _callback);
        }


        /**
         * Execute listMigrations request
         * @return List&lt;APIEntitiesBulkImport&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List all GitLab Migrations </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
         </table>
         */
        public List<APIEntitiesBulkImport> execute() throws ApiException {
            ApiResponse<List<APIEntitiesBulkImport>> localVarResp = listMigrationsWithHttpInfo(page, perPage, sort, status);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listMigrations request with HTTP info returned
         * @return ApiResponse&lt;List&lt;APIEntitiesBulkImport&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List all GitLab Migrations </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<APIEntitiesBulkImport>> executeWithHttpInfo() throws ApiException {
            return listMigrationsWithHttpInfo(page, perPage, sort, status);
        }

        /**
         * Execute listMigrations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List all GitLab Migrations </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<APIEntitiesBulkImport>> _callback) throws ApiException {
            return listMigrationsAsync(page, perPage, sort, status, _callback);
        }
    }

    /**
     * List all GitLab Migrations
     * This feature was introduced in GitLab 14.1.
     * @return ListMigrationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List all GitLab Migrations </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     */
    public ListMigrationsRequestBuilder listMigrations() throws IllegalArgumentException {
        return new ListMigrationsRequestBuilder();
    }
    private okhttp3.Call startNewMigrationCall(String configurationUrl, String configurationAccessToken, List<String> entitiesSourceType, List<String> entitiesSourceFullPath, List<String> entitiesDestinationNamespace, BulkimportsStartNewMigrationRequest bulkimportsStartNewMigrationRequest, List<String> entitiesDestinationSlug, List<String> entitiesDestinationName, List<Boolean> entitiesMigrateProjects, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bulkimportsStartNewMigrationRequest;

        // create path and map variables
        String localVarPath = "/api/v4/bulk_imports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (configurationUrl != null) {
            localVarFormParams.put("configuration[url]", configurationUrl);
        }

        if (configurationAccessToken != null) {
            localVarFormParams.put("configuration[access_token]", configurationAccessToken);
        }

        if (entitiesSourceType != null) {
            localVarFormParams.put("entities[source_type]", entitiesSourceType);
        }

        if (entitiesSourceFullPath != null) {
            localVarFormParams.put("entities[source_full_path]", entitiesSourceFullPath);
        }

        if (entitiesDestinationNamespace != null) {
            localVarFormParams.put("entities[destination_namespace]", entitiesDestinationNamespace);
        }

        if (entitiesDestinationSlug != null) {
            localVarFormParams.put("entities[destination_slug]", entitiesDestinationSlug);
        }

        if (entitiesDestinationName != null) {
            localVarFormParams.put("entities[destination_name]", entitiesDestinationName);
        }

        if (entitiesMigrateProjects != null) {
            localVarFormParams.put("entities[migrate_projects]", entitiesMigrateProjects);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startNewMigrationValidateBeforeCall(String configurationUrl, String configurationAccessToken, List<String> entitiesSourceType, List<String> entitiesSourceFullPath, List<String> entitiesDestinationNamespace, BulkimportsStartNewMigrationRequest bulkimportsStartNewMigrationRequest, List<String> entitiesDestinationSlug, List<String> entitiesDestinationName, List<Boolean> entitiesMigrateProjects, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'configurationUrl' is set
        if (configurationUrl == null) {
            throw new ApiException("Missing the required parameter 'configurationUrl' when calling startNewMigration(Async)");
        }

        // verify the required parameter 'configurationAccessToken' is set
        if (configurationAccessToken == null) {
            throw new ApiException("Missing the required parameter 'configurationAccessToken' when calling startNewMigration(Async)");
        }

        // verify the required parameter 'entitiesSourceType' is set
        if (entitiesSourceType == null) {
            throw new ApiException("Missing the required parameter 'entitiesSourceType' when calling startNewMigration(Async)");
        }

        // verify the required parameter 'entitiesSourceFullPath' is set
        if (entitiesSourceFullPath == null) {
            throw new ApiException("Missing the required parameter 'entitiesSourceFullPath' when calling startNewMigration(Async)");
        }

        // verify the required parameter 'entitiesDestinationNamespace' is set
        if (entitiesDestinationNamespace == null) {
            throw new ApiException("Missing the required parameter 'entitiesDestinationNamespace' when calling startNewMigration(Async)");
        }

        // verify the required parameter 'bulkimportsStartNewMigrationRequest' is set
        if (bulkimportsStartNewMigrationRequest == null) {
            throw new ApiException("Missing the required parameter 'bulkimportsStartNewMigrationRequest' when calling startNewMigration(Async)");
        }

        return startNewMigrationCall(configurationUrl, configurationAccessToken, entitiesSourceType, entitiesSourceFullPath, entitiesDestinationNamespace, bulkimportsStartNewMigrationRequest, entitiesDestinationSlug, entitiesDestinationName, entitiesMigrateProjects, _callback);

    }


    private ApiResponse<APIEntitiesBulkImport> startNewMigrationWithHttpInfo(String configurationUrl, String configurationAccessToken, List<String> entitiesSourceType, List<String> entitiesSourceFullPath, List<String> entitiesDestinationNamespace, BulkimportsStartNewMigrationRequest bulkimportsStartNewMigrationRequest, List<String> entitiesDestinationSlug, List<String> entitiesDestinationName, List<Boolean> entitiesMigrateProjects) throws ApiException {
        okhttp3.Call localVarCall = startNewMigrationValidateBeforeCall(configurationUrl, configurationAccessToken, entitiesSourceType, entitiesSourceFullPath, entitiesDestinationNamespace, bulkimportsStartNewMigrationRequest, entitiesDestinationSlug, entitiesDestinationName, entitiesMigrateProjects, null);
        Type localVarReturnType = new TypeToken<APIEntitiesBulkImport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call startNewMigrationAsync(String configurationUrl, String configurationAccessToken, List<String> entitiesSourceType, List<String> entitiesSourceFullPath, List<String> entitiesDestinationNamespace, BulkimportsStartNewMigrationRequest bulkimportsStartNewMigrationRequest, List<String> entitiesDestinationSlug, List<String> entitiesDestinationName, List<Boolean> entitiesMigrateProjects, final ApiCallback<APIEntitiesBulkImport> _callback) throws ApiException {

        okhttp3.Call localVarCall = startNewMigrationValidateBeforeCall(configurationUrl, configurationAccessToken, entitiesSourceType, entitiesSourceFullPath, entitiesDestinationNamespace, bulkimportsStartNewMigrationRequest, entitiesDestinationSlug, entitiesDestinationName, entitiesMigrateProjects, _callback);
        Type localVarReturnType = new TypeToken<APIEntitiesBulkImport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class StartNewMigrationRequestBuilder {
        private final String configurationUrl;
        private final String configurationAccessToken;
        private final List<String> entitiesSourceType;
        private final List<String> entitiesSourceFullPath;
        private final List<String> entitiesDestinationNamespace;
        private List<String> entitiesDestinationSlug;
        private List<String> entitiesDestinationName;
        private List<Boolean> entitiesMigrateProjects;

        private StartNewMigrationRequestBuilder(String configurationUrl, String configurationAccessToken, List<String> entitiesSourceType, List<String> entitiesSourceFullPath, List<String> entitiesDestinationNamespace) {
            this.configurationUrl = configurationUrl;
            this.configurationAccessToken = configurationAccessToken;
            this.entitiesSourceType = entitiesSourceType;
            this.entitiesSourceFullPath = entitiesSourceFullPath;
            this.entitiesDestinationNamespace = entitiesDestinationNamespace;
        }

        /**
         * Set entitiesDestinationSlug
         * @param entitiesDestinationSlug Destination slug for the entity (optional)
         * @return StartNewMigrationRequestBuilder
         */
        public StartNewMigrationRequestBuilder entitiesDestinationSlug(List<String> entitiesDestinationSlug) {
            this.entitiesDestinationSlug = entitiesDestinationSlug;
            return this;
        }
        
        /**
         * Set entitiesDestinationName
         * @param entitiesDestinationName Deprecated: Use :destination_slug instead. Destination slug for the entity (optional)
         * @return StartNewMigrationRequestBuilder
         */
        public StartNewMigrationRequestBuilder entitiesDestinationName(List<String> entitiesDestinationName) {
            this.entitiesDestinationName = entitiesDestinationName;
            return this;
        }
        
        /**
         * Set entitiesMigrateProjects
         * @param entitiesMigrateProjects Indicates group migration should include nested projects (optional)
         * @return StartNewMigrationRequestBuilder
         */
        public StartNewMigrationRequestBuilder entitiesMigrateProjects(List<Boolean> entitiesMigrateProjects) {
            this.entitiesMigrateProjects = entitiesMigrateProjects;
            return this;
        }
        
        /**
         * Build call for startNewMigration
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Start a new GitLab Migration </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BulkimportsStartNewMigrationRequest bulkimportsStartNewMigrationRequest = buildBodyParams();
            return startNewMigrationCall(configurationUrl, configurationAccessToken, entitiesSourceType, entitiesSourceFullPath, entitiesDestinationNamespace, bulkimportsStartNewMigrationRequest, entitiesDestinationSlug, entitiesDestinationName, entitiesMigrateProjects, _callback);
        }

        private BulkimportsStartNewMigrationRequest buildBodyParams() {
            BulkimportsStartNewMigrationRequest bulkimportsStartNewMigrationRequest = new BulkimportsStartNewMigrationRequest();
            bulkimportsStartNewMigrationRequest.configurationUrl(this.configurationUrl);
            bulkimportsStartNewMigrationRequest.configurationAccessToken(this.configurationAccessToken);
            if (this.entitiesSourceType != null)
            bulkimportsStartNewMigrationRequest.entitiesSourceType(BulkimportsStartNewMigrationRequest.EntitiesSourceTypeEnum.fromValue(this.entitiesSourceType));
            bulkimportsStartNewMigrationRequest.entitiesSourceFullPath(this.entitiesSourceFullPath);
            bulkimportsStartNewMigrationRequest.entitiesDestinationNamespace(this.entitiesDestinationNamespace);
            bulkimportsStartNewMigrationRequest.entitiesDestinationSlug(this.entitiesDestinationSlug);
            bulkimportsStartNewMigrationRequest.entitiesDestinationName(this.entitiesDestinationName);
            bulkimportsStartNewMigrationRequest.entitiesMigrateProjects(this.entitiesMigrateProjects);
            return bulkimportsStartNewMigrationRequest;
        }

        /**
         * Execute startNewMigration request
         * @return APIEntitiesBulkImport
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Start a new GitLab Migration </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
         </table>
         */
        public APIEntitiesBulkImport execute() throws ApiException {
            BulkimportsStartNewMigrationRequest bulkimportsStartNewMigrationRequest = buildBodyParams();
            ApiResponse<APIEntitiesBulkImport> localVarResp = startNewMigrationWithHttpInfo(configurationUrl, configurationAccessToken, entitiesSourceType, entitiesSourceFullPath, entitiesDestinationNamespace, bulkimportsStartNewMigrationRequest, entitiesDestinationSlug, entitiesDestinationName, entitiesMigrateProjects);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute startNewMigration request with HTTP info returned
         * @return ApiResponse&lt;APIEntitiesBulkImport&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Start a new GitLab Migration </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<APIEntitiesBulkImport> executeWithHttpInfo() throws ApiException {
            BulkimportsStartNewMigrationRequest bulkimportsStartNewMigrationRequest = buildBodyParams();
            return startNewMigrationWithHttpInfo(configurationUrl, configurationAccessToken, entitiesSourceType, entitiesSourceFullPath, entitiesDestinationNamespace, bulkimportsStartNewMigrationRequest, entitiesDestinationSlug, entitiesDestinationName, entitiesMigrateProjects);
        }

        /**
         * Execute startNewMigration request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Start a new GitLab Migration </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
            <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<APIEntitiesBulkImport> _callback) throws ApiException {
            BulkimportsStartNewMigrationRequest bulkimportsStartNewMigrationRequest = buildBodyParams();
            return startNewMigrationAsync(configurationUrl, configurationAccessToken, entitiesSourceType, entitiesSourceFullPath, entitiesDestinationNamespace, bulkimportsStartNewMigrationRequest, entitiesDestinationSlug, entitiesDestinationName, entitiesMigrateProjects, _callback);
        }
    }

    /**
     * Start a new GitLab Migration
     * This feature was introduced in GitLab 14.2.
     * @param configurationUrl Source GitLab instance URL (required)
     * @param configurationAccessToken Access token to the source GitLab instance (required)
     * @param entitiesSourceType Source entity type (required)
     * @param entitiesSourceFullPath Relative path of the source entity to import (required)
     * @param entitiesDestinationNamespace Destination namespace for the entity (required)
     * @param bulkimportsStartNewMigrationRequest  (required)
     * @return StartNewMigrationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Start a new GitLab Migration </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable entity </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service unavailable </td><td>  -  </td></tr>
     </table>
     */
    public StartNewMigrationRequestBuilder startNewMigration(String configurationUrl, String configurationAccessToken, List<String> entitiesSourceType, List<String> entitiesSourceFullPath, List<String> entitiesDestinationNamespace) throws IllegalArgumentException {
        if (configurationUrl == null) throw new IllegalArgumentException("\"configurationUrl\" is required but got null");
            

        if (configurationAccessToken == null) throw new IllegalArgumentException("\"configurationAccessToken\" is required but got null");
            

        if (entitiesSourceType == null) throw new IllegalArgumentException("\"entitiesSourceType\" is required but got null");
        if (entitiesSourceFullPath == null) throw new IllegalArgumentException("\"entitiesSourceFullPath\" is required but got null");
        if (entitiesDestinationNamespace == null) throw new IllegalArgumentException("\"entitiesDestinationNamespace\" is required but got null");
        return new StartNewMigrationRequestBuilder(configurationUrl, configurationAccessToken, entitiesSourceType, entitiesSourceFullPath, entitiesDestinationNamespace);
    }
}
