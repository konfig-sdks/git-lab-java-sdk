/*
 * GitLab API
 * An OpenAPI definition for the GitLab REST API. Few API resources or endpoints are currently included. The intent is to expand this to match the entire Markdown documentation of the API: <https://docs.gitlab.com/ee/api/>. Contributions are welcome.  When viewing this on gitlab.com, you can test API calls directly from the browser against the `gitlab.com` instance, if you are logged in. The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie), so each request is made using your account.  Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html) 
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.APIEntitiesCommit;
import com.konfigthis.client.model.APIEntitiesJobProject;
import com.konfigthis.client.model.APIEntitiesUserBasic;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * API_Entities_Job model
 */
@ApiModel(description = "API_Entities_Job model")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class APIEntitiesJob {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_STAGE = "stage";
  @SerializedName(SERIALIZED_NAME_STAGE)
  private String stage;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_STARTED_AT = "started_at";
  @SerializedName(SERIALIZED_NAME_STARTED_AT)
  private OffsetDateTime startedAt;

  public static final String SERIALIZED_NAME_FINISHED_AT = "finished_at";
  @SerializedName(SERIALIZED_NAME_FINISHED_AT)
  private OffsetDateTime finishedAt;

  public static final String SERIALIZED_NAME_COMMIT = "commit";
  @SerializedName(SERIALIZED_NAME_COMMIT)
  private APIEntitiesCommit commit;

  public static final String SERIALIZED_NAME_ARCHIVED = "archived";
  @SerializedName(SERIALIZED_NAME_ARCHIVED)
  private Boolean archived;

  public static final String SERIALIZED_NAME_ALLOW_FAILURE = "allow_failure";
  @SerializedName(SERIALIZED_NAME_ALLOW_FAILURE)
  private Boolean allowFailure;

  public static final String SERIALIZED_NAME_ERASED_AT = "erased_at";
  @SerializedName(SERIALIZED_NAME_ERASED_AT)
  private OffsetDateTime erasedAt;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_QUEUED_DURATION = "queued_duration";
  @SerializedName(SERIALIZED_NAME_QUEUED_DURATION)
  private Double queuedDuration;

  public static final String SERIALIZED_NAME_REF = "ref";
  @SerializedName(SERIALIZED_NAME_REF)
  private String ref;

  public static final String SERIALIZED_NAME_ARTIFACTS = "artifacts";
  @SerializedName(SERIALIZED_NAME_ARTIFACTS)
  private List artifacts = null;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private Boolean tag;

  public static final String SERIALIZED_NAME_WEB_URL = "web_url";
  @SerializedName(SERIALIZED_NAME_WEB_URL)
  private String webUrl;

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private APIEntitiesJobProject project;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private APIEntitiesUserBasic user;

  public APIEntitiesJob() {
  }

  public APIEntitiesJob id(Integer id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The ID of the job
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the job")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    
    
    
    this.id = id;
  }


  public APIEntitiesJob name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * The name of the job
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the job")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public APIEntitiesJob status(String status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * The current status of the job
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The current status of the job")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    
    
    
    this.status = status;
  }


  public APIEntitiesJob stage(String stage) {
    
    
    
    
    this.stage = stage;
    return this;
  }

   /**
   * The stage of the job in the CI/CD pipeline
   * @return stage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The stage of the job in the CI/CD pipeline")

  public String getStage() {
    return stage;
  }


  public void setStage(String stage) {
    
    
    
    this.stage = stage;
  }


  public APIEntitiesJob createdAt(OffsetDateTime createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The creation time of the job
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2016-01-11T10:13:33.506Z", value = "The creation time of the job")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public APIEntitiesJob startedAt(OffsetDateTime startedAt) {
    
    
    
    
    this.startedAt = startedAt;
    return this;
  }

   /**
   * The start time of the job
   * @return startedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2016-01-11T10:13:33.506Z", value = "The start time of the job")

  public OffsetDateTime getStartedAt() {
    return startedAt;
  }


  public void setStartedAt(OffsetDateTime startedAt) {
    
    
    
    this.startedAt = startedAt;
  }


  public APIEntitiesJob finishedAt(OffsetDateTime finishedAt) {
    
    
    
    
    this.finishedAt = finishedAt;
    return this;
  }

   /**
   * The finish time of the job
   * @return finishedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2016-01-11T10:13:33.506Z", value = "The finish time of the job")

  public OffsetDateTime getFinishedAt() {
    return finishedAt;
  }


  public void setFinishedAt(OffsetDateTime finishedAt) {
    
    
    
    this.finishedAt = finishedAt;
  }


  public APIEntitiesJob commit(APIEntitiesCommit commit) {
    
    
    
    
    this.commit = commit;
    return this;
  }

   /**
   * Get commit
   * @return commit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public APIEntitiesCommit getCommit() {
    return commit;
  }


  public void setCommit(APIEntitiesCommit commit) {
    
    
    
    this.commit = commit;
  }


  public APIEntitiesJob archived(Boolean archived) {
    
    
    
    
    this.archived = archived;
    return this;
  }

   /**
   * Indicates if the job is archived
   * @return archived
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates if the job is archived")

  public Boolean getArchived() {
    return archived;
  }


  public void setArchived(Boolean archived) {
    
    
    
    this.archived = archived;
  }


  public APIEntitiesJob allowFailure(Boolean allowFailure) {
    
    
    
    
    this.allowFailure = allowFailure;
    return this;
  }

   /**
   * Indicates if the job is allowed to fail
   * @return allowFailure
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates if the job is allowed to fail")

  public Boolean getAllowFailure() {
    return allowFailure;
  }


  public void setAllowFailure(Boolean allowFailure) {
    
    
    
    this.allowFailure = allowFailure;
  }


  public APIEntitiesJob erasedAt(OffsetDateTime erasedAt) {
    
    
    
    
    this.erasedAt = erasedAt;
    return this;
  }

   /**
   * The time when the job was erased, if applicable
   * @return erasedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2016-01-11T10:13:33.506Z", value = "The time when the job was erased, if applicable")

  public OffsetDateTime getErasedAt() {
    return erasedAt;
  }


  public void setErasedAt(OffsetDateTime erasedAt) {
    
    
    
    this.erasedAt = erasedAt;
  }


  public APIEntitiesJob duration(Integer duration) {
    
    
    
    
    this.duration = duration;
    return this;
  }

   /**
   * The duration of the job in seconds
   * @return duration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The duration of the job in seconds")

  public Integer getDuration() {
    return duration;
  }


  public void setDuration(Integer duration) {
    
    
    
    this.duration = duration;
  }


  public APIEntitiesJob queuedDuration(Double queuedDuration) {
    
    
    
    
    this.queuedDuration = queuedDuration;
    return this;
  }

  public APIEntitiesJob queuedDuration(Integer queuedDuration) {
    
    
    
    
    this.queuedDuration = queuedDuration.doubleValue();
    return this;
  }

   /**
   * The duration the job was queued before execution, in seconds
   * @return queuedDuration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The duration the job was queued before execution, in seconds")

  public Double getQueuedDuration() {
    return queuedDuration;
  }


  public void setQueuedDuration(Double queuedDuration) {
    
    
    
    this.queuedDuration = queuedDuration;
  }


  public APIEntitiesJob ref(String ref) {
    
    
    
    
    this.ref = ref;
    return this;
  }

   /**
   * The reference for the job
   * @return ref
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The reference for the job")

  public String getRef() {
    return ref;
  }


  public void setRef(String ref) {
    
    
    
    this.ref = ref;
  }


  public APIEntitiesJob artifacts(List artifacts) {
    
    
    
    
    this.artifacts = artifacts;
    return this;
  }

   /**
   * The artifacts produced by the job
   * @return artifacts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The artifacts produced by the job")

  public List getArtifacts() {
    return artifacts;
  }


  public void setArtifacts(List artifacts) {
    
    
    
    this.artifacts = artifacts;
  }


  public APIEntitiesJob tag(Boolean tag) {
    
    
    
    
    this.tag = tag;
    return this;
  }

   /**
   * Indicates if the job is tagged
   * @return tag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates if the job is tagged")

  public Boolean getTag() {
    return tag;
  }


  public void setTag(Boolean tag) {
    
    
    
    this.tag = tag;
  }


  public APIEntitiesJob webUrl(String webUrl) {
    
    
    
    
    this.webUrl = webUrl;
    return this;
  }

   /**
   * The URL for accessing the job in the web interface
   * @return webUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The URL for accessing the job in the web interface")

  public String getWebUrl() {
    return webUrl;
  }


  public void setWebUrl(String webUrl) {
    
    
    
    this.webUrl = webUrl;
  }


  public APIEntitiesJob project(APIEntitiesJobProject project) {
    
    
    
    
    this.project = project;
    return this;
  }

   /**
   * Get project
   * @return project
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public APIEntitiesJobProject getProject() {
    return project;
  }


  public void setProject(APIEntitiesJobProject project) {
    
    
    
    this.project = project;
  }


  public APIEntitiesJob user(APIEntitiesUserBasic user) {
    
    
    
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public APIEntitiesUserBasic getUser() {
    return user;
  }


  public void setUser(APIEntitiesUserBasic user) {
    
    
    
    this.user = user;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the APIEntitiesJob instance itself
   */
  public APIEntitiesJob putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APIEntitiesJob apIEntitiesJob = (APIEntitiesJob) o;
    return Objects.equals(this.id, apIEntitiesJob.id) &&
        Objects.equals(this.name, apIEntitiesJob.name) &&
        Objects.equals(this.status, apIEntitiesJob.status) &&
        Objects.equals(this.stage, apIEntitiesJob.stage) &&
        Objects.equals(this.createdAt, apIEntitiesJob.createdAt) &&
        Objects.equals(this.startedAt, apIEntitiesJob.startedAt) &&
        Objects.equals(this.finishedAt, apIEntitiesJob.finishedAt) &&
        Objects.equals(this.commit, apIEntitiesJob.commit) &&
        Objects.equals(this.archived, apIEntitiesJob.archived) &&
        Objects.equals(this.allowFailure, apIEntitiesJob.allowFailure) &&
        Objects.equals(this.erasedAt, apIEntitiesJob.erasedAt) &&
        Objects.equals(this.duration, apIEntitiesJob.duration) &&
        Objects.equals(this.queuedDuration, apIEntitiesJob.queuedDuration) &&
        Objects.equals(this.ref, apIEntitiesJob.ref) &&
        Objects.equals(this.artifacts, apIEntitiesJob.artifacts) &&
        Objects.equals(this.tag, apIEntitiesJob.tag) &&
        Objects.equals(this.webUrl, apIEntitiesJob.webUrl) &&
        Objects.equals(this.project, apIEntitiesJob.project) &&
        Objects.equals(this.user, apIEntitiesJob.user)&&
        Objects.equals(this.additionalProperties, apIEntitiesJob.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, status, stage, createdAt, startedAt, finishedAt, commit, archived, allowFailure, erasedAt, duration, queuedDuration, ref, artifacts, tag, webUrl, project, user, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APIEntitiesJob {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    stage: ").append(toIndentedString(stage)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
    sb.append("    finishedAt: ").append(toIndentedString(finishedAt)).append("\n");
    sb.append("    commit: ").append(toIndentedString(commit)).append("\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    allowFailure: ").append(toIndentedString(allowFailure)).append("\n");
    sb.append("    erasedAt: ").append(toIndentedString(erasedAt)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    queuedDuration: ").append(toIndentedString(queuedDuration)).append("\n");
    sb.append("    ref: ").append(toIndentedString(ref)).append("\n");
    sb.append("    artifacts: ").append(toIndentedString(artifacts)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    webUrl: ").append(toIndentedString(webUrl)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("status");
    openapiFields.add("stage");
    openapiFields.add("created_at");
    openapiFields.add("started_at");
    openapiFields.add("finished_at");
    openapiFields.add("commit");
    openapiFields.add("archived");
    openapiFields.add("allow_failure");
    openapiFields.add("erased_at");
    openapiFields.add("duration");
    openapiFields.add("queued_duration");
    openapiFields.add("ref");
    openapiFields.add("artifacts");
    openapiFields.add("tag");
    openapiFields.add("web_url");
    openapiFields.add("project");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to APIEntitiesJob
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!APIEntitiesJob.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APIEntitiesJob is not found in the empty JSON string", APIEntitiesJob.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("stage") != null && !jsonObj.get("stage").isJsonNull()) && !jsonObj.get("stage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stage").toString()));
      }
      // validate the optional field `commit`
      if (jsonObj.get("commit") != null && !jsonObj.get("commit").isJsonNull()) {
        APIEntitiesCommit.validateJsonObject(jsonObj.getAsJsonObject("commit"));
      }
      if ((jsonObj.get("ref") != null && !jsonObj.get("ref").isJsonNull()) && !jsonObj.get("ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ref").toString()));
      }
      if ((jsonObj.get("web_url") != null && !jsonObj.get("web_url").isJsonNull()) && !jsonObj.get("web_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `web_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("web_url").toString()));
      }
      // validate the optional field `project`
      if (jsonObj.get("project") != null && !jsonObj.get("project").isJsonNull()) {
        APIEntitiesJobProject.validateJsonObject(jsonObj.getAsJsonObject("project"));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        APIEntitiesUserBasic.validateJsonObject(jsonObj.getAsJsonObject("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APIEntitiesJob.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APIEntitiesJob' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APIEntitiesJob> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APIEntitiesJob.class));

       return (TypeAdapter<T>) new TypeAdapter<APIEntitiesJob>() {
           @Override
           public void write(JsonWriter out, APIEntitiesJob value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public APIEntitiesJob read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             APIEntitiesJob instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of APIEntitiesJob given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of APIEntitiesJob
  * @throws IOException if the JSON string is invalid with respect to APIEntitiesJob
  */
  public static APIEntitiesJob fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APIEntitiesJob.class);
  }

 /**
  * Convert an instance of APIEntitiesJob to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

