/*
 * GitLab API
 * An OpenAPI definition for the GitLab REST API. Few API resources or endpoints are currently included. The intent is to expand this to match the entire Markdown documentation of the API: <https://docs.gitlab.com/ee/api/>. Contributions are welcome.  When viewing this on gitlab.com, you can test API calls directly from the browser against the `gitlab.com` instance, if you are logged in. The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie), so each request is made using your account.  Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html) 
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * APIEntitiesCommit
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class APIEntitiesCommit {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_SHORT_ID = "short_id";
  @SerializedName(SERIALIZED_NAME_SHORT_ID)
  private String shortId;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_PARENT_IDS = "parent_ids";
  @SerializedName(SERIALIZED_NAME_PARENT_IDS)
  private List<String> parentIds = null;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_AUTHOR_NAME = "author_name";
  @SerializedName(SERIALIZED_NAME_AUTHOR_NAME)
  private String authorName;

  public static final String SERIALIZED_NAME_AUTHOR_EMAIL = "author_email";
  @SerializedName(SERIALIZED_NAME_AUTHOR_EMAIL)
  private String authorEmail;

  public static final String SERIALIZED_NAME_AUTHORED_DATE = "authored_date";
  @SerializedName(SERIALIZED_NAME_AUTHORED_DATE)
  private OffsetDateTime authoredDate;

  public static final String SERIALIZED_NAME_COMMITTER_NAME = "committer_name";
  @SerializedName(SERIALIZED_NAME_COMMITTER_NAME)
  private String committerName;

  public static final String SERIALIZED_NAME_COMMITTER_EMAIL = "committer_email";
  @SerializedName(SERIALIZED_NAME_COMMITTER_EMAIL)
  private String committerEmail;

  public static final String SERIALIZED_NAME_COMMITTED_DATE = "committed_date";
  @SerializedName(SERIALIZED_NAME_COMMITTED_DATE)
  private OffsetDateTime committedDate;

  public static final String SERIALIZED_NAME_TRAILERS = "trailers";
  @SerializedName(SERIALIZED_NAME_TRAILERS)
  private Object trailers;

  public static final String SERIALIZED_NAME_WEB_URL = "web_url";
  @SerializedName(SERIALIZED_NAME_WEB_URL)
  private String webUrl;

  public APIEntitiesCommit() {
  }

  public APIEntitiesCommit title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Initial commit", value = "")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public APIEntitiesCommit id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2695effb5807a22ff3d138d593fd856244e155e7", value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public APIEntitiesCommit shortId(String shortId) {
    
    
    
    
    this.shortId = shortId;
    return this;
  }

   /**
   * Get shortId
   * @return shortId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2695effb", value = "")

  public String getShortId() {
    return shortId;
  }


  public void setShortId(String shortId) {
    
    
    
    this.shortId = shortId;
  }


  public APIEntitiesCommit createdAt(OffsetDateTime createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-07-26T09:08:53Z", value = "")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public APIEntitiesCommit parentIds(List<String> parentIds) {
    
    
    
    
    this.parentIds = parentIds;
    return this;
  }

  public APIEntitiesCommit addParentIdsItem(String parentIdsItem) {
    if (this.parentIds == null) {
      this.parentIds = new ArrayList<>();
    }
    this.parentIds.add(parentIdsItem);
    return this;
  }

   /**
   * Get parentIds
   * @return parentIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getParentIds() {
    return parentIds;
  }


  public void setParentIds(List<String> parentIds) {
    
    
    
    this.parentIds = parentIds;
  }


  public APIEntitiesCommit message(String message) {
    
    
    
    
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Initial commit", value = "")

  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    
    
    
    this.message = message;
  }


  public APIEntitiesCommit authorName(String authorName) {
    
    
    
    
    this.authorName = authorName;
    return this;
  }

   /**
   * Get authorName
   * @return authorName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "John Smith", value = "")

  public String getAuthorName() {
    return authorName;
  }


  public void setAuthorName(String authorName) {
    
    
    
    this.authorName = authorName;
  }


  public APIEntitiesCommit authorEmail(String authorEmail) {
    
    
    
    
    this.authorEmail = authorEmail;
    return this;
  }

   /**
   * Get authorEmail
   * @return authorEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "john@example.com", value = "")

  public String getAuthorEmail() {
    return authorEmail;
  }


  public void setAuthorEmail(String authorEmail) {
    
    
    
    this.authorEmail = authorEmail;
  }


  public APIEntitiesCommit authoredDate(OffsetDateTime authoredDate) {
    
    
    
    
    this.authoredDate = authoredDate;
    return this;
  }

   /**
   * Get authoredDate
   * @return authoredDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2012-05-28T11:42:42Z", value = "")

  public OffsetDateTime getAuthoredDate() {
    return authoredDate;
  }


  public void setAuthoredDate(OffsetDateTime authoredDate) {
    
    
    
    this.authoredDate = authoredDate;
  }


  public APIEntitiesCommit committerName(String committerName) {
    
    
    
    
    this.committerName = committerName;
    return this;
  }

   /**
   * Get committerName
   * @return committerName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Jack Smith", value = "")

  public String getCommitterName() {
    return committerName;
  }


  public void setCommitterName(String committerName) {
    
    
    
    this.committerName = committerName;
  }


  public APIEntitiesCommit committerEmail(String committerEmail) {
    
    
    
    
    this.committerEmail = committerEmail;
    return this;
  }

   /**
   * Get committerEmail
   * @return committerEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "jack@example.com", value = "")

  public String getCommitterEmail() {
    return committerEmail;
  }


  public void setCommitterEmail(String committerEmail) {
    
    
    
    this.committerEmail = committerEmail;
  }


  public APIEntitiesCommit committedDate(OffsetDateTime committedDate) {
    
    
    
    
    this.committedDate = committedDate;
    return this;
  }

   /**
   * Get committedDate
   * @return committedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2012-05-28T11:42:42Z", value = "")

  public OffsetDateTime getCommittedDate() {
    return committedDate;
  }


  public void setCommittedDate(OffsetDateTime committedDate) {
    
    
    
    this.committedDate = committedDate;
  }


  public APIEntitiesCommit trailers(Object trailers) {
    
    
    
    
    this.trailers = trailers;
    return this;
  }

   /**
   * Get trailers
   * @return trailers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{ \"Merged-By\": \"Jane Doe janedoe@gitlab.com\" }", value = "")

  public Object getTrailers() {
    return trailers;
  }


  public void setTrailers(Object trailers) {
    
    
    
    this.trailers = trailers;
  }


  public APIEntitiesCommit webUrl(String webUrl) {
    
    
    
    
    this.webUrl = webUrl;
    return this;
  }

   /**
   * Get webUrl
   * @return webUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://gitlab.example.com/janedoe/gitlab-foss/-/commit/ed899a2f4b50b4370feeea94676502b42383c746", value = "")

  public String getWebUrl() {
    return webUrl;
  }


  public void setWebUrl(String webUrl) {
    
    
    
    this.webUrl = webUrl;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the APIEntitiesCommit instance itself
   */
  public APIEntitiesCommit putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APIEntitiesCommit apIEntitiesCommit = (APIEntitiesCommit) o;
    return Objects.equals(this.title, apIEntitiesCommit.title) &&
        Objects.equals(this.id, apIEntitiesCommit.id) &&
        Objects.equals(this.shortId, apIEntitiesCommit.shortId) &&
        Objects.equals(this.createdAt, apIEntitiesCommit.createdAt) &&
        Objects.equals(this.parentIds, apIEntitiesCommit.parentIds) &&
        Objects.equals(this.message, apIEntitiesCommit.message) &&
        Objects.equals(this.authorName, apIEntitiesCommit.authorName) &&
        Objects.equals(this.authorEmail, apIEntitiesCommit.authorEmail) &&
        Objects.equals(this.authoredDate, apIEntitiesCommit.authoredDate) &&
        Objects.equals(this.committerName, apIEntitiesCommit.committerName) &&
        Objects.equals(this.committerEmail, apIEntitiesCommit.committerEmail) &&
        Objects.equals(this.committedDate, apIEntitiesCommit.committedDate) &&
        Objects.equals(this.trailers, apIEntitiesCommit.trailers) &&
        Objects.equals(this.webUrl, apIEntitiesCommit.webUrl)&&
        Objects.equals(this.additionalProperties, apIEntitiesCommit.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, id, shortId, createdAt, parentIds, message, authorName, authorEmail, authoredDate, committerName, committerEmail, committedDate, trailers, webUrl, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APIEntitiesCommit {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    shortId: ").append(toIndentedString(shortId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    parentIds: ").append(toIndentedString(parentIds)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    authorName: ").append(toIndentedString(authorName)).append("\n");
    sb.append("    authorEmail: ").append(toIndentedString(authorEmail)).append("\n");
    sb.append("    authoredDate: ").append(toIndentedString(authoredDate)).append("\n");
    sb.append("    committerName: ").append(toIndentedString(committerName)).append("\n");
    sb.append("    committerEmail: ").append(toIndentedString(committerEmail)).append("\n");
    sb.append("    committedDate: ").append(toIndentedString(committedDate)).append("\n");
    sb.append("    trailers: ").append(toIndentedString(trailers)).append("\n");
    sb.append("    webUrl: ").append(toIndentedString(webUrl)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("id");
    openapiFields.add("short_id");
    openapiFields.add("created_at");
    openapiFields.add("parent_ids");
    openapiFields.add("message");
    openapiFields.add("author_name");
    openapiFields.add("author_email");
    openapiFields.add("authored_date");
    openapiFields.add("committer_name");
    openapiFields.add("committer_email");
    openapiFields.add("committed_date");
    openapiFields.add("trailers");
    openapiFields.add("web_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to APIEntitiesCommit
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!APIEntitiesCommit.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APIEntitiesCommit is not found in the empty JSON string", APIEntitiesCommit.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("short_id") != null && !jsonObj.get("short_id").isJsonNull()) && !jsonObj.get("short_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `short_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("short_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("parent_ids") != null && !jsonObj.get("parent_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_ids` to be an array in the JSON string but got `%s`", jsonObj.get("parent_ids").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("author_name") != null && !jsonObj.get("author_name").isJsonNull()) && !jsonObj.get("author_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author_name").toString()));
      }
      if ((jsonObj.get("author_email") != null && !jsonObj.get("author_email").isJsonNull()) && !jsonObj.get("author_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author_email").toString()));
      }
      if ((jsonObj.get("committer_name") != null && !jsonObj.get("committer_name").isJsonNull()) && !jsonObj.get("committer_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committer_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committer_name").toString()));
      }
      if ((jsonObj.get("committer_email") != null && !jsonObj.get("committer_email").isJsonNull()) && !jsonObj.get("committer_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `committer_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("committer_email").toString()));
      }
      if ((jsonObj.get("web_url") != null && !jsonObj.get("web_url").isJsonNull()) && !jsonObj.get("web_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `web_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("web_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APIEntitiesCommit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APIEntitiesCommit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APIEntitiesCommit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APIEntitiesCommit.class));

       return (TypeAdapter<T>) new TypeAdapter<APIEntitiesCommit>() {
           @Override
           public void write(JsonWriter out, APIEntitiesCommit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public APIEntitiesCommit read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             APIEntitiesCommit instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of APIEntitiesCommit given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of APIEntitiesCommit
  * @throws IOException if the JSON string is invalid with respect to APIEntitiesCommit
  */
  public static APIEntitiesCommit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APIEntitiesCommit.class);
  }

 /**
  * Convert an instance of APIEntitiesCommit to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

