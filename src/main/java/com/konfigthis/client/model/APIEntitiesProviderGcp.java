/*
 * GitLab API
 * An OpenAPI definition for the GitLab REST API. Few API resources or endpoints are currently included. The intent is to expand this to match the entire Markdown documentation of the API: <https://docs.gitlab.com/ee/api/>. Contributions are welcome.  When viewing this on gitlab.com, you can test API calls directly from the browser against the `gitlab.com` instance, if you are logged in. The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie), so each request is made using your account.  Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html) 
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * APIEntitiesProviderGcp
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class APIEntitiesProviderGcp {
  public static final String SERIALIZED_NAME_CLUSTER_ID = "cluster_id";
  @SerializedName(SERIALIZED_NAME_CLUSTER_ID)
  private String clusterId;

  public static final String SERIALIZED_NAME_STATUS_NAME = "status_name";
  @SerializedName(SERIALIZED_NAME_STATUS_NAME)
  private String statusName;

  public static final String SERIALIZED_NAME_GCP_PROJECT_ID = "gcp_project_id";
  @SerializedName(SERIALIZED_NAME_GCP_PROJECT_ID)
  private String gcpProjectId;

  public static final String SERIALIZED_NAME_ZONE = "zone";
  @SerializedName(SERIALIZED_NAME_ZONE)
  private String zone;

  public static final String SERIALIZED_NAME_MACHINE_TYPE = "machine_type";
  @SerializedName(SERIALIZED_NAME_MACHINE_TYPE)
  private String machineType;

  public static final String SERIALIZED_NAME_NUM_NODES = "num_nodes";
  @SerializedName(SERIALIZED_NAME_NUM_NODES)
  private String numNodes;

  public static final String SERIALIZED_NAME_ENDPOINT = "endpoint";
  @SerializedName(SERIALIZED_NAME_ENDPOINT)
  private String endpoint;

  public APIEntitiesProviderGcp() {
  }

  public APIEntitiesProviderGcp clusterId(String clusterId) {
    
    
    
    
    this.clusterId = clusterId;
    return this;
  }

   /**
   * Get clusterId
   * @return clusterId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getClusterId() {
    return clusterId;
  }


  public void setClusterId(String clusterId) {
    
    
    
    this.clusterId = clusterId;
  }


  public APIEntitiesProviderGcp statusName(String statusName) {
    
    
    
    
    this.statusName = statusName;
    return this;
  }

   /**
   * Get statusName
   * @return statusName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStatusName() {
    return statusName;
  }


  public void setStatusName(String statusName) {
    
    
    
    this.statusName = statusName;
  }


  public APIEntitiesProviderGcp gcpProjectId(String gcpProjectId) {
    
    
    
    
    this.gcpProjectId = gcpProjectId;
    return this;
  }

   /**
   * Get gcpProjectId
   * @return gcpProjectId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getGcpProjectId() {
    return gcpProjectId;
  }


  public void setGcpProjectId(String gcpProjectId) {
    
    
    
    this.gcpProjectId = gcpProjectId;
  }


  public APIEntitiesProviderGcp zone(String zone) {
    
    
    
    
    this.zone = zone;
    return this;
  }

   /**
   * Get zone
   * @return zone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getZone() {
    return zone;
  }


  public void setZone(String zone) {
    
    
    
    this.zone = zone;
  }


  public APIEntitiesProviderGcp machineType(String machineType) {
    
    
    
    
    this.machineType = machineType;
    return this;
  }

   /**
   * Get machineType
   * @return machineType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMachineType() {
    return machineType;
  }


  public void setMachineType(String machineType) {
    
    
    
    this.machineType = machineType;
  }


  public APIEntitiesProviderGcp numNodes(String numNodes) {
    
    
    
    
    this.numNodes = numNodes;
    return this;
  }

   /**
   * Get numNodes
   * @return numNodes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNumNodes() {
    return numNodes;
  }


  public void setNumNodes(String numNodes) {
    
    
    
    this.numNodes = numNodes;
  }


  public APIEntitiesProviderGcp endpoint(String endpoint) {
    
    
    
    
    this.endpoint = endpoint;
    return this;
  }

   /**
   * Get endpoint
   * @return endpoint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEndpoint() {
    return endpoint;
  }


  public void setEndpoint(String endpoint) {
    
    
    
    this.endpoint = endpoint;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the APIEntitiesProviderGcp instance itself
   */
  public APIEntitiesProviderGcp putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APIEntitiesProviderGcp apIEntitiesProviderGcp = (APIEntitiesProviderGcp) o;
    return Objects.equals(this.clusterId, apIEntitiesProviderGcp.clusterId) &&
        Objects.equals(this.statusName, apIEntitiesProviderGcp.statusName) &&
        Objects.equals(this.gcpProjectId, apIEntitiesProviderGcp.gcpProjectId) &&
        Objects.equals(this.zone, apIEntitiesProviderGcp.zone) &&
        Objects.equals(this.machineType, apIEntitiesProviderGcp.machineType) &&
        Objects.equals(this.numNodes, apIEntitiesProviderGcp.numNodes) &&
        Objects.equals(this.endpoint, apIEntitiesProviderGcp.endpoint)&&
        Objects.equals(this.additionalProperties, apIEntitiesProviderGcp.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusterId, statusName, gcpProjectId, zone, machineType, numNodes, endpoint, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APIEntitiesProviderGcp {\n");
    sb.append("    clusterId: ").append(toIndentedString(clusterId)).append("\n");
    sb.append("    statusName: ").append(toIndentedString(statusName)).append("\n");
    sb.append("    gcpProjectId: ").append(toIndentedString(gcpProjectId)).append("\n");
    sb.append("    zone: ").append(toIndentedString(zone)).append("\n");
    sb.append("    machineType: ").append(toIndentedString(machineType)).append("\n");
    sb.append("    numNodes: ").append(toIndentedString(numNodes)).append("\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cluster_id");
    openapiFields.add("status_name");
    openapiFields.add("gcp_project_id");
    openapiFields.add("zone");
    openapiFields.add("machine_type");
    openapiFields.add("num_nodes");
    openapiFields.add("endpoint");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to APIEntitiesProviderGcp
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!APIEntitiesProviderGcp.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APIEntitiesProviderGcp is not found in the empty JSON string", APIEntitiesProviderGcp.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("cluster_id") != null && !jsonObj.get("cluster_id").isJsonNull()) && !jsonObj.get("cluster_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cluster_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cluster_id").toString()));
      }
      if ((jsonObj.get("status_name") != null && !jsonObj.get("status_name").isJsonNull()) && !jsonObj.get("status_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status_name").toString()));
      }
      if ((jsonObj.get("gcp_project_id") != null && !jsonObj.get("gcp_project_id").isJsonNull()) && !jsonObj.get("gcp_project_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gcp_project_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gcp_project_id").toString()));
      }
      if ((jsonObj.get("zone") != null && !jsonObj.get("zone").isJsonNull()) && !jsonObj.get("zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zone").toString()));
      }
      if ((jsonObj.get("machine_type") != null && !jsonObj.get("machine_type").isJsonNull()) && !jsonObj.get("machine_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `machine_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("machine_type").toString()));
      }
      if ((jsonObj.get("num_nodes") != null && !jsonObj.get("num_nodes").isJsonNull()) && !jsonObj.get("num_nodes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `num_nodes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("num_nodes").toString()));
      }
      if ((jsonObj.get("endpoint") != null && !jsonObj.get("endpoint").isJsonNull()) && !jsonObj.get("endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpoint").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APIEntitiesProviderGcp.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APIEntitiesProviderGcp' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APIEntitiesProviderGcp> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APIEntitiesProviderGcp.class));

       return (TypeAdapter<T>) new TypeAdapter<APIEntitiesProviderGcp>() {
           @Override
           public void write(JsonWriter out, APIEntitiesProviderGcp value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public APIEntitiesProviderGcp read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             APIEntitiesProviderGcp instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of APIEntitiesProviderGcp given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of APIEntitiesProviderGcp
  * @throws IOException if the JSON string is invalid with respect to APIEntitiesProviderGcp
  */
  public static APIEntitiesProviderGcp fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APIEntitiesProviderGcp.class);
  }

 /**
  * Convert an instance of APIEntitiesProviderGcp to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

