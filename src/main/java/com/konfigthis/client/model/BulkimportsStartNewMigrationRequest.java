/*
 * GitLab API
 * An OpenAPI definition for the GitLab REST API. Few API resources or endpoints are currently included. The intent is to expand this to match the entire Markdown documentation of the API: <https://docs.gitlab.com/ee/api/>. Contributions are welcome.  When viewing this on gitlab.com, you can test API calls directly from the browser against the `gitlab.com` instance, if you are logged in. The feature uses the current [GitLab session cookie](https://docs.gitlab.com/ee/api/index.html#session-cookie), so each request is made using your account.  Instructions for using this tool can be found in [Interactive API Documentation](https://docs.gitlab.com/ee/api/openapi/openapi_interactive.html) 
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * BulkimportsStartNewMigrationRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class BulkimportsStartNewMigrationRequest {
  public static final String SERIALIZED_NAME_CONFIGURATION_URL = "configuration[url]";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_URL)
  private String configurationUrl;

  public static final String SERIALIZED_NAME_CONFIGURATION_ACCESS_TOKEN = "configuration[access_token]";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_ACCESS_TOKEN)
  private String configurationAccessToken;

  /**
   * Gets or Sets entitiesSourceType
   */
  @JsonAdapter(EntitiesSourceTypeEnum.Adapter.class)
 public enum EntitiesSourceTypeEnum {
    GROUP_ENTITY("group_entity"),
    
    PROJECT_ENTITY("project_entity");

    private String value;

    EntitiesSourceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EntitiesSourceTypeEnum fromValue(String value) {
      for (EntitiesSourceTypeEnum b : EntitiesSourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EntitiesSourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntitiesSourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntitiesSourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EntitiesSourceTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ENTITIES_SOURCE_TYPE = "entities[source_type]";
  @SerializedName(SERIALIZED_NAME_ENTITIES_SOURCE_TYPE)
  private List<EntitiesSourceTypeEnum> entitiesSourceType = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENTITIES_SOURCE_FULL_PATH = "entities[source_full_path]";
  @SerializedName(SERIALIZED_NAME_ENTITIES_SOURCE_FULL_PATH)
  private List<String> entitiesSourceFullPath = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENTITIES_DESTINATION_NAMESPACE = "entities[destination_namespace]";
  @SerializedName(SERIALIZED_NAME_ENTITIES_DESTINATION_NAMESPACE)
  private List<String> entitiesDestinationNamespace = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENTITIES_DESTINATION_SLUG = "entities[destination_slug]";
  @SerializedName(SERIALIZED_NAME_ENTITIES_DESTINATION_SLUG)
  private List<String> entitiesDestinationSlug = null;

  public static final String SERIALIZED_NAME_ENTITIES_DESTINATION_NAME = "entities[destination_name]";
  @SerializedName(SERIALIZED_NAME_ENTITIES_DESTINATION_NAME)
  private List<String> entitiesDestinationName = null;

  public static final String SERIALIZED_NAME_ENTITIES_MIGRATE_PROJECTS = "entities[migrate_projects]";
  @SerializedName(SERIALIZED_NAME_ENTITIES_MIGRATE_PROJECTS)
  private List<Boolean> entitiesMigrateProjects = null;

  public BulkimportsStartNewMigrationRequest() {
  }

  public BulkimportsStartNewMigrationRequest configurationUrl(String configurationUrl) {
    
    
    
    
    this.configurationUrl = configurationUrl;
    return this;
  }

   /**
   * Source GitLab instance URL
   * @return configurationUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Source GitLab instance URL")

  public String getConfigurationUrl() {
    return configurationUrl;
  }


  public void setConfigurationUrl(String configurationUrl) {
    
    
    
    this.configurationUrl = configurationUrl;
  }


  public BulkimportsStartNewMigrationRequest configurationAccessToken(String configurationAccessToken) {
    
    
    
    
    this.configurationAccessToken = configurationAccessToken;
    return this;
  }

   /**
   * Access token to the source GitLab instance
   * @return configurationAccessToken
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Access token to the source GitLab instance")

  public String getConfigurationAccessToken() {
    return configurationAccessToken;
  }


  public void setConfigurationAccessToken(String configurationAccessToken) {
    
    
    
    this.configurationAccessToken = configurationAccessToken;
  }


  public BulkimportsStartNewMigrationRequest entitiesSourceType(List<EntitiesSourceTypeEnum> entitiesSourceType) {
    
    
    
    
    this.entitiesSourceType = entitiesSourceType;
    return this;
  }

  public BulkimportsStartNewMigrationRequest addEntitiesSourceTypeItem(EntitiesSourceTypeEnum entitiesSourceTypeItem) {
    this.entitiesSourceType.add(entitiesSourceTypeItem);
    return this;
  }

   /**
   * Source entity type
   * @return entitiesSourceType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Source entity type")

  public List<EntitiesSourceTypeEnum> getEntitiesSourceType() {
    return entitiesSourceType;
  }


  public void setEntitiesSourceType(List<EntitiesSourceTypeEnum> entitiesSourceType) {
    
    
    
    this.entitiesSourceType = entitiesSourceType;
  }


  public BulkimportsStartNewMigrationRequest entitiesSourceFullPath(List<String> entitiesSourceFullPath) {
    
    
    
    
    this.entitiesSourceFullPath = entitiesSourceFullPath;
    return this;
  }

  public BulkimportsStartNewMigrationRequest addEntitiesSourceFullPathItem(String entitiesSourceFullPathItem) {
    this.entitiesSourceFullPath.add(entitiesSourceFullPathItem);
    return this;
  }

   /**
   * Relative path of the source entity to import
   * @return entitiesSourceFullPath
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Relative path of the source entity to import")

  public List<String> getEntitiesSourceFullPath() {
    return entitiesSourceFullPath;
  }


  public void setEntitiesSourceFullPath(List<String> entitiesSourceFullPath) {
    
    
    
    this.entitiesSourceFullPath = entitiesSourceFullPath;
  }


  public BulkimportsStartNewMigrationRequest entitiesDestinationNamespace(List<String> entitiesDestinationNamespace) {
    
    
    
    
    this.entitiesDestinationNamespace = entitiesDestinationNamespace;
    return this;
  }

  public BulkimportsStartNewMigrationRequest addEntitiesDestinationNamespaceItem(String entitiesDestinationNamespaceItem) {
    this.entitiesDestinationNamespace.add(entitiesDestinationNamespaceItem);
    return this;
  }

   /**
   * Destination namespace for the entity
   * @return entitiesDestinationNamespace
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Destination namespace for the entity")

  public List<String> getEntitiesDestinationNamespace() {
    return entitiesDestinationNamespace;
  }


  public void setEntitiesDestinationNamespace(List<String> entitiesDestinationNamespace) {
    
    
    
    this.entitiesDestinationNamespace = entitiesDestinationNamespace;
  }


  public BulkimportsStartNewMigrationRequest entitiesDestinationSlug(List<String> entitiesDestinationSlug) {
    
    
    
    
    this.entitiesDestinationSlug = entitiesDestinationSlug;
    return this;
  }

  public BulkimportsStartNewMigrationRequest addEntitiesDestinationSlugItem(String entitiesDestinationSlugItem) {
    if (this.entitiesDestinationSlug == null) {
      this.entitiesDestinationSlug = new ArrayList<>();
    }
    this.entitiesDestinationSlug.add(entitiesDestinationSlugItem);
    return this;
  }

   /**
   * Destination slug for the entity
   * @return entitiesDestinationSlug
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Destination slug for the entity")

  public List<String> getEntitiesDestinationSlug() {
    return entitiesDestinationSlug;
  }


  public void setEntitiesDestinationSlug(List<String> entitiesDestinationSlug) {
    
    
    
    this.entitiesDestinationSlug = entitiesDestinationSlug;
  }


  public BulkimportsStartNewMigrationRequest entitiesDestinationName(List<String> entitiesDestinationName) {
    
    
    
    
    this.entitiesDestinationName = entitiesDestinationName;
    return this;
  }

  public BulkimportsStartNewMigrationRequest addEntitiesDestinationNameItem(String entitiesDestinationNameItem) {
    if (this.entitiesDestinationName == null) {
      this.entitiesDestinationName = new ArrayList<>();
    }
    this.entitiesDestinationName.add(entitiesDestinationNameItem);
    return this;
  }

   /**
   * Deprecated: Use :destination_slug instead. Destination slug for the entity
   * @return entitiesDestinationName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Deprecated: Use :destination_slug instead. Destination slug for the entity")

  public List<String> getEntitiesDestinationName() {
    return entitiesDestinationName;
  }


  public void setEntitiesDestinationName(List<String> entitiesDestinationName) {
    
    
    
    this.entitiesDestinationName = entitiesDestinationName;
  }


  public BulkimportsStartNewMigrationRequest entitiesMigrateProjects(List<Boolean> entitiesMigrateProjects) {
    
    
    
    
    this.entitiesMigrateProjects = entitiesMigrateProjects;
    return this;
  }

  public BulkimportsStartNewMigrationRequest addEntitiesMigrateProjectsItem(Boolean entitiesMigrateProjectsItem) {
    if (this.entitiesMigrateProjects == null) {
      this.entitiesMigrateProjects = new ArrayList<>();
    }
    this.entitiesMigrateProjects.add(entitiesMigrateProjectsItem);
    return this;
  }

   /**
   * Indicates group migration should include nested projects
   * @return entitiesMigrateProjects
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates group migration should include nested projects")

  public List<Boolean> getEntitiesMigrateProjects() {
    return entitiesMigrateProjects;
  }


  public void setEntitiesMigrateProjects(List<Boolean> entitiesMigrateProjects) {
    
    
    
    this.entitiesMigrateProjects = entitiesMigrateProjects;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BulkimportsStartNewMigrationRequest instance itself
   */
  public BulkimportsStartNewMigrationRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BulkimportsStartNewMigrationRequest bulkimportsStartNewMigrationRequest = (BulkimportsStartNewMigrationRequest) o;
    return Objects.equals(this.configurationUrl, bulkimportsStartNewMigrationRequest.configurationUrl) &&
        Objects.equals(this.configurationAccessToken, bulkimportsStartNewMigrationRequest.configurationAccessToken) &&
        Objects.equals(this.entitiesSourceType, bulkimportsStartNewMigrationRequest.entitiesSourceType) &&
        Objects.equals(this.entitiesSourceFullPath, bulkimportsStartNewMigrationRequest.entitiesSourceFullPath) &&
        Objects.equals(this.entitiesDestinationNamespace, bulkimportsStartNewMigrationRequest.entitiesDestinationNamespace) &&
        Objects.equals(this.entitiesDestinationSlug, bulkimportsStartNewMigrationRequest.entitiesDestinationSlug) &&
        Objects.equals(this.entitiesDestinationName, bulkimportsStartNewMigrationRequest.entitiesDestinationName) &&
        Objects.equals(this.entitiesMigrateProjects, bulkimportsStartNewMigrationRequest.entitiesMigrateProjects)&&
        Objects.equals(this.additionalProperties, bulkimportsStartNewMigrationRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configurationUrl, configurationAccessToken, entitiesSourceType, entitiesSourceFullPath, entitiesDestinationNamespace, entitiesDestinationSlug, entitiesDestinationName, entitiesMigrateProjects, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BulkimportsStartNewMigrationRequest {\n");
    sb.append("    configurationUrl: ").append(toIndentedString(configurationUrl)).append("\n");
    sb.append("    configurationAccessToken: ").append(toIndentedString(configurationAccessToken)).append("\n");
    sb.append("    entitiesSourceType: ").append(toIndentedString(entitiesSourceType)).append("\n");
    sb.append("    entitiesSourceFullPath: ").append(toIndentedString(entitiesSourceFullPath)).append("\n");
    sb.append("    entitiesDestinationNamespace: ").append(toIndentedString(entitiesDestinationNamespace)).append("\n");
    sb.append("    entitiesDestinationSlug: ").append(toIndentedString(entitiesDestinationSlug)).append("\n");
    sb.append("    entitiesDestinationName: ").append(toIndentedString(entitiesDestinationName)).append("\n");
    sb.append("    entitiesMigrateProjects: ").append(toIndentedString(entitiesMigrateProjects)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("configuration[url]");
    openapiFields.add("configuration[access_token]");
    openapiFields.add("entities[source_type]");
    openapiFields.add("entities[source_full_path]");
    openapiFields.add("entities[destination_namespace]");
    openapiFields.add("entities[destination_slug]");
    openapiFields.add("entities[destination_name]");
    openapiFields.add("entities[migrate_projects]");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("configuration[url]");
    openapiRequiredFields.add("configuration[access_token]");
    openapiRequiredFields.add("entities[source_type]");
    openapiRequiredFields.add("entities[source_full_path]");
    openapiRequiredFields.add("entities[destination_namespace]");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BulkimportsStartNewMigrationRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BulkimportsStartNewMigrationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BulkimportsStartNewMigrationRequest is not found in the empty JSON string", BulkimportsStartNewMigrationRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BulkimportsStartNewMigrationRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("configuration[url]").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configuration[url]` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configuration[url]").toString()));
      }
      if (!jsonObj.get("configuration[access_token]").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configuration[access_token]` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configuration[access_token]").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("entities[source_type]") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("entities[source_type]").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `entities[source_type]` to be an array in the JSON string but got `%s`", jsonObj.get("entities[source_type]").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("entities[source_full_path]") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("entities[source_full_path]").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `entities[source_full_path]` to be an array in the JSON string but got `%s`", jsonObj.get("entities[source_full_path]").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("entities[destination_namespace]") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("entities[destination_namespace]").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `entities[destination_namespace]` to be an array in the JSON string but got `%s`", jsonObj.get("entities[destination_namespace]").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("entities[destination_slug]") != null && !jsonObj.get("entities[destination_slug]").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `entities[destination_slug]` to be an array in the JSON string but got `%s`", jsonObj.get("entities[destination_slug]").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("entities[destination_name]") != null && !jsonObj.get("entities[destination_name]").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `entities[destination_name]` to be an array in the JSON string but got `%s`", jsonObj.get("entities[destination_name]").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("entities[migrate_projects]") != null && !jsonObj.get("entities[migrate_projects]").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `entities[migrate_projects]` to be an array in the JSON string but got `%s`", jsonObj.get("entities[migrate_projects]").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BulkimportsStartNewMigrationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BulkimportsStartNewMigrationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BulkimportsStartNewMigrationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BulkimportsStartNewMigrationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<BulkimportsStartNewMigrationRequest>() {
           @Override
           public void write(JsonWriter out, BulkimportsStartNewMigrationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BulkimportsStartNewMigrationRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BulkimportsStartNewMigrationRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BulkimportsStartNewMigrationRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BulkimportsStartNewMigrationRequest
  * @throws IOException if the JSON string is invalid with respect to BulkimportsStartNewMigrationRequest
  */
  public static BulkimportsStartNewMigrationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BulkimportsStartNewMigrationRequest.class);
  }

 /**
  * Convert an instance of BulkimportsStartNewMigrationRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

